# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-15 19:38
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.model.fields.custom_fields
import edc_base.model.fields.hostname_modification_field
import edc_base.model.fields.userfield
import edc_base.model.fields.uuid_auto_field
import edc_base.model.validators.date
import edc_base.model.validators.dob
import edc_base.model.validators.eligibility
import edc_consent.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bcpp_survey', '__first__'),
        ('bcpp', '0001_initial'),
        ('bcpp_household', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bcpp_list', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='EnrollmentChecklist',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('initials', models.CharField(db_index=True, max_length=3, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{1,3}$', 'Must be Only CAPS and 2 or 3 letters. No spaces or numbers allowed.')], verbose_name='Initials')),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD. (Data will not be saved)', null=True, validators=[edc_base.model.validators.dob.dob_not_future, edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='Date of birth')),
                ('guardian', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='If a minor age 16 and 17, ensure a guardian is available otherwise participant will not be enrolled.', max_length=10, verbose_name='If minor, is there a guardian available? ')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('has_identity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="Allow Omang, Passport number, driver's license number or Omang receipt number. If 'NO' participant will not be enrolled.", max_length=10, verbose_name='[Interviewer] Has the subject presented a valid OMANG or other identity document?')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('study_participation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='N/A', help_text="If 'YES' then not eligible", max_length=3, null=True, verbose_name='Have you participated in a Ya Tsie Study with Botswana Harvard Partnership?')),
                ('confirm_participation', models.CharField(choices=[('Block', 'Yes( Block from further participation)'), ('Continue', 'No (Can continue and participate)'), ('N/A', 'Not applicable')], default='N/A', max_length=15, null=True, verbose_name='If Yes, RA should obtain documentation of participation and ask CBS toconfirm(give Omang Number). Has Participation been confirmed')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('part_time_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If participant has moved into the community in the past 12 months, then since moving in has the participant typically spent more than 3 nights per month in this community. If 'NO (or don't want to answer)'. Participant will not be enrolled.", max_length=10, verbose_name='In the past 12 months, have you typically spent 3 or more nights per month in this community? ')),
                ('household_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' participant will not be enrolled.", max_length=3, verbose_name='In the past 12 months, have you typically spent more nights on average in this household than in any other household in the same community?')),
                ('literacy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If participate is illiterate, confirm there is a literatewitness available otherwise participant will not be enrolled.', max_length=10, verbose_name='Is the participant LITERATE?, or if ILLITERATE, is there a  LITERATE witness available ')),
                ('is_eligible', models.BooleanField(default=False)),
                ('loss_reason', models.TextField(editable=False, help_text='(stored for the loss form)', max_length=500, null=True, verbose_name='Reason not eligible')),
                ('auto_filled', models.BooleanField(default=False, editable=False, help_text='Was autofilled on data conversion')),
            ],
            options={
                'verbose_name': 'Enrollment Checklist',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='EnrollmentLoss',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.dob.dob_not_future])),
                ('reason', models.TextField(help_text='Do not include any personal identifiable information.', max_length=500, verbose_name='Reason not eligible')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalEnrollmentChecklist',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('initials', models.CharField(db_index=True, max_length=3, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{1,3}$', 'Must be Only CAPS and 2 or 3 letters. No spaces or numbers allowed.')], verbose_name='Initials')),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD. (Data will not be saved)', null=True, validators=[edc_base.model.validators.dob.dob_not_future, edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='Date of birth')),
                ('guardian', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='If a minor age 16 and 17, ensure a guardian is available otherwise participant will not be enrolled.', max_length=10, verbose_name='If minor, is there a guardian available? ')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('has_identity', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="Allow Omang, Passport number, driver's license number or Omang receipt number. If 'NO' participant will not be enrolled.", max_length=10, verbose_name='[Interviewer] Has the subject presented a valid OMANG or other identity document?')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('study_participation', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='N/A', help_text="If 'YES' then not eligible", max_length=3, null=True, verbose_name='Have you participated in a Ya Tsie Study with Botswana Harvard Partnership?')),
                ('confirm_participation', models.CharField(choices=[('Block', 'Yes( Block from further participation)'), ('Continue', 'No (Can continue and participate)'), ('N/A', 'Not applicable')], default='N/A', max_length=15, null=True, verbose_name='If Yes, RA should obtain documentation of participation and ask CBS toconfirm(give Omang Number). Has Participation been confirmed')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('part_time_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If participant has moved into the community in the past 12 months, then since moving in has the participant typically spent more than 3 nights per month in this community. If 'NO (or don't want to answer)'. Participant will not be enrolled.", max_length=10, verbose_name='In the past 12 months, have you typically spent 3 or more nights per month in this community? ')),
                ('household_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' participant will not be enrolled.", max_length=3, verbose_name='In the past 12 months, have you typically spent more nights on average in this household than in any other household in the same community?')),
                ('literacy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If participate is illiterate, confirm there is a literatewitness available otherwise participant will not be enrolled.', max_length=10, verbose_name='Is the participant LITERATE?, or if ILLITERATE, is there a  LITERATE witness available ')),
                ('is_eligible', models.BooleanField(default=False)),
                ('loss_reason', models.TextField(editable=False, help_text='(stored for the loss form)', max_length=500, null=True, verbose_name='Reason not eligible')),
                ('auto_filled', models.BooleanField(default=False, editable=False, help_text='Was autofilled on data conversion')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Enrollment Checklist',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalEnrollmentLoss',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.dob.dob_not_future])),
                ('reason', models.TextField(help_text='Do not include any personal identifiable information.', max_length=500, verbose_name='Reason not eligible')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical enrollment loss',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdHeadEligibility',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('aged_over_18', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you verify that the respondent is aged 18 or older? ')),
                ('household_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=3, verbose_name='Does the respondent typically spend more nights on average in this household than in any other household in the same community?')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you administer the verbal script and ensure the respondent is willing to provide household information? ')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical household head eligibility',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdInfo',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date/Time')),
                ('flooring_type', models.CharField(choices=[('Dirt/earth', 'Dirt/earth '), ('Wood, plank', 'Wood, plank'), ('Parquet/lino', 'Parquet/lino'), ('Cement', 'Cement'), ('Tile flooring', 'Tile flooring'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='What is the main type of flooring for this household?')),
                ('flooring_type_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('living_rooms', models.IntegerField(blank=True, help_text='Note: Record the number of rooms where people live/meet/sleep. If participant does not want to answer, leave blank', null=True, verbose_name='How many living rooms are there in this household unit (exclude garage, bathroom, kitchen, store-room, etc if not used as living room )? ')),
                ('water_source', models.CharField(choices=[('Communal tap', 'Communal tap'), ('Standpipe/tap within plot', 'Standpipe/tap within plot'), ('Piped indoors', 'Piped indoors'), ('Borehore', 'Borehole'), ('Protected well', 'Protected well'), ('Unprotected/shallow well', 'Unprotected/shallow well'), ('River /dam/lake/pan', 'River /dam/lake/pan'), ('Bowser/tanker', 'Bowser/tanker'), ('OTHER', 'Other, specify (including unknown):'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='What is the main source of drinking water for this household? ')),
                ('water_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('energy_source', models.CharField(choices=[('Charcoal/wood', 'Charcoal/wood'), ('Paraffin', 'Paraffin'), ('Gas', 'Gas'), ('Electricity (mains)', 'Electricity (mains)'), ('Electricity (solar)', 'Electricity (solar)'), ('No cooking done', 'No cooking done'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='What is the main source of energy used for cooking? ')),
                ('energy_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('toilet_facility', models.CharField(choices=[('Pit latrine within plot', 'Pit latrine within plot'), ('Flush toilet within plot', 'Flush toilet within plot'), ("Neighbour's flush toilet", "Neighbour's flush toilet"), ("Neighbour's pit latrine", 'Neighbours pit latrine'), ('Communal flush toilet', 'Communal flush toilet'), ('Communal pit latrine', 'Communal pit latrine'), ('Pail bucket latrine', 'Pail bucket latrine'), ('Bush', 'Bush'), ('River or other body of water', 'River or other body of water'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='What is the main toilet facility used in this household? ')),
                ('toilet_facility_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('goats_owned', models.IntegerField(blank=True, help_text='Note: May need to assist in adding up goats between household members or helping estimate. If resident does not want to answer, leave blank.', null=True, verbose_name='How many goats are owned by the members of this household? [If unsure of exact number, give your best guess] ')),
                ('sheep_owned', models.IntegerField(blank=True, help_text='Note: May need to assist in adding up sheep between household members or helping estimate. If resident does not want to answer, leave blank.', null=True, verbose_name='How many sheep are owned by the members of this household? [If unsure of exact number, give your best guess] ')),
                ('cattle_owned', models.IntegerField(blank=True, help_text='Note: May need to assist in adding up cows and bulls between household members or helping estimate. If resident does not want to answer, leave blank.', null=True, verbose_name='How many head of cattle (cows and bulls) are owned by the members of this household? [If unsure of exact number, give your best guess] ')),
                ('smaller_meals', models.CharField(choices=[('Never', 'Never'), ('Rarely', 'Rarely'), ('Sometimes', 'Sometimes'), ('Often', 'Often'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='In the past 4 weeks, did you or any household member have to eat a smaller meal than you felt you needed because there was not enough food? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical household info',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdMember',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(db_index=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator('^[A-Z]{1,250}$', 'Ensure first name is only CAPS and does not contain any spaces or numbers')], verbose_name='First name')),
                ('initials', models.CharField(db_index=True, max_length=3, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{1,3}$', 'Must be Only CAPS and 2 or 3 letters. No spaces or numbers allowed.')], verbose_name='Initials')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], db_index=True, max_length=1, verbose_name='Gender')),
                ('age_in_years', models.IntegerField(db_index=True, help_text='If age is unknown, enter 0. If member is less than one year old, enter 1', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Age in years')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, verbose_name='Survival status')),
                ('present_today', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], db_index=True, max_length=3, verbose_name='Is the member present today?')),
                ('relation', models.CharField(choices=[('Head', 'HEAD of HOUSEHOLD'), ('aunt', 'Aunt'), ('brother', 'Brother'), ('brother-in-law', 'Brother in-law'), ('cousin', 'Cousin'), ('daughter', 'Daughter'), ('daughter-in-law', 'Daughter-in-law'), ('employee', 'Employee'), ('family_friend', 'Family friend'), ('father', 'Father'), ('father-in-law', 'Father-in-law'), ('friend', 'Friend'), ('granddaughter', 'Granddaughter'), ('grandfather', 'Grandfather'), ('grandmother', 'Grandmother'), ('grandson', 'Grandson'), ('great-Granddaughter', 'Great-Granddaughter'), ('great-Grandfather', 'Great-Grandfather'), ('great-Grandmother', 'Great-Grandmother'), ('great-Grandson', 'Great-Grandson'), ('helper', 'Helper'), ('housemaid', 'Housemaid'), ('housemate', 'Housemate'), ('husband', 'Husband'), ('mother', 'Mother'), ('mother-in-law', 'Mother-in-law'), ('nephew', 'Nephew'), ('niece', 'Niece'), ('partner', 'Partner'), ('sister', 'Sister'), ('sister-in-law', 'Sister-in-law'), ('son', 'Son'), ('son-in-law', 'Son-in-law'), ('uncle', 'Uncle'), ('wife', 'Wife'), ('UNKNOWN', 'UNKNOWN')], help_text='Relation to head of household', max_length=35, null=True, verbose_name='Relation to head of household')),
                ('inability_to_participate', models.CharField(choices=[('N/A', 'ABLE to participate'), ('Mental Incapacity', 'Mental Incapacity'), ('Deaf/Mute', 'Deaf/Mute'), ('Too sick', 'Too sick'), ('Incarcerated', 'Incarcerated'), ('OTHER', 'Other, specify.')], help_text='Participant can only participate if NONE is selected. (Any of these reasons make the participant unable to take part in the informed consent process)', max_length=17, verbose_name='Do any of the following reasons apply to the participant?')),
                ('inability_to_participate_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('study_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='If participant has moved into the community in the past 12 months, then since moving in has the participant typically spent 3 or more nights per month in this community.', max_length=17, verbose_name='In the past 12 months, have you typically spent 3 or more nights per month in this community? ')),
                ('internal_identifier', models.CharField(default=None, editable=False, help_text="Identifier to track member between surveys, is the id of the member's first appearance in the table.", max_length=36, null=True)),
                ('visit_attempts', models.IntegerField(default=0, editable=False)),
                ('member_status', models.CharField(choices=[('BHS_ELIGIBLE', 'BHS_ELIGIBLE'), ('ANNUAL', 'ANNUAL'), ('REFUSED_HTC', 'REFUSED_HTC'), ('NOT_ELIGIBLE', 'NOT_ELIGIBLE'), ('UNDECIDED', 'UNDECIDED'), ('HTC', 'HTC'), ('ABSENT', 'ABSENT'), ('REFUSED', 'REFUSED'), ('BHS', 'BHS'), ('BHS_LOSS', 'BHS_LOSS'), ('HTC_ELIGIBLE', 'HTC_ELIGIBLE'), ('DECEASED', 'DECEASED'), ('NOT_REPORTED', 'NOT_REPORTED'), ('BHS_SCREEN', 'BHS_SCREEN')], db_index=True, editable=False, help_text='RESEARCH, ABSENT, REFUSED, UNDECIDED', max_length=25, null=True)),
                ('hiv_history', models.CharField(editable=False, max_length=25, null=True)),
                ('eligible_member', models.NullBooleanField(default=False, editable=False, help_text='eligible to be screened. based on data on this form')),
                ('eligible_subject', models.NullBooleanField(default=False, editable=False, help_text='updated by the enrollment checklist save method only. True if subject passes the eligibility criteria.')),
                ('enrollment_checklist_completed', models.NullBooleanField(default=False, editable=False, help_text='updated by enrollment checklist only (regardless of the eligibility outcome).')),
                ('enrollment_loss_completed', models.NullBooleanField(default=False, editable=False, help_text='updated by enrollment loss save method only.')),
                ('refused', models.BooleanField(default=False, editable=False, help_text='updated by subject refusal save method only')),
                ('undecided', models.BooleanField(default=False, editable=False, help_text='updated by subject undecided save method only')),
                ('refused_htc', models.BooleanField(default=False, editable=False, help_text='updated by subject HTC save method only')),
                ('htc', models.BooleanField(default=False, editable=False, help_text='updated by the subject HTC save method only')),
                ('is_consented', models.BooleanField(default=False, editable=False, help_text='updated by the subject consent save method only')),
                ('eligible_htc', models.NullBooleanField(default=False, editable=False)),
                ('eligible_hoh', models.NullBooleanField(default=False, editable=False, help_text='updated by the head of household enrollment checklist only.')),
                ('reported', models.BooleanField(default=False, editable=False, help_text='update by any of subject absentee, undecided, refusal')),
                ('absent', models.BooleanField(default=False, editable=False, help_text='Updated by the subject absentee log')),
                ('target', models.IntegerField(default=0, editable=False)),
                ('auto_filled', models.BooleanField(default=False, editable=False, help_text='Was autofilled for follow-up surveys using information from previous survey. See EnumerationHelper')),
                ('updated_after_auto_filled', models.BooleanField(default=True, editable=False, help_text='if True, a user updated the values or this was not autofilled')),
                ('additional_key', models.CharField(default=None, editable=False, help_text='A uuid to be added to bypass the unique constraint for firstname, initials, household_structure. Should remain as the default value for normal enumeration. Is needed for Members added to the data from the clinic section where household_structure is always the same value.', max_length=36, null=True, verbose_name='-')),
                ('personal_details_changed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='-', help_text='personal details (name/surname)', max_length=10, null=True, verbose_name='Have your personal details (name/surname) changed since the last time we visited you?')),
                ('details_change_reason', models.CharField(blank=True, choices=[('married', 'Married'), ('parent_married', 'Parent Married')], default='-', help_text='if personal detail changed choice a reason above.', max_length=30, null=True, verbose_name='If YES, please specify the reason')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('household_structure', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure')),
                ('registered_subject', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp.RegisteredSubject')),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical household member',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalMemberAppointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('appt_date', models.DateField(verbose_name='Appointment date')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], default='new', max_length=25, verbose_name='Status')),
                ('label', models.CharField(help_text='label to group, e.g. T1 prep', max_length=25)),
                ('time_of_week', models.CharField(blank=True, choices=[('weekdays', 'Weekdays'), ('weekend', 'Weekends')], max_length=25, null=True, verbose_name='Time of week when participant will be available')),
                ('time_of_day', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening')], max_length=25, null=True, verbose_name='Time of day when participant will be available')),
                ('is_confirmed', models.BooleanField(default=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical member appointment',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectAbsentee',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Absentee',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectAbsenteeEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Report date')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('next_appt_datetime', models.DateTimeField(help_text='The date and time to meet with the subject', verbose_name='Follow-up appointment')),
                ('next_appt_datetime_source', models.CharField(choices=[('participant', 'Participant'), ('household member', 'household member'), ('hbc', 'HBC'), ('other', 'Other')], max_length=25, verbose_name='Appointment date suggested by?')),
                ('contact_details', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Information that can be used to contact someone, preferrably the subject, to confirm the appointment (Encryption: RSA local)', max_length=71, null=True)),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('reason', models.CharField(choices=[('gone visiting (relatives,holidays,weddings,funerals)', 'Gone visiting'), ('stays at lands or cattlepost ', 'Stays at Lands/Cattlepost '), ('stepped out(shops, errands etc) ', 'Stepped out (shops, errands, ) '), ('works in village and comes home daily', 'Works in the village, home daily'), ('goes to school in village and comes home daily', 'Schools in this village, home daily'), ('works outside village and comes home daily', 'Works outside the village, home daily'), ('goes to school outside village and comes home daily', 'Schools outside village, home daily'), ('works outside village and comes home irregularly ', 'Works outside the village, home irregularly '), ('goes to school outside village and comes home irregularly ', 'Schools outside village, home irregularly '), ('works outside village and comes home monthly ', 'Works outside the village, home monthly '), ('goes to school outside village and comes home monthly ', 'Schools outside village, home monthly '), ('works outside village and comes home on weekends ', 'Works outside the village, home on weekends '), ('goes to school outside village and comes home on weekends ', 'Schools outside village, home on weekends '), ('OTHER', 'Other...')], max_length=100, verbose_name='Reason?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Absentee Entry',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectDeath',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('death_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of Death:')),
                ('site_aware_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date site aware of Death:')),
                ('death_cause_info_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('death_cause', models.TextField(blank=True, help_text='Note: Cardiac and pulmonary arrest are not major reasons and should not be used to describe major cause)', max_length=1000, null=True, verbose_name='Describe the major cause of death(including pertinent autopsy information if available),starting with the first noticeable illness thought to be related to death,continuing to time of death. ')),
                ('death_cause_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('duration_of_illness', models.IntegerField(default=0, help_text='in days', verbose_name='Duration of acute illness directly causing death (in days, or choose Unknown)?')),
                ('relationship_death_study', models.CharField(choices=[('Definitely not related', 'Definitely not related'), ('Probably not related', 'Probably not related'), ('Possible related', 'Possible related'), ('Probably related', 'Probably related'), ('Definitely related', 'Definitely related')], max_length=50, verbose_name='What is the relationship of the death to study participation?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Death',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectHtc',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('tracking_identifier', models.CharField(blank=True, help_text='Transcribe this tracking identifier onto the paper HTC Intake form.', max_length=50, null=True, verbose_name='HTC tracking identifier')),
                ('offered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Was the subject offered HTC')),
                ('accepted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Did the subject accept HTC')),
                ('refusal_reason', models.CharField(blank=True, help_text='Required if subject did not accepted HTC', max_length=50, null=True, verbose_name='If the subject did not accept HTC, please explain')),
                ('referred', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='Required if subject accepted HTC', max_length=10, verbose_name='Was the subject referred')),
                ('referral_clinic', models.CharField(blank=True, help_text='Required if subject was referred', max_length=25, null=True, verbose_name='If referred, which clinic')),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Htc',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectHtcHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('transaction', django_extensions.db.fields.UUIDField(blank=True, db_index=True, editable=False)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Report date')),
                ('tracking_identifier', models.CharField(blank=True, help_text='Transcribe this tracking identifier onto the paper HTC Intake form.', max_length=50, null=True, verbose_name='HTC tracking identifier')),
                ('offered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Was the subject offered HTC')),
                ('accepted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Did the subject accept HTC')),
                ('refusal_reason', models.CharField(blank=True, help_text='Required if subject did not accepted HTC', max_length=50, null=True, verbose_name='If the subject did not accept HTC, please explain')),
                ('referred', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Required if subject accepted HTC', max_length=10, verbose_name='Was the subject referred')),
                ('referral_clinic', models.CharField(blank=True, help_text='Required if subject was referred', max_length=25, null=True, verbose_name='If referred, which clinic')),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Htc History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectMoved',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('moved_household', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, null=True, verbose_name='Has the participant moved out of the household where last seen')),
                ('moved_community', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, null=True, verbose_name='Has the participant moved out of the community')),
                ('new_community', models.CharField(blank=True, help_text="If moved out of the community, provide a new community name or 'UNKNOWN'", max_length=50, null=True, verbose_name='If the participant has moved, provide the name of the new community')),
                ('update_locator', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], help_text='If YES, please enter the changed information the locator form', max_length=7, null=True, verbose_name='Has the locator information changed')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, verbose_name='Comment')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Moved',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRefusal',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('refusal_date', models.DateField(help_text='Date format is YYYY-MM-DD', validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date subject refused participation')),
                ('reason', models.CharField(choices=[("I don't have time", "I don't have time"), ("I don't want to answer the questions", "I don't want to answer the questions"), ("I don't want to have the blood drawn", "I don't want to have the blood drawn"), ('I am afraid my information will not be private', 'I am afraid my information will not be private'), ('Fear of needles', 'Fear of needles'), ('Illiterate does not want a witness', 'Illiterate does not want a witness'), ('I already know I am HIV-positive', 'I already know I am HIV-positive'), ('I am afraid of testing', 'I am afraid of testing'), ("I don't want to take part", "I don't want to take part"), ("I haven't had a chance to think about it", "I haven't had a chance to think about it"), ('Have a newly born baby, not permitted', 'Have a newly born baby, not permitted'), ('I am not ready to test', 'I am not ready to test'), ('Already on HAART', 'Already on HAART'), ('I want to test where i always test', 'I want to test where i always test'), ("I already know my partner's status, no need to test", "I already know my partner's status, no need to test"), ('The appointment was not honoured', 'The appointment was not honoured'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='We respect your decision to decline. It would help us improve the study if you could tell us the main reason you do not want to participate in this study?')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('subject_refusal_status', models.CharField(default='REFUSED', editable=False, help_text="Change the refusal status from 'refused' to 'no longer refusing' if and when the subject changes their mind", max_length=100, verbose_name='Refusal status')),
                ('comment', models.CharField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment', max_length=250, null=True, verbose_name='Comment')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Refusal',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRefusalHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('transaction', models.UUIDField()),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Report date')),
                ('refusal_date', models.DateField(help_text='Date format is YYYY-MM-DD', verbose_name='Date subject refused participation')),
                ('reason', models.CharField(choices=[("I don't have time", "I don't have time"), ("I don't want to answer the questions", "I don't want to answer the questions"), ("I don't want to have the blood drawn", "I don't want to have the blood drawn"), ('I am afraid my information will not be private', 'I am afraid my information will not be private'), ('Fear of needles', 'Fear of needles'), ('Illiterate does not want a witness', 'Illiterate does not want a witness'), ('I already know I am HIV-positive', 'I already know I am HIV-positive'), ('I am afraid of testing', 'I am afraid of testing'), ("I don't want to take part", "I don't want to take part"), ("I haven't had a chance to think about it", "I haven't had a chance to think about it"), ('Have a newly born baby, not permitted', 'Have a newly born baby, not permitted'), ('I am not ready to test', 'I am not ready to test'), ('Already on HAART', 'Already on HAART'), ('I want to test where i always test', 'I want to test where i always test'), ("I already know my partner's status, no need to test", "I already know my partner's status, no need to test"), ('The appointment was not honoured', 'The appointment was not honoured'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='We respect your decision to decline. It would help us improve the study if you could tell us the main reason you do not want to participate in this study?')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Refusal History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectUndecided',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Undecided',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectUndecidedEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Report date')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('next_appt_datetime', models.DateTimeField(help_text='The date and time to meet with the subject', verbose_name='Follow-up appointment')),
                ('next_appt_datetime_source', models.CharField(choices=[('participant', 'Participant'), ('household member', 'household member'), ('hbc', 'HBC'), ('other', 'Other')], max_length=25, verbose_name='Appointment date suggested by?')),
                ('contact_details', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Information that can be used to contact someone, preferrably the subject, to confirm the appointment (Encryption: RSA local)', max_length=71, null=True)),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('subject_undecided_reason', models.CharField(choices=[('afraid_to_test', 'afraid_to_test'), ('not ready to test', 'not ready to test'), ('wishes to test with partner', 'wishes to test with partner'), ('OTHER', 'Other...')], max_length=100, verbose_name='Reason')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Undecided Entry',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HouseholdHeadEligibility',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('aged_over_18', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you verify that the respondent is aged 18 or older? ')),
                ('household_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=3, verbose_name='Does the respondent typically spend more nights on average in this household than in any other household in the same community?')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you administer the verbal script and ensure the respondent is willing to provide household information? ')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
            ],
        ),
        migrations.CreateModel(
            name='HouseholdInfo',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date/Time')),
                ('flooring_type', models.CharField(choices=[('Dirt/earth', 'Dirt/earth '), ('Wood, plank', 'Wood, plank'), ('Parquet/lino', 'Parquet/lino'), ('Cement', 'Cement'), ('Tile flooring', 'Tile flooring'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='What is the main type of flooring for this household?')),
                ('flooring_type_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('living_rooms', models.IntegerField(blank=True, help_text='Note: Record the number of rooms where people live/meet/sleep. If participant does not want to answer, leave blank', null=True, verbose_name='How many living rooms are there in this household unit (exclude garage, bathroom, kitchen, store-room, etc if not used as living room )? ')),
                ('water_source', models.CharField(choices=[('Communal tap', 'Communal tap'), ('Standpipe/tap within plot', 'Standpipe/tap within plot'), ('Piped indoors', 'Piped indoors'), ('Borehore', 'Borehole'), ('Protected well', 'Protected well'), ('Unprotected/shallow well', 'Unprotected/shallow well'), ('River /dam/lake/pan', 'River /dam/lake/pan'), ('Bowser/tanker', 'Bowser/tanker'), ('OTHER', 'Other, specify (including unknown):'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='What is the main source of drinking water for this household? ')),
                ('water_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('energy_source', models.CharField(choices=[('Charcoal/wood', 'Charcoal/wood'), ('Paraffin', 'Paraffin'), ('Gas', 'Gas'), ('Electricity (mains)', 'Electricity (mains)'), ('Electricity (solar)', 'Electricity (solar)'), ('No cooking done', 'No cooking done'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='What is the main source of energy used for cooking? ')),
                ('energy_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('toilet_facility', models.CharField(choices=[('Pit latrine within plot', 'Pit latrine within plot'), ('Flush toilet within plot', 'Flush toilet within plot'), ("Neighbour's flush toilet", "Neighbour's flush toilet"), ("Neighbour's pit latrine", 'Neighbours pit latrine'), ('Communal flush toilet', 'Communal flush toilet'), ('Communal pit latrine', 'Communal pit latrine'), ('Pail bucket latrine', 'Pail bucket latrine'), ('Bush', 'Bush'), ('River or other body of water', 'River or other body of water'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='What is the main toilet facility used in this household? ')),
                ('toilet_facility_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('goats_owned', models.IntegerField(blank=True, help_text='Note: May need to assist in adding up goats between household members or helping estimate. If resident does not want to answer, leave blank.', null=True, verbose_name='How many goats are owned by the members of this household? [If unsure of exact number, give your best guess] ')),
                ('sheep_owned', models.IntegerField(blank=True, help_text='Note: May need to assist in adding up sheep between household members or helping estimate. If resident does not want to answer, leave blank.', null=True, verbose_name='How many sheep are owned by the members of this household? [If unsure of exact number, give your best guess] ')),
                ('cattle_owned', models.IntegerField(blank=True, help_text='Note: May need to assist in adding up cows and bulls between household members or helping estimate. If resident does not want to answer, leave blank.', null=True, verbose_name='How many head of cattle (cows and bulls) are owned by the members of this household? [If unsure of exact number, give your best guess] ')),
                ('smaller_meals', models.CharField(choices=[('Never', 'Never'), ('Rarely', 'Rarely'), ('Sometimes', 'Sometimes'), ('Often', 'Often'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='In the past 4 weeks, did you or any household member have to eat a smaller meal than you felt you needed because there was not enough food? ')),
                ('electrical_appliances', models.ManyToManyField(blank=True, help_text='Note: Please read each response to the participant and check all that apply. If participant does not want to answer, leave blank.', to='bcpp_list.ElectricalAppliances', verbose_name='Does any member of this household have any of the following that are currently working? (check all that apply).')),
            ],
        ),
        migrations.CreateModel(
            name='HouseholdMember',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(db_index=True, help_text=' (Encryption: RSA local)', max_length=71, validators=[django.core.validators.RegexValidator('^[A-Z]{1,250}$', 'Ensure first name is only CAPS and does not contain any spaces or numbers')], verbose_name='First name')),
                ('initials', models.CharField(db_index=True, max_length=3, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(3), django.core.validators.RegexValidator('^[A-Z]{1,3}$', 'Must be Only CAPS and 2 or 3 letters. No spaces or numbers allowed.')], verbose_name='Initials')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], db_index=True, max_length=1, verbose_name='Gender')),
                ('age_in_years', models.IntegerField(db_index=True, help_text='If age is unknown, enter 0. If member is less than one year old, enter 1', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)], verbose_name='Age in years')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, verbose_name='Survival status')),
                ('present_today', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], db_index=True, max_length=3, verbose_name='Is the member present today?')),
                ('relation', models.CharField(choices=[('Head', 'HEAD of HOUSEHOLD'), ('aunt', 'Aunt'), ('brother', 'Brother'), ('brother-in-law', 'Brother in-law'), ('cousin', 'Cousin'), ('daughter', 'Daughter'), ('daughter-in-law', 'Daughter-in-law'), ('employee', 'Employee'), ('family_friend', 'Family friend'), ('father', 'Father'), ('father-in-law', 'Father-in-law'), ('friend', 'Friend'), ('granddaughter', 'Granddaughter'), ('grandfather', 'Grandfather'), ('grandmother', 'Grandmother'), ('grandson', 'Grandson'), ('great-Granddaughter', 'Great-Granddaughter'), ('great-Grandfather', 'Great-Grandfather'), ('great-Grandmother', 'Great-Grandmother'), ('great-Grandson', 'Great-Grandson'), ('helper', 'Helper'), ('housemaid', 'Housemaid'), ('housemate', 'Housemate'), ('husband', 'Husband'), ('mother', 'Mother'), ('mother-in-law', 'Mother-in-law'), ('nephew', 'Nephew'), ('niece', 'Niece'), ('partner', 'Partner'), ('sister', 'Sister'), ('sister-in-law', 'Sister-in-law'), ('son', 'Son'), ('son-in-law', 'Son-in-law'), ('uncle', 'Uncle'), ('wife', 'Wife'), ('UNKNOWN', 'UNKNOWN')], help_text='Relation to head of household', max_length=35, null=True, verbose_name='Relation to head of household')),
                ('inability_to_participate', models.CharField(choices=[('N/A', 'ABLE to participate'), ('Mental Incapacity', 'Mental Incapacity'), ('Deaf/Mute', 'Deaf/Mute'), ('Too sick', 'Too sick'), ('Incarcerated', 'Incarcerated'), ('OTHER', 'Other, specify.')], help_text='Participant can only participate if NONE is selected. (Any of these reasons make the participant unable to take part in the informed consent process)', max_length=17, verbose_name='Do any of the following reasons apply to the participant?')),
                ('inability_to_participate_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('study_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='If participant has moved into the community in the past 12 months, then since moving in has the participant typically spent 3 or more nights per month in this community.', max_length=17, verbose_name='In the past 12 months, have you typically spent 3 or more nights per month in this community? ')),
                ('internal_identifier', models.CharField(default=None, editable=False, help_text="Identifier to track member between surveys, is the id of the member's first appearance in the table.", max_length=36, null=True)),
                ('visit_attempts', models.IntegerField(default=0, editable=False)),
                ('member_status', models.CharField(choices=[('BHS_ELIGIBLE', 'BHS_ELIGIBLE'), ('ANNUAL', 'ANNUAL'), ('REFUSED_HTC', 'REFUSED_HTC'), ('NOT_ELIGIBLE', 'NOT_ELIGIBLE'), ('UNDECIDED', 'UNDECIDED'), ('HTC', 'HTC'), ('ABSENT', 'ABSENT'), ('REFUSED', 'REFUSED'), ('BHS', 'BHS'), ('BHS_LOSS', 'BHS_LOSS'), ('HTC_ELIGIBLE', 'HTC_ELIGIBLE'), ('DECEASED', 'DECEASED'), ('NOT_REPORTED', 'NOT_REPORTED'), ('BHS_SCREEN', 'BHS_SCREEN')], db_index=True, editable=False, help_text='RESEARCH, ABSENT, REFUSED, UNDECIDED', max_length=25, null=True)),
                ('hiv_history', models.CharField(editable=False, max_length=25, null=True)),
                ('eligible_member', models.NullBooleanField(default=False, editable=False, help_text='eligible to be screened. based on data on this form')),
                ('eligible_subject', models.NullBooleanField(default=False, editable=False, help_text='updated by the enrollment checklist save method only. True if subject passes the eligibility criteria.')),
                ('enrollment_checklist_completed', models.NullBooleanField(default=False, editable=False, help_text='updated by enrollment checklist only (regardless of the eligibility outcome).')),
                ('enrollment_loss_completed', models.NullBooleanField(default=False, editable=False, help_text='updated by enrollment loss save method only.')),
                ('refused', models.BooleanField(default=False, editable=False, help_text='updated by subject refusal save method only')),
                ('undecided', models.BooleanField(default=False, editable=False, help_text='updated by subject undecided save method only')),
                ('refused_htc', models.BooleanField(default=False, editable=False, help_text='updated by subject HTC save method only')),
                ('htc', models.BooleanField(default=False, editable=False, help_text='updated by the subject HTC save method only')),
                ('is_consented', models.BooleanField(default=False, editable=False, help_text='updated by the subject consent save method only')),
                ('eligible_htc', models.NullBooleanField(default=False, editable=False)),
                ('eligible_hoh', models.NullBooleanField(default=False, editable=False, help_text='updated by the head of household enrollment checklist only.')),
                ('reported', models.BooleanField(default=False, editable=False, help_text='update by any of subject absentee, undecided, refusal')),
                ('absent', models.BooleanField(default=False, editable=False, help_text='Updated by the subject absentee log')),
                ('target', models.IntegerField(default=0, editable=False)),
                ('auto_filled', models.BooleanField(default=False, editable=False, help_text='Was autofilled for follow-up surveys using information from previous survey. See EnumerationHelper')),
                ('updated_after_auto_filled', models.BooleanField(default=True, editable=False, help_text='if True, a user updated the values or this was not autofilled')),
                ('additional_key', models.CharField(default=None, editable=False, help_text='A uuid to be added to bypass the unique constraint for firstname, initials, household_structure. Should remain as the default value for normal enumeration. Is needed for Members added to the data from the clinic section where household_structure is always the same value.', max_length=36, null=True, verbose_name='-')),
                ('personal_details_changed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='-', help_text='personal details (name/surname)', max_length=10, null=True, verbose_name='Have your personal details (name/surname) changed since the last time we visited you?')),
                ('details_change_reason', models.CharField(blank=True, choices=[('married', 'Married'), ('parent_married', 'Parent Married')], default='-', help_text='if personal detail changed choice a reason above.', max_length=30, null=True, verbose_name='If YES, please specify the reason')),
                ('household_structure', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure')),
                ('registered_subject', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='bcpp.RegisteredSubject')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='MemberAppointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('appt_date', models.DateField(verbose_name='Appointment date')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], default='new', max_length=25, verbose_name='Status')),
                ('label', models.CharField(help_text='label to group, e.g. T1 prep', max_length=25)),
                ('time_of_week', models.CharField(blank=True, choices=[('weekdays', 'Weekdays'), ('weekend', 'Weekends')], max_length=25, null=True, verbose_name='Time of week when participant will be available')),
                ('time_of_day', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening')], max_length=25, null=True, verbose_name='Time of day when participant will be available')),
                ('is_confirmed', models.BooleanField(default=False)),
                ('household_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectAbsentee',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('household_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Absentee',
                'verbose_name_plural': 'Subject Absentee',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='SubjectAbsenteeEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Report date')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('next_appt_datetime', models.DateTimeField(help_text='The date and time to meet with the subject', verbose_name='Follow-up appointment')),
                ('next_appt_datetime_source', models.CharField(choices=[('participant', 'Participant'), ('household member', 'household member'), ('hbc', 'HBC'), ('other', 'Other')], max_length=25, verbose_name='Appointment date suggested by?')),
                ('contact_details', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Information that can be used to contact someone, preferrably the subject, to confirm the appointment (Encryption: RSA local)', max_length=71, null=True)),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('reason', models.CharField(choices=[('gone visiting (relatives,holidays,weddings,funerals)', 'Gone visiting'), ('stays at lands or cattlepost ', 'Stays at Lands/Cattlepost '), ('stepped out(shops, errands etc) ', 'Stepped out (shops, errands, ) '), ('works in village and comes home daily', 'Works in the village, home daily'), ('goes to school in village and comes home daily', 'Schools in this village, home daily'), ('works outside village and comes home daily', 'Works outside the village, home daily'), ('goes to school outside village and comes home daily', 'Schools outside village, home daily'), ('works outside village and comes home irregularly ', 'Works outside the village, home irregularly '), ('goes to school outside village and comes home irregularly ', 'Schools outside village, home irregularly '), ('works outside village and comes home monthly ', 'Works outside the village, home monthly '), ('goes to school outside village and comes home monthly ', 'Schools outside village, home monthly '), ('works outside village and comes home on weekends ', 'Works outside the village, home on weekends '), ('goes to school outside village and comes home on weekends ', 'Schools outside village, home on weekends '), ('OTHER', 'Other...')], max_length=100, verbose_name='Reason?')),
                ('subject_absentee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.SubjectAbsentee')),
            ],
            options={
                'verbose_name': 'Subject Absentee Entry',
                'verbose_name_plural': 'Subject Absentee Entries',
            },
        ),
        migrations.CreateModel(
            name='SubjectDeath',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('death_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of Death:')),
                ('site_aware_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date site aware of Death:')),
                ('death_cause_info_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('death_cause', models.TextField(blank=True, help_text='Note: Cardiac and pulmonary arrest are not major reasons and should not be used to describe major cause)', max_length=1000, null=True, verbose_name='Describe the major cause of death(including pertinent autopsy information if available),starting with the first noticeable illness thought to be related to death,continuing to time of death. ')),
                ('death_cause_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('duration_of_illness', models.IntegerField(default=0, help_text='in days', verbose_name='Duration of acute illness directly causing death (in days, or choose Unknown)?')),
                ('relationship_death_study', models.CharField(choices=[('Definitely not related', 'Definitely not related'), ('Probably not related', 'Probably not related'), ('Possible related', 'Possible related'), ('Probably related', 'Probably related'), ('Definitely related', 'Definitely related')], max_length=50, verbose_name='What is the relationship of the death to study participation?')),
                ('household_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Death',
                'verbose_name_plural': 'Subject Death',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='SubjectHtc',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('tracking_identifier', models.CharField(blank=True, help_text='Transcribe this tracking identifier onto the paper HTC Intake form.', max_length=50, null=True, verbose_name='HTC tracking identifier')),
                ('offered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Was the subject offered HTC')),
                ('accepted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Did the subject accept HTC')),
                ('refusal_reason', models.CharField(blank=True, help_text='Required if subject did not accepted HTC', max_length=50, null=True, verbose_name='If the subject did not accept HTC, please explain')),
                ('referred', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='Required if subject accepted HTC', max_length=10, verbose_name='Was the subject referred')),
                ('referral_clinic', models.CharField(blank=True, help_text='Required if subject was referred', max_length=25, null=True, verbose_name='If referred, which clinic')),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
                ('household_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Htc',
                'verbose_name_plural': 'Subject Htc',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='SubjectHtcHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('transaction', django_extensions.db.fields.UUIDField(blank=True, editable=False, unique=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Report date')),
                ('tracking_identifier', models.CharField(blank=True, help_text='Transcribe this tracking identifier onto the paper HTC Intake form.', max_length=50, null=True, verbose_name='HTC tracking identifier')),
                ('offered', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Was the subject offered HTC')),
                ('accepted', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Did the subject accept HTC')),
                ('refusal_reason', models.CharField(blank=True, help_text='Required if subject did not accepted HTC', max_length=50, null=True, verbose_name='If the subject did not accept HTC, please explain')),
                ('referred', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Required if subject accepted HTC', max_length=10, verbose_name='Was the subject referred')),
                ('referral_clinic', models.CharField(blank=True, help_text='Required if subject was referred', max_length=25, null=True, verbose_name='If referred, which clinic')),
                ('comment', models.TextField(blank=True, max_length=250, null=True)),
                ('household_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Htc History',
            },
        ),
        migrations.CreateModel(
            name='SubjectMoved',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('moved_household', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, null=True, verbose_name='Has the participant moved out of the household where last seen')),
                ('moved_community', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], max_length=7, null=True, verbose_name='Has the participant moved out of the community')),
                ('new_community', models.CharField(blank=True, help_text="If moved out of the community, provide a new community name or 'UNKNOWN'", max_length=50, null=True, verbose_name='If the participant has moved, provide the name of the new community')),
                ('update_locator', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('unknown', 'Unknown')], help_text='If YES, please enter the changed information the locator form', max_length=7, null=True, verbose_name='Has the locator information changed')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, verbose_name='Comment')),
                ('household_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Moved',
                'verbose_name_plural': 'Subject Moved',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='SubjectRefusal',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('refusal_date', models.DateField(help_text='Date format is YYYY-MM-DD', validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date subject refused participation')),
                ('reason', models.CharField(choices=[("I don't have time", "I don't have time"), ("I don't want to answer the questions", "I don't want to answer the questions"), ("I don't want to have the blood drawn", "I don't want to have the blood drawn"), ('I am afraid my information will not be private', 'I am afraid my information will not be private'), ('Fear of needles', 'Fear of needles'), ('Illiterate does not want a witness', 'Illiterate does not want a witness'), ('I already know I am HIV-positive', 'I already know I am HIV-positive'), ('I am afraid of testing', 'I am afraid of testing'), ("I don't want to take part", "I don't want to take part"), ("I haven't had a chance to think about it", "I haven't had a chance to think about it"), ('Have a newly born baby, not permitted', 'Have a newly born baby, not permitted'), ('I am not ready to test', 'I am not ready to test'), ('Already on HAART', 'Already on HAART'), ('I want to test where i always test', 'I want to test where i always test'), ("I already know my partner's status, no need to test", "I already know my partner's status, no need to test"), ('The appointment was not honoured', 'The appointment was not honoured'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='We respect your decision to decline. It would help us improve the study if you could tell us the main reason you do not want to participate in this study?')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('subject_refusal_status', models.CharField(default='REFUSED', editable=False, help_text="Change the refusal status from 'refused' to 'no longer refusing' if and when the subject changes their mind", max_length=100, verbose_name='Refusal status')),
                ('comment', models.CharField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment', max_length=250, null=True, verbose_name='Comment')),
                ('household_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Refusal',
                'verbose_name_plural': 'Subject Refusal',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='SubjectRefusalHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('transaction', models.UUIDField()),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Report date')),
                ('refusal_date', models.DateField(help_text='Date format is YYYY-MM-DD', verbose_name='Date subject refused participation')),
                ('reason', models.CharField(choices=[("I don't have time", "I don't have time"), ("I don't want to answer the questions", "I don't want to answer the questions"), ("I don't want to have the blood drawn", "I don't want to have the blood drawn"), ('I am afraid my information will not be private', 'I am afraid my information will not be private'), ('Fear of needles', 'Fear of needles'), ('Illiterate does not want a witness', 'Illiterate does not want a witness'), ('I already know I am HIV-positive', 'I already know I am HIV-positive'), ('I am afraid of testing', 'I am afraid of testing'), ("I don't want to take part", "I don't want to take part"), ("I haven't had a chance to think about it", "I haven't had a chance to think about it"), ('Have a newly born baby, not permitted', 'Have a newly born baby, not permitted'), ('I am not ready to test', 'I am not ready to test'), ('Already on HAART', 'Already on HAART'), ('I want to test where i always test', 'I want to test where i always test'), ("I already know my partner's status, no need to test", "I already know my partner's status, no need to test"), ('The appointment was not honoured', 'The appointment was not honoured'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='We respect your decision to decline. It would help us improve the study if you could tell us the main reason you do not want to participate in this study?')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('household_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Refusal History',
            },
        ),
        migrations.CreateModel(
            name='SubjectUndecided',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report date')),
                ('household_member', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            options={
                'verbose_name': 'Subject Undecided',
                'verbose_name_plural': 'Subject Undecided',
                'abstract': False,
                'ordering': ['household_member'],
            },
        ),
        migrations.CreateModel(
            name='SubjectUndecidedEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Report date')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('next_appt_datetime', models.DateTimeField(help_text='The date and time to meet with the subject', verbose_name='Follow-up appointment')),
                ('next_appt_datetime_source', models.CharField(choices=[('participant', 'Participant'), ('household member', 'household member'), ('hbc', 'HBC'), ('other', 'Other')], max_length=25, verbose_name='Appointment date suggested by?')),
                ('contact_details', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='Information that can be used to contact someone, preferrably the subject, to confirm the appointment (Encryption: RSA local)', max_length=71, null=True)),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('subject_undecided_reason', models.CharField(choices=[('afraid_to_test', 'afraid_to_test'), ('not ready to test', 'not ready to test'), ('wishes to test with partner', 'wishes to test with partner'), ('OTHER', 'Other...')], max_length=100, verbose_name='Reason')),
                ('subject_undecided', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.SubjectUndecided')),
            ],
            options={
                'verbose_name': 'Subject Undecided Entry',
                'verbose_name_plural': 'Subject Undecided Entries',
            },
        ),
        migrations.AddField(
            model_name='householdinfo',
            name='household_member',
            field=models.OneToOneField(help_text='Important: The household member must verbally consent before completing this questionnaire.', on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='householdinfo',
            name='household_structure',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdinfo',
            name='registered_subject',
            field=models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp.RegisteredSubject'),
        ),
        migrations.AddField(
            model_name='householdinfo',
            name='survey',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='householdinfo',
            name='transport_mode',
            field=models.ManyToManyField(blank=True, help_text='Note: Please read each response to the participant and check all that apply. If participant does not want to answer, leave blank.', to='bcpp_list.TransportMode', verbose_name='Does any member of this household (excluding visitors) own any of the following forms of transport in working condition? (check all that apply).'),
        ),
        migrations.AddField(
            model_name='householdheadeligibility',
            name='household_member',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='householdheadeligibility',
            name='household_structure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdheadeligibility',
            name='survey',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjectundecidedentry',
            name='subject_undecided',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.SubjectUndecided'),
        ),
        migrations.AddField(
            model_name='historicalsubjectundecided',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjectundecided',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjectrefusalhistory',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjectrefusalhistory',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjectrefusal',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjectrefusal',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjectmoved',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjectmoved',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjecthtchistory',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjecthtchistory',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjecthtc',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjecthtc',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjectdeath',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjectdeath',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalsubjectabsenteeentry',
            name='subject_absentee',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.SubjectAbsentee'),
        ),
        migrations.AddField(
            model_name='historicalsubjectabsentee',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalsubjectabsentee',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalmemberappointment',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalmemberappointment',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdinfo',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdinfo',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdinfo',
            name='registered_subject',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp.RegisteredSubject'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdinfo',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdheadeligibility',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdheadeligibility',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdheadeligibility',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalenrollmentloss',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalenrollmentloss',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalenrollmentchecklist',
            name='household_member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='historicalenrollmentchecklist',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='enrollmentloss',
            name='household_member',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='enrollmentloss',
            name='survey',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='enrollmentchecklist',
            name='household_member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember'),
        ),
        migrations.AddField(
            model_name='enrollmentchecklist',
            name='survey',
            field=models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectundecidedentry',
            unique_together=set([('subject_undecided', 'report_datetime')]),
        ),
        migrations.AlterUniqueTogether(
            name='subjectabsenteeentry',
            unique_together=set([('subject_absentee', 'report_datetime')]),
        ),
        migrations.AlterUniqueTogether(
            name='memberappointment',
            unique_together=set([('household_member', 'label')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdmember',
            unique_together=set([('registered_subject', 'household_structure'), ('household_structure', 'first_name', 'initials', 'additional_key')]),
        ),
        migrations.AlterIndexTogether(
            name='householdmember',
            index_together=set([('id', 'registered_subject', 'created')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdheadeligibility',
            unique_together=set([('household_structure', 'aged_over_18', 'verbal_script')]),
        ),
        migrations.AlterUniqueTogether(
            name='enrollmentchecklist',
            unique_together=set([('household_member', 'report_datetime')]),
        ),
    ]
