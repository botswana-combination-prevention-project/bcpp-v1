# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-10 02:08
from __future__ import unicode_literals

import bcpp_household.models.plot
import bcpp_survey.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.model.fields.hostname_modification_field
import edc_base.model.fields.userfield
import edc_base.model.fields.uuid_auto_field
import edc_base.model.validators.date
import edc_base.model.validators.eligibility
import edc_sync.model_mixins


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bcpp_survey', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='GpsDevice',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, help_text='(suggest 40 characters max.)', max_length=250, null=True, unique=True, verbose_name='Name')),
                ('short_name', models.CharField(db_index=True, help_text='This is the stored value, required', max_length=250, null=True, unique=True, verbose_name='Stored value')),
                ('display_index', models.IntegerField(db_index=True, default=0, help_text='Index to control display order if not alphabetical, not required', verbose_name='display index')),
                ('field_name', models.CharField(blank=True, editable=False, help_text='Not required', max_length=25, null=True)),
                ('version', models.CharField(default='1.0', editable=False, max_length=35)),
                ('gps_make', models.CharField(max_length=25, verbose_name='Make')),
                ('gps_model', models.CharField(max_length=25, verbose_name='Model')),
                ('gps_serial_number', models.CharField(max_length=25, verbose_name='Serial Number')),
                ('gps_purchase_date', models.DateField(verbose_name='Purchase Date')),
                ('gps_purchase_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Purchase Price')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalHousehold',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('household_identifier', models.CharField(db_index=True, editable=False, help_text='Household identifier', max_length=25, null=True, verbose_name='Household Identifier')),
                ('household_sequence', models.IntegerField(editable=False, help_text='is 1 for first household in plot, 2 for second, 3, etc. Embedded in household identifier.', null=True)),
                ('hh_int', models.IntegerField(editable=False, help_text='not used', null=True)),
                ('hh_seed', models.IntegerField(editable=False, help_text='not used', null=True)),
                ('report_datetime', models.DateTimeField(null=True, verbose_name='Report Date/Time')),
                ('gps_degrees_s', models.DecimalField(decimal_places=0, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Degrees-South')),
                ('gps_minutes_s', models.DecimalField(decimal_places=4, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Minutes-South')),
                ('gps_degrees_e', models.DecimalField(decimal_places=0, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Degrees-East')),
                ('gps_minutes_e', models.DecimalField(decimal_places=4, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Minutes-East')),
                ('gps_lon', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='longitude')),
                ('gps_lat', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='latitude')),
                ('gps_target_lon', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='target waypoint longitude')),
                ('gps_target_lat', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='target waypoint latitude')),
                ('target_radius', models.FloatField(default=0.025, editable=False, help_text='km')),
                ('community', models.CharField(editable=False, help_text='If the community is incorrect, please contact the DMC immediately.', max_length=25, null=True)),
                ('replaced_by', models.CharField(editable=False, help_text='The identifier of the plot that this household is replaced by', max_length=25, null=True)),
                ('replaceable', models.NullBooleanField(default=None, editable=False, help_text='Updated by replacement helper', verbose_name='Replaceable?')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('uploaded_map', models.CharField(blank=True, max_length=25, null=True, verbose_name='filename of uploaded map')),
                ('action', models.CharField(default='unconfirmed', editable=False, max_length=25, null=True)),
                ('enrolled', models.BooleanField(default=False, editable=False, help_text='Set to true if one member is consented. Updated by Household_structure post_save.')),
                ('enrolled_datetime', models.DateTimeField(editable=False, help_text='datetime that household is enrolled. Updated by Household_structure post_save.', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdAssessment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('potential_eligibles', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not Know')], max_length=25, null=True, verbose_name='Research Assistant: From speaking with the respondent, is at least onemember of this plot potentially eligible?')),
                ('eligibles_last_seen_home', models.CharField(blank=True, choices=[('seasonally_nearly_present', 'spent at least 4 weeks in household over the course of the past year'), ('rarely_or_never_occupied', 'pent less than 4 weeks in the household  over the course of thepast year, or never occupied over the course of the past year'), ('unknown', "Don't know")], max_length=25, null=True, verbose_name='When was a resident last seen in this household?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Household Residency Status Assess',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdLog',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household log',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdLogEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Report date')),
                ('household_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), ('no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('next_appt_datetime', models.DateTimeField(blank=True, help_text='The date and time to revisit household', null=True, verbose_name='Re-Visit On')),
                ('next_appt_datetime_source', models.CharField(blank=True, choices=[('neighbour', 'Neighbour'), ('household member', 'Household Member'), ('hbc', 'Field RA'), ('other', 'Other')], help_text='source of information for the appointment date', max_length=25, null=True, verbose_name='Source')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household log entry',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdRefusal',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField()),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), ('DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household refusal',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdRefusalHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField()),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), ('DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('transaction', django_extensions.db.fields.UUIDField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household refusal history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdStructure',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('progress', models.CharField(default='Not Started', editable=False, max_length=25, null=True, verbose_name='Progress')),
                ('note', models.CharField(blank=True, max_length=250, verbose_name='Note')),
                ('enrolled', models.NullBooleanField(default=None, editable=False, help_text='enrolled by the subject consent of a household_member')),
                ('enrolled_household_member', models.CharField(editable=False, help_text='pk of consenting household_member that triggered the enroll', max_length=36, null=True)),
                ('enrolled_datetime', models.DateTimeField(editable=False, help_text='datetime household_structure enrolled', null=True)),
                ('enumerated', models.BooleanField(default=False, editable=False, help_text='Set to True when first household_member is enumerated')),
                ('enumeration_attempts', models.IntegerField(default=0, editable=False, help_text='Updated by a signal on HouseholdLogEntry. Number of attempts to enumerate a household_structure.')),
                ('refused_enumeration', models.BooleanField(default=False, editable=False, help_text='Updated by household enumeration refusal save method only')),
                ('failed_enumeration_attempts', models.IntegerField(default=0, editable=False, help_text='Updated by a signal on HouseholdLogEntry. Number of failed attempts toenumerate a household_structure.')),
                ('failed_enumeration', models.BooleanField(default=False, editable=False, help_text='Updated by household assessment save method only')),
                ('no_informant', models.BooleanField(default=False, editable=False, help_text='Updated by household assessment save method only')),
                ('eligible_members', models.BooleanField(default=False, editable=False, help_text='Updated by household member save method and post_delete')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household structure',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalHouseholdWorkList',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('label', models.CharField(help_text='label to group, e.g. T1 prep', max_length=25)),
                ('visit_date', models.DateField(editable=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('missed_scheduled', 'Scheduled!!'), ('unscheduled', 'Unscheduled'), ('incomplete', 'Incomplete'), ('done', 'Done')], editable=False, max_length=25)),
                ('appt_count', models.IntegerField(default=0, editable=False, help_text='Number of currently scheduled appointments, including missed.')),
                ('enrolled_type', models.CharField(choices=[('hic', 'HIC/BHS'), ('bhs', 'BHS Only')], editable=False, max_length=3)),
                ('note', models.CharField(blank=True, max_length=250, verbose_name='Note')),
                ('log_date', models.DateField(editable=False, help_text='From household_log entries', null=True)),
                ('log_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), ('no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('log_attempts', models.IntegerField(default=0)),
                ('members', models.IntegerField(default=0)),
                ('bhs', models.IntegerField(default=0)),
                ('hic', models.IntegerField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical household work list',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalIncreasePlotRadius',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('radius', models.FloatField(default=25.0, help_text='meters')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical increase plot radius',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPlot',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('plot_identifier', models.CharField(db_index=True, editable=False, help_text='Plot identifier', max_length=25, verbose_name='Plot Identifier')),
                ('eligible_members', models.IntegerField(blank=True, help_text='Provide an approximation of the number of people who live in this residence who are age eligible.', null=True, verbose_name='Approximate number of age eligible members')),
                ('description', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Description of plot/residence')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('cso_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='provide the CSO number or leave BLANK. (Encryption: RSA local)', max_length=71, null=True, verbose_name='CSO Number')),
                ('household_count', models.IntegerField(default=0, help_text='Provide the number of households in this plot.', null=True, validators=[django.core.validators.MaxValueValidator(9)], verbose_name='Number of Households on this plot.')),
                ('time_of_week', models.CharField(blank=True, choices=[('weekdays', 'Weekdays'), ('weekend', 'Weekends')], max_length=25, null=True, verbose_name='Time of week when most of the eligible members will be available')),
                ('time_of_day', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening')], max_length=25, null=True, verbose_name='Time of day when most of the eligible members will be available')),
                ('gps_degrees_s', models.DecimalField(decimal_places=0, max_digits=10, null=True, verbose_name='GPS Degrees-South')),
                ('gps_minutes_s', models.DecimalField(decimal_places=4, max_digits=10, null=True, verbose_name='GPS Minutes-South')),
                ('gps_degrees_e', models.DecimalField(decimal_places=0, max_digits=10, null=True, verbose_name='GPS Degrees-East')),
                ('gps_minutes_e', models.DecimalField(decimal_places=4, max_digits=10, null=True, verbose_name='GPS Minutes-East')),
                ('gps_lon', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='longitude')),
                ('gps_lat', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='latitude')),
                ('gps_target_lon', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='target waypoint longitude')),
                ('gps_target_lat', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='target waypoint latitude')),
                ('status', models.CharField(choices=[('non_residential', 'non-residential'), ('residential_not_habitable', 'residential, not-habitable'), ('residential_habitable', 'residential, habitable'), ('inaccessible', 'Inaccessible')], max_length=35, null=True, verbose_name='Plot status')),
                ('target_radius', models.FloatField(default=0.025, editable=False, help_text='km')),
                ('distance_from_target', models.FloatField(help_text='distance in meters', null=True)),
                ('selected', models.CharField(choices=[('1', 'twenty_percent'), ('2', 'five_percent')], editable=False, max_length=25, null=True, verbose_name='selected')),
                ('device_id', models.CharField(editable=False, max_length=2, null=True)),
                ('action', models.CharField(default='unconfirmed', editable=False, max_length=25, null=True)),
                ('access_attempts', models.IntegerField(default=0, editable=False, help_text="Number of attempts to access a plot to determine it's status.")),
                ('uploaded_map_16', models.CharField(blank=True, editable=False, max_length=25, null=True, verbose_name='Map image at zoom level 16')),
                ('uploaded_map_17', models.CharField(blank=True, editable=False, max_length=25, null=True, verbose_name='Map image at zoom level 17')),
                ('uploaded_map_18', models.CharField(blank=True, editable=False, max_length=25, null=True, verbose_name='Map image at zoom level 18')),
                ('community', models.CharField(editable=False, help_text='If the community is incorrect, please contact the DMC immediately.', max_length=25, validators=[bcpp_household.models.plot.is_valid_community])),
                ('section', models.CharField(editable=False, max_length=25, null=True, verbose_name='Section')),
                ('sub_section', models.CharField(editable=False, max_length=25, null=True, verbose_name='Sub-section')),
                ('bhs', models.NullBooleanField(default=None, editable=False, help_text='True indicates that plot is enrolled into BHS. Updated by bcpp_subject.subject_consent post_save')),
                ('enrolled_datetime', models.DateTimeField(editable=False, help_text='datetime that plot is enrolled into BHS. Updated by bcpp_subject.subject_consent post_save', null=True)),
                ('htc', models.NullBooleanField(default=False, editable=False)),
                ('replaces', models.CharField(blank=True, editable=False, help_text='plot or household identifier that this plot replaces.', max_length=25, null=True)),
                ('replaced_by', models.CharField(blank=True, editable=False, help_text='The identifier of the plot that this plot was replaced by', max_length=25, null=True)),
                ('replaceable', models.NullBooleanField(default=None, editable=False, help_text='Updated by replacement helper', verbose_name='Replaceable?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical plot',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPlotLog',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical plot log',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalPlotLogEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future, bcpp_survey.validators.date_in_survey], verbose_name='Report date')),
                ('log_status', models.CharField(choices=[('accessible', 'Accessible'), ('inaccessible', 'Inaccessible')], max_length=25, verbose_name='What is the status of this plot?')),
                ('reason', models.CharField(blank=True, choices=[('impassable_road', 'Road is impassable'), ('dogs', 'Dogs prevent access'), ('locked_gate', 'Gate is locked'), ('OTHER', 'Other')], max_length=25, null=True, verbose_name='If inaccessible, please indicate the reason.')),
                ('reason_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical plot log entry',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalRepresentativeEligibility',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('aged_over_18', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you verify that the respondent is aged 18 or older? ')),
                ('household_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=3, verbose_name='Does the respondent typically spend more nights on average in this household than in any other household in the same community?')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you administer the verbal script and ensure the respondent is willing to provide household information? ')),
                ('report_datetime', models.DateTimeField()),
                ('auto_filled', models.BooleanField(default=False, editable=False, help_text='This form is autofilled for non-BHS surveys using information from amember consented in a previous survey. See HouseholdMemberHelper')),
                ('auto_fill_member_id', models.CharField(editable=False, help_text='pk of household member used to autofill', max_length=50, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical representative eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='Household',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('household_identifier', models.CharField(editable=False, help_text='Household identifier', max_length=25, null=True, unique=True, verbose_name='Household Identifier')),
                ('household_sequence', models.IntegerField(editable=False, help_text='is 1 for first household in plot, 2 for second, 3, etc. Embedded in household identifier.', null=True)),
                ('hh_int', models.IntegerField(editable=False, help_text='not used', null=True)),
                ('hh_seed', models.IntegerField(editable=False, help_text='not used', null=True)),
                ('report_datetime', models.DateTimeField(null=True, verbose_name='Report Date/Time')),
                ('gps_degrees_s', models.DecimalField(decimal_places=0, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Degrees-South')),
                ('gps_minutes_s', models.DecimalField(decimal_places=4, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Minutes-South')),
                ('gps_degrees_e', models.DecimalField(decimal_places=0, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Degrees-East')),
                ('gps_minutes_e', models.DecimalField(decimal_places=4, editable=False, help_text='comes from plot', max_digits=10, null=True, verbose_name='GPS Minutes-East')),
                ('gps_lon', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='longitude')),
                ('gps_lat', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='latitude')),
                ('gps_target_lon', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='target waypoint longitude')),
                ('gps_target_lat', models.FloatField(editable=False, help_text='comes from plot', null=True, verbose_name='target waypoint latitude')),
                ('target_radius', models.FloatField(default=0.025, editable=False, help_text='km')),
                ('community', models.CharField(editable=False, help_text='If the community is incorrect, please contact the DMC immediately.', max_length=25, null=True)),
                ('replaced_by', models.CharField(editable=False, help_text='The identifier of the plot that this household is replaced by', max_length=25, null=True)),
                ('replaceable', models.NullBooleanField(default=None, editable=False, help_text='Updated by replacement helper', verbose_name='Replaceable?')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('uploaded_map', models.CharField(blank=True, max_length=25, null=True, verbose_name='filename of uploaded map')),
                ('action', models.CharField(default='unconfirmed', editable=False, max_length=25, null=True)),
                ('enrolled', models.BooleanField(default=False, editable=False, help_text='Set to true if one member is consented. Updated by Household_structure post_save.')),
                ('enrolled_datetime', models.DateTimeField(editable=False, help_text='datetime that household is enrolled. Updated by Household_structure post_save.', null=True)),
            ],
            options={
                'ordering': ['-household_identifier'],
            },
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdAssessment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('potential_eligibles', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Dont_know', 'Do not Know')], max_length=25, null=True, verbose_name='Research Assistant: From speaking with the respondent, is at least onemember of this plot potentially eligible?')),
                ('eligibles_last_seen_home', models.CharField(blank=True, choices=[('seasonally_nearly_present', 'spent at least 4 weeks in household over the course of the past year'), ('rarely_or_never_occupied', 'pent less than 4 weeks in the household  over the course of thepast year, or never occupied over the course of the past year'), ('unknown', "Don't know")], max_length=25, null=True, verbose_name='When was a resident last seen in this household?')),
            ],
            options={
                'verbose_name': 'Household Residency Status Assess',
                'verbose_name_plural': 'Household Residency Status Assess',
            },
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdIdentifierHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('identifier', models.CharField(editable=False, max_length=36, unique=True)),
                ('padding', models.IntegerField(default=4, editable=False)),
                ('sequence_number', models.IntegerField()),
                ('device_id', models.IntegerField(default=0)),
                ('is_derived', models.BooleanField(default=False)),
                ('sequence_app_label', models.CharField(default='identifier', editable=False, max_length=50)),
                ('sequence_model_name', models.CharField(default='sequence', editable=False, max_length=50)),
                ('plot_identifier', models.CharField(max_length=25)),
                ('household_sequence', models.IntegerField()),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdLog',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdLogEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Report date')),
                ('household_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), ('no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('next_appt_datetime', models.DateTimeField(blank=True, help_text='The date and time to revisit household', null=True, verbose_name='Re-Visit On')),
                ('next_appt_datetime_source', models.CharField(blank=True, choices=[('neighbour', 'Neighbour'), ('household member', 'Household Member'), ('hbc', 'Field RA'), ('other', 'Other')], help_text='source of information for the appointment date', max_length=25, null=True, verbose_name='Source')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True)),
                ('household_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdLog')),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdRefusal',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField()),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), ('DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
            ],
            options={
                'ordering': ['household_structure'],
            },
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdRefusalHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField()),
                ('reason', models.CharField(choices=[('not_interested', 'Not Interested'), ('does_not_have_time', 'Does not have time'), ('DWTA', "Don't want to answer"), ('OTHER', 'Other')], max_length=25, verbose_name='Please indicate the reason the household cannot be enumerated')),
                ('reason_other', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='You may provide a comment here or leave BLANK. (Encryption: AES local)', max_length=250, null=True)),
                ('transaction', django_extensions.db.fields.UUIDField(blank=True, editable=False)),
            ],
            options={
                'ordering': ['household_structure'],
            },
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdStructure',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('progress', models.CharField(default='Not Started', editable=False, max_length=25, null=True, verbose_name='Progress')),
                ('note', models.CharField(blank=True, max_length=250, verbose_name='Note')),
                ('enrolled', models.NullBooleanField(default=None, editable=False, help_text='enrolled by the subject consent of a household_member')),
                ('enrolled_household_member', models.CharField(editable=False, help_text='pk of consenting household_member that triggered the enroll', max_length=36, null=True)),
                ('enrolled_datetime', models.DateTimeField(editable=False, help_text='datetime household_structure enrolled', null=True)),
                ('enumerated', models.BooleanField(default=False, editable=False, help_text='Set to True when first household_member is enumerated')),
                ('enumeration_attempts', models.IntegerField(default=0, editable=False, help_text='Updated by a signal on HouseholdLogEntry. Number of attempts to enumerate a household_structure.')),
                ('refused_enumeration', models.BooleanField(default=False, editable=False, help_text='Updated by household enumeration refusal save method only')),
                ('failed_enumeration_attempts', models.IntegerField(default=0, editable=False, help_text='Updated by a signal on HouseholdLogEntry. Number of failed attempts toenumerate a household_structure.')),
                ('failed_enumeration', models.BooleanField(default=False, editable=False, help_text='Updated by household assessment save method only')),
                ('no_informant', models.BooleanField(default=False, editable=False, help_text='Updated by household assessment save method only')),
                ('eligible_members', models.BooleanField(default=False, editable=False, help_text='Updated by household member save method and post_delete')),
                ('household', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.Household')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HouseholdWorkList',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('label', models.CharField(help_text='label to group, e.g. T1 prep', max_length=25)),
                ('visit_date', models.DateField(editable=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('missed_scheduled', 'Scheduled!!'), ('unscheduled', 'Unscheduled'), ('incomplete', 'Incomplete'), ('done', 'Done')], editable=False, max_length=25)),
                ('appt_count', models.IntegerField(default=0, editable=False, help_text='Number of currently scheduled appointments, including missed.')),
                ('enrolled_type', models.CharField(choices=[('hic', 'HIC/BHS'), ('bhs', 'BHS Only')], editable=False, max_length=3)),
                ('note', models.CharField(blank=True, max_length=250, verbose_name='Note')),
                ('log_date', models.DateField(editable=False, help_text='From household_log entries', null=True)),
                ('log_status', models.CharField(choices=[('eligible_representative_present', 'Eligible Representative Present'), ('eligible_representative_absent', 'Eligible Representative Absent'), ('no_household_informant', 'No Household Informant'), ('refused', 'Refused Enumeration')], max_length=50, null=True, verbose_name='Household Status')),
                ('log_attempts', models.IntegerField(default=0)),
                ('members', models.IntegerField(default=0)),
                ('bhs', models.IntegerField(default=0)),
                ('hic', models.IntegerField(default=0)),
                ('household_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure')),
                ('survey', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='bcpp_survey.Survey')),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='IncreasePlotRadius',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('radius', models.FloatField(default=25.0, help_text='meters')),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('plot_identifier', models.CharField(db_index=True, editable=False, help_text='Plot identifier', max_length=25, unique=True, verbose_name='Plot Identifier')),
                ('eligible_members', models.IntegerField(blank=True, help_text='Provide an approximation of the number of people who live in this residence who are age eligible.', null=True, verbose_name='Approximate number of age eligible members')),
                ('description', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Description of plot/residence')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('cso_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='provide the CSO number or leave BLANK. (Encryption: RSA local)', max_length=71, null=True, verbose_name='CSO Number')),
                ('household_count', models.IntegerField(default=0, help_text='Provide the number of households in this plot.', null=True, validators=[django.core.validators.MaxValueValidator(9)], verbose_name='Number of Households on this plot.')),
                ('time_of_week', models.CharField(blank=True, choices=[('weekdays', 'Weekdays'), ('weekend', 'Weekends')], max_length=25, null=True, verbose_name='Time of week when most of the eligible members will be available')),
                ('time_of_day', models.CharField(blank=True, choices=[('morning', 'Morning'), ('afternoon', 'Afternoon'), ('evening', 'Evening')], max_length=25, null=True, verbose_name='Time of day when most of the eligible members will be available')),
                ('gps_degrees_s', models.DecimalField(decimal_places=0, max_digits=10, null=True, verbose_name='GPS Degrees-South')),
                ('gps_minutes_s', models.DecimalField(decimal_places=4, max_digits=10, null=True, verbose_name='GPS Minutes-South')),
                ('gps_degrees_e', models.DecimalField(decimal_places=0, max_digits=10, null=True, verbose_name='GPS Degrees-East')),
                ('gps_minutes_e', models.DecimalField(decimal_places=4, max_digits=10, null=True, verbose_name='GPS Minutes-East')),
                ('gps_lon', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='longitude')),
                ('gps_lat', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='latitude')),
                ('gps_target_lon', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='target waypoint longitude')),
                ('gps_target_lat', models.DecimalField(decimal_places=6, max_digits=10, null=True, verbose_name='target waypoint latitude')),
                ('status', models.CharField(choices=[('non_residential', 'non-residential'), ('residential_not_habitable', 'residential, not-habitable'), ('residential_habitable', 'residential, habitable'), ('inaccessible', 'Inaccessible')], max_length=35, null=True, verbose_name='Plot status')),
                ('target_radius', models.FloatField(default=0.025, editable=False, help_text='km')),
                ('distance_from_target', models.FloatField(help_text='distance in meters', null=True)),
                ('selected', models.CharField(choices=[('1', 'twenty_percent'), ('2', 'five_percent')], editable=False, max_length=25, null=True, verbose_name='selected')),
                ('device_id', models.CharField(editable=False, max_length=2, null=True)),
                ('action', models.CharField(default='unconfirmed', editable=False, max_length=25, null=True)),
                ('access_attempts', models.IntegerField(default=0, editable=False, help_text="Number of attempts to access a plot to determine it's status.")),
                ('uploaded_map_16', models.CharField(blank=True, editable=False, max_length=25, null=True, verbose_name='Map image at zoom level 16')),
                ('uploaded_map_17', models.CharField(blank=True, editable=False, max_length=25, null=True, verbose_name='Map image at zoom level 17')),
                ('uploaded_map_18', models.CharField(blank=True, editable=False, max_length=25, null=True, verbose_name='Map image at zoom level 18')),
                ('community', models.CharField(editable=False, help_text='If the community is incorrect, please contact the DMC immediately.', max_length=25, validators=[bcpp_household.models.plot.is_valid_community])),
                ('section', models.CharField(editable=False, max_length=25, null=True, verbose_name='Section')),
                ('sub_section', models.CharField(editable=False, max_length=25, null=True, verbose_name='Sub-section')),
                ('bhs', models.NullBooleanField(default=None, editable=False, help_text='True indicates that plot is enrolled into BHS. Updated by bcpp_subject.subject_consent post_save')),
                ('enrolled_datetime', models.DateTimeField(editable=False, help_text='datetime that plot is enrolled into BHS. Updated by bcpp_subject.subject_consent post_save', null=True)),
                ('htc', models.NullBooleanField(default=False, editable=False)),
                ('replaces', models.CharField(blank=True, editable=False, help_text='plot or household identifier that this plot replaces.', max_length=25, null=True)),
                ('replaced_by', models.CharField(blank=True, editable=False, help_text='The identifier of the plot that this plot was replaced by', max_length=25, null=True)),
                ('replaceable', models.NullBooleanField(default=None, editable=False, help_text='Updated by replacement helper', verbose_name='Replaceable?')),
            ],
            options={
                'ordering': ['-plot_identifier'],
            },
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PlotIdentifierHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('identifier', models.CharField(editable=False, max_length=36, unique=True)),
                ('padding', models.IntegerField(default=4, editable=False)),
                ('sequence_number', models.IntegerField()),
                ('device_id', models.IntegerField(default=0)),
                ('is_derived', models.BooleanField(default=False)),
                ('sequence_app_label', models.CharField(default='identifier', editable=False, max_length=50)),
                ('sequence_model_name', models.CharField(default='sequence', editable=False, max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='PlotLog',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('plot', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.Plot')),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PlotLogEntry',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future, bcpp_survey.validators.date_in_survey], verbose_name='Report date')),
                ('log_status', models.CharField(choices=[('accessible', 'Accessible'), ('inaccessible', 'Inaccessible')], max_length=25, verbose_name='What is the status of this plot?')),
                ('reason', models.CharField(blank=True, choices=[('impassable_road', 'Road is impassable'), ('dogs', 'Dogs prevent access'), ('locked_gate', 'Gate is locked'), ('OTHER', 'Other')], max_length=25, null=True, verbose_name='If inaccessible, please indicate the reason.')),
                ('reason_other', models.CharField(blank=True, max_length=100, null=True, verbose_name='If Other, specify')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Comments')),
                ('plot_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.PlotLog')),
            ],
            bases=(edc_sync.model_mixins.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RepresentativeEligibility',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('aged_over_18', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you verify that the respondent is aged 18 or older? ')),
                ('household_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=3, verbose_name='Does the respondent typically spend more nights on average in this household than in any other household in the same community?')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'NO' respondent cannot serve as Household Head/Representative.", max_length=10, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Did you administer the verbal script and ensure the respondent is willing to provide household information? ')),
                ('report_datetime', models.DateTimeField()),
                ('auto_filled', models.BooleanField(default=False, editable=False, help_text='This form is autofilled for non-BHS surveys using information from amember consented in a previous survey. See HouseholdMemberHelper')),
                ('auto_fill_member_id', models.CharField(editable=False, help_text='pk of household member used to autofill', max_length=50, null=True)),
                ('household_structure', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='plot',
            unique_together=set([('gps_target_lat', 'gps_target_lon')]),
        ),
        migrations.AddField(
            model_name='increaseplotradius',
            name='plot',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.Plot'),
        ),
        migrations.AddField(
            model_name='householdrefusalhistory',
            name='household_structure',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdrefusal',
            name='household_structure',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdlog',
            name='household_structure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='householdassessment',
            name='household_structure',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='household',
            name='plot',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='bcpp_household.Plot'),
        ),
        migrations.AddField(
            model_name='historicalrepresentativeeligibility',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalplotlogentry',
            name='plot_log',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.PlotLog'),
        ),
        migrations.AddField(
            model_name='historicalplotlog',
            name='plot',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.Plot'),
        ),
        migrations.AddField(
            model_name='historicalincreaseplotradius',
            name='plot',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.Plot'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdworklist',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdworklist',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdstructure',
            name='household',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.Household'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdstructure',
            name='survey',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_survey.Survey'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdrefusalhistory',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdrefusal',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdlogentry',
            name='household_log',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdLog'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdlog',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhouseholdassessment',
            name='household_structure',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.HouseholdStructure'),
        ),
        migrations.AddField(
            model_name='historicalhousehold',
            name='plot',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household.Plot'),
        ),
        migrations.AlterUniqueTogether(
            name='plotlogentry',
            unique_together=set([('plot_log', 'report_datetime')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdworklist',
            unique_together=set([('household_structure', 'label')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdstructure',
            unique_together=set([('survey', 'household')]),
        ),
        migrations.AlterUniqueTogether(
            name='householdlogentry',
            unique_together=set([('household_log', 'report_datetime')]),
        ),
    ]
