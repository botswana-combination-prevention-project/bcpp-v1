# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2016-11-15 19:30
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_crypto_fields.mixins
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.bw.validators
import edc_base.model.fields.custom_fields
import edc_base.model.fields.hostname_modification_field
import edc_base.model.fields.userfield
import edc_base.model.fields.uuid_auto_field
import edc_base.model.models.url_mixin
import edc_base.model.validators.date
import edc_base.model.validators.eligibility
import edc_base.model.validators.phone
import edc_consent.validators
import edc_protocol.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bcpp_list', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bcpp_household_member', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('access_care', models.CharField(choices=[('Traditional, faith, or religious healer/doctor', 'Traditional, faith, or religious healer/doctor'), ('Pharmacy', 'Pharmacy'), ('Public or government', 'Public or government health facility or clinic'), ('Private health facility', 'Private health facility or clinic'), ('Community health worker', 'Community health worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, null=True, verbose_name='In the past year, where do you MOST OFTEN get medical care or treatment when you or someone in your family is sick or hurt?')),
                ('access_care_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('medical_care_access_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('overall_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='If I need medical care, I can get seen by an appropriate health professional without any trouble.')),
                ('emergency_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='It is hard for me to get medical care in an emergency')),
                ('expensive_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Sometimes I go without the medical care I need because it is too expensive.')),
                ('convenient_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Places where I can get medical care are very conveniently located.')),
                ('whenever_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I am able to get medical care whenever I need it.')),
                ('local_hiv_care', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Would you be willing to come to the clinic within your community to receive HIV care and treatment, if available locally?')),
                ('medical_care_access', models.ManyToManyField(to='bcpp_list.MedicalCareAccess', verbose_name='In the past year, where else have you obtained medical care or treatment when you or someone in your family is sick or hurt? (check all that apply)')),
            ],
            options={
                'verbose_name': 'Access to Care',
                'verbose_name_plural': 'Access to Care',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('best_appt_datetime', models.DateTimeField(editable=False, null=True)),
                ('appt_close_datetime', models.DateTimeField(editable=False, null=True)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)', max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), ('home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment', max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Cancer',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_cancer', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of the diagnosis of cancer:')),
                ('dx_cancer', models.CharField(choices=[("Kaposi's sarcoma (KS)", "Kaposi's sarcoma (KS)"), ('Cervical cancer', 'Cervical cancer'), ('Breast cancer', 'Breast cancer'), ("Non-Hodgkin's lymphoma (NHL)", "Non-Hodgkin's lymphoma (NHL)"), ('Colorectal cancer', 'Colorectal cancer'), ('Prostate cancer', 'Prostate cancer'), ('Cancer of mouth, throat, voice box (larynx)', 'Cancer of mouth, throat, voice box (larynx)'), ('Cancer of oesophagus', 'Cancer of oesophagus'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=45, verbose_name='[Interviewer:] What is the cancer diagnosis as recorded?')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
            ],
            options={
                'verbose_name': 'Cancer',
                'verbose_name_plural': 'Cancer',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Cd4History',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('record_available', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is record of last CD4 count available?')),
                ('last_cd4_count', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name="What is the value of the last 'CD4' test recorded?")),
                ('last_cd4_drawn_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name="Date last 'CD4' test was run")),
            ],
            options={
                'verbose_name': 'CD4 History',
                'verbose_name_plural': 'CD4 History',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CeaEnrollmentChecklist',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date/Time')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='[Interviewer] Is the prospective participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text=" if 'NO,' STOP participant cannot be enrolled", max_length=3, null=True, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text=" if 'NO,' STOP participant cannot be enrolled", max_length=3, null=True, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('community_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], help_text="if 'NO (or don't want to answer)' STOP participant cannot be enrolled.", max_length=17, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='[Participant] In the past 12 months, have you typically spent 3 or more nights per month in [name of study community]? [If moved into the community in the past 12 months, then since moving in have you typically spent more than 3 nights per month in this community] ')),
                ('enrollment_reason', models.CharField(choices=[('CD4 < 50', 'Most recent (within past 3 months) CD4 < 50'), ('CD4 50-100', 'Most recent (within past 3 months) CD4 50-100'), ('AIDS opportunistic infection/condition', 'Current AIDS opportunistic infection/condition')], max_length=45, verbose_name='[Interviewer] What is the reason for enrollment of this participant? ')),
                ('cd4_date', models.DateField(max_length=25, verbose_name='[Interviewer] Date of the most recent CD4 measurement? ')),
                ('cd4_count', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='[Interviewer] Most recent (within past 3 months) CD4 measurement?')),
                ('opportunistic_illness', models.CharField(choices=[('Tuberculosis', 'Tuberculosis'), ('Wasting', 'Wasting'), ('Cryptococcosis', 'Cryptococcosis'), ('severe bacterial pneumonia', 'Recurrent severe bacterial pneumonia'), ('Esophageal candidiasis', 'Esophageal candidiasis'), ('Pneumocystis pneumonia', 'Pneumocystis pneumonia'), ("Kaposi's sarcoma", "Kaposi's sarcoma"), ('Cervical cancer', 'Cervical cancer'), ("Non-Hodgkin's lymphoma", "Non-Hodgkin's lymphoma"), ('Other, record', 'Other, record'), ('No current AIDS opportunistic illness', 'No current AIDS opportunistic illness')], max_length=50, verbose_name='[Interviewer] Does the patient currently have AIDS opportunistic illness (refer to SOP for list of eligible conditions)? ')),
                ('diagnosis_date', models.DateField(max_length=3, verbose_name='[Interviewer] Date of diagnosis of the AIDS opportunistic illness? ')),
                ('date_signed', models.DateTimeField(help_text=" if 'NO,' STOP participant cannot be enrolled", max_length=25, verbose_name='[Interviewer] Date/ Time study CONSENT signed:')),
            ],
            options={
                'verbose_name': 'CEA Enrollment Checklist',
                'verbose_name_plural': 'CEA Enrollment Checklist',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Circumcised',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('circumcised', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=15, null=True, verbose_name='Do you believe that male circumcision has any health benefits for you?')),
                ('circ_date', models.DateField(blank=True, null=True, verbose_name='When were you circumcised?')),
                ('when_circ', models.IntegerField(blank=True, help_text='Note: Leave blank if participant does not want to respond.', null=True, verbose_name='At what age were you circumcised?')),
                ('age_unit_circ', models.CharField(blank=True, choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='The unit of age of circumcision is?')),
                ('where_circ', models.CharField(choices=[('Government clinic or hospital', 'Government clinic or hospital'), ('Traditional location (Bogerwa)', 'Traditional location (Bogerwa)'), ('Outreach site (mobile or temporary center)', 'Outreach site (mobile or temporary center)'), ('Private practitioner', 'Private practitioner'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=45, null=True, verbose_name='Where were you circumcised?')),
                ('where_circ_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('why_circ', models.CharField(choices=[('Prevent HIV/AIDS', 'Prevent HIV/AIDS'), ('Other medical reason', 'Other medical reason'), ('Personal preference', 'Personal preference'), ('Improved hygiene', 'Improved hygiene'), ('Cultural tradition and/or religion', 'Cultural tradition and/or religion'), ('Acceptance by sexual partner(s)', 'Acceptance by sexual partner(s)'), ('Acceptance by family, friends, and/or community', 'Acceptance by family, friends, and/or community'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=55, null=True, verbose_name='What was the main reason why you were circumcised?')),
                ('why_circ_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('health_benefits_smc', models.ManyToManyField(blank=True, to='bcpp_list.CircumcisionBenefits', verbose_name='What do you believe are the health benefits of male circumcision? (Indicate all that apply.)')),
            ],
            options={
                'verbose_name': 'Circumcised',
                'verbose_name_plural': 'Circumcised',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Circumcision',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('circumcised', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=15, verbose_name='Are you circumcised?')),
                ('last_seen_circumcised', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True, verbose_name='Since we last spoke with you on last_seen_circumcised, have you been circumcised?')),
                ('circumcised_datetime', models.DateField(blank=True, default=None, null=True, verbose_name='If Yes, date?')),
                ('circumcised_location', models.CharField(blank=True, choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, null=True, verbose_name='IF YES, Location?')),
                ('circumcised_location_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('health_benefits_smc', models.ManyToManyField(blank=True, to='bcpp_list.CircumcisionBenefits', verbose_name='What do you believe are the health benefits of male circumcision? (Indicate all that apply.)')),
            ],
            options={
                'verbose_name': 'Circumcision',
                'verbose_name_plural': 'Circumcision',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ClinicQuestionnaire',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('know_hiv_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Do you know your current HIV status?')),
                ('current_hiv_status', models.CharField(blank=True, choices=[('POS', 'HIV Positive'), ('NEG', 'HIV Negative'), ('IND', 'Indeterminate'), ('UNK', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Please tell me your current HIV status?')),
                ('on_arv', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Are you currently taking antiretroviral therapy (ARVs)?')),
                ('arv_evidence', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is there evidence [OPD card, tablets, masa number] that the participant is on therapy?')),
            ],
            options={
                'verbose_name': 'Clinic Questionnaire',
                'verbose_name_plural': 'Clinic Questionnaire',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CommunityEngagement',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('community_engagement', models.CharField(choices=[('Very active', 'Very active'), ('Somewhat active', 'Somewhat active'), ('Not active at all', 'Not active at all'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='How active are you in community activities such as burial society, Motshelo, Syndicate, PTA, VDC(Village Developement Committee), Mophato and development of the community that surrounds you??')),
                ('vote_engagement', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', "Not applicable (no election, can't vote)"), ('DWTA', "Don't want to answer")], max_length=50, null=True, verbose_name='Did you vote in the last local government election?')),
                ('problems_engagement_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('solve_engagement', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('dont_know', "Don't know"), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='If there is a problem in this neighbourhood, do the adults work together in solving it?')),
                ('problems_engagement', models.ManyToManyField(help_text='Note:Interviewer to read question but NOT the responses. Check the boxes of any of problems mentioned.', to='bcpp_list.NeighbourhoodProblems', verbose_name='What are the major problems in this neighbourhood??')),
            ],
            options={
                'verbose_name': 'Community Engagement',
                'verbose_name_plural': 'Community Engagement',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CorrectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Correction report date ad time')),
                ('old_first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('new_first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('old_last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('new_last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('old_initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('new_initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('old_dob', models.DateField(blank=True, help_text='Format is YYYY-MM-DD', null=True, validators=[edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='Old Date of birth')),
                ('new_dob', models.DateField(blank=True, help_text='Format is YYYY-MM-DD', null=True, validators=[edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='New Date of birth')),
                ('old_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True)),
                ('new_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True)),
                ('old_guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")])),
                ('new_guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")])),
                ('old_may_store_samples', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Old Sample storage')),
                ('new_may_store_samples', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='New Sample storage')),
                ('old_is_literate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='(Old) Is the participant LITERATE?')),
                ('new_is_literate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='(New) Is the participant LITERATE?')),
                ('old_witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma (Encryption: RSA local)", max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")], verbose_name="Witness's Last and first name (illiterates only)")),
                ('new_witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma (Encryption: RSA local)", max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")], verbose_name="Witness's Last and first name (illiterates only)")),
            ],
        ),
        migrations.CreateModel(
            name='Demographics',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('religion_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('ethnic_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('marital_status', models.CharField(choices=[('Single/never married', 'Single/never married'), ('Married', 'Married (common law/civil or customary/traditional)'), ('Divorced/separated', 'Divorced or formally separated'), ('Widowed', 'Widowed'), ('DWTA', "Don't want to answer")], max_length=55, verbose_name='What is your current marital status?')),
                ('num_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (women only)', null=True, verbose_name='WOMEN: How many wives does your husband have (including traditional marriage), including yourself?')),
                ('husband_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (men only)', null=True, verbose_name='MEN: How many wives do you have, including traditional marriage?')),
                ('ethnic', models.ManyToManyField(help_text='Ask for the original ethnic group', to='bcpp_list.EthnicGroups', verbose_name='What is your ethnic group?')),
                ('live_with', models.ManyToManyField(help_text='[indicate all that apply]', to='bcpp_list.LiveWith', verbose_name='Who do you currently live with ?')),
                ('religion', models.ManyToManyField(to='bcpp_list.Religion', verbose_name='What is your religion affiliation?')),
            ],
            options={
                'verbose_name': 'Demographics',
                'verbose_name_plural': 'Demographics',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('education', models.CharField(choices=[('Non formal', 'Non formal'), ('Primary', 'Primary'), ('Junior Secondary', 'Junior Secondary'), ('Senior Secondary', 'Senior Secondary'), ('Higher than senior secondary (university, diploma, etc.)', 'Higher than senior secondary (university, diploma, etc.)'), ('DWTA', "Don't want to answer")], max_length=65, verbose_name='What is your highest level of education attainment?')),
                ('working', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you currently working?')),
                ('job_type', models.CharField(blank=True, choices=[('piece job', 'Occassional or Casual employment (piece job)'), ('seasonal', 'Seasonal employment'), ('full-time', 'Formal wage employment (full-time)'), ('part-time', 'Formal wage employment (part-time)'), ('agric', 'Self-employed in agriculture'), ('self full-time', 'Self-employed making money, full time'), ('self part-time', 'Self-employed making money, part time'), ('OTHER', 'Other')], max_length=45, null=True, verbose_name='In your main job what type of work do you do?')),
                ('reason_unemployed', models.CharField(blank=True, choices=[('waiting', 'Waiting to continue agricultural work'), ('unemployed- looking', 'Unemployed (looking for work)'), ('unemployed- waiting', 'Unemployed (waiting to start new work)'), ('unable to work', 'Unable to work (permanently sick or injured)'), ('student', 'Student/ Apprentice/ Volunteer'), ('housewife', 'Housewife/ Homemaker (not looking for work)'), ('retired', 'Retired'), ('OTHER', 'Other'), ('not looking', 'Not looking for work')], max_length=65, null=True, verbose_name='What is the reason why you are not working?')),
                ('job_description', models.CharField(blank=True, choices=[('farmer', 'Farmer (own land)'), ('farm work', 'Farm work on employers land'), ('domestic', 'Domestic worker'), ('bar/hotel', 'Work in bar/ hotel/ guest house'), ('fishing', 'Fishing'), ('mining', 'Mining'), ('shop', 'Working in shop'), ('selling', 'Informal selling'), ('sexworker', 'Commercial sex work'), ('transport', 'Transport (trucker/ taxi driver)'), ('factory', 'Factory worker'), ('guard', 'Guard (security company)'), ('police', 'Police/ Soldier'), ('office', 'Clerical and office work'), ('govt worker', 'Government worker'), ('teacher', 'Teacher'), ('hcw', 'Health care worker'), ('Other', 'Other professional'), ('OTHER', 'Other')], max_length=65, null=True, verbose_name='Describe the work that you do or did in your most recent job. If you have more than one profession, choose the one you spend the most time doing.')),
                ('monthly_income', models.CharField(blank=True, choices=[('None', 'No income'), ('1-199 pula', '1-199 pula'), ('200-499 pula', '200-499 pula'), ('500-999 pula', '500-999 pula'), ('1000-4999 pula', '1000-4999 pula'), ('5000-10,000 pula', '5000-10,000 pula'), ('More than 10,000 pula', 'More than 10,000 pula'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='In the past month, how much money did you earn from work you did or received in payment [retirement benefits, child maintenance, food basket, etc]?')),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Education',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ElisaHivResult',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_result', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate')], max_length=50, verbose_name='HIV test result from the Elisa')),
                ('hiv_result_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='HIV test result from the Elisa date and time')),
            ],
            options={
                'verbose_name': "Elisa's HIV Result",
                'verbose_name_plural': "Elisa's HIV Result",
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('community', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
            ],
            options={
                'verbose_name': 'Enrollment',
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Grant',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name="Today's date")),
                ('grant_number', models.IntegerField(blank=True, null=True, verbose_name='How many of each type of grant do you receive?')),
                ('grant_type', models.CharField(blank=True, choices=[('Child support ', 'Child support '), ('Old age pension', 'Old age pension'), ('Foster care', 'Foster care'), ('Disability', 'Disability (disability dependency)'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, null=True, verbose_name='Grant name')),
                ('other_grant', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
            ],
            options={
                'verbose_name': 'Grant',
                'verbose_name_plural': 'Grants',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HeartAttack',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_heart_attack', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of the heart disease or stroke diagnosis:')),
                ('dx_heart_attack_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('dx_heart_attack', models.ManyToManyField(help_text='(tick all that apply)', to='bcpp_list.HeartDisease', verbose_name='[Interviewer:] What is the heart disease or stroke diagnosis as recorded?')),
            ],
            options={
                'verbose_name': 'Heart Attack or Stroke',
                'verbose_name_plural': 'Heart Attack or Stroke',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HicEnrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hic_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No', subject is not eligible.", max_length=25, verbose_name='Is it okay for the project to visit you every year for the next three years for further questions and testing?')),
                ('permanent_resident', models.NullBooleanField(default=None, help_text='From Residency and Mobility. Eligible if Yes.')),
                ('intend_residency', models.NullBooleanField(default=None, help_text='From Residency and Mobility. Eligible if No.')),
                ('hiv_status_today', models.CharField(help_text="From Today's HIV Result. Eligible if Negative.", max_length=50)),
                ('dob', models.DateField(default=None, help_text='Format is YYYY-MM-DD. From Subject Consent.', validators=[edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='Date of birth')),
                ('household_residency', models.NullBooleanField(default=None, help_text='Is Participant a Household Member. Eligible if Yes.')),
                ('citizen_or_spouse', models.NullBooleanField(default=None, help_text='From Subject Consent. Is participant a citizen, or married to citizen with a valid marriage certificate?')),
                ('locator_information', models.NullBooleanField(default=None, help_text='From Subject Locator. Is the locator form filled and all necessary contact information collected?')),
                ('consent_datetime', models.DateTimeField(help_text='From Subject Consent.', validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
            ],
            options={
                'verbose_name': 'Hic Enrollment',
                'verbose_name_plural': 'Hic Enrollment',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccessToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('access_care', models.CharField(choices=[('Traditional, faith, or religious healer/doctor', 'Traditional, faith, or religious healer/doctor'), ('Pharmacy', 'Pharmacy'), ('Public or government', 'Public or government health facility or clinic'), ('Private health facility', 'Private health facility or clinic'), ('Community health worker', 'Community health worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, null=True, verbose_name='In the past year, where do you MOST OFTEN get medical care or treatment when you or someone in your family is sick or hurt?')),
                ('access_care_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('medical_care_access_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('overall_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='If I need medical care, I can get seen by an appropriate health professional without any trouble.')),
                ('emergency_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='It is hard for me to get medical care in an emergency')),
                ('expensive_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Sometimes I go without the medical care I need because it is too expensive.')),
                ('convenient_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Places where I can get medical care are very conveniently located.')),
                ('whenever_access', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I am able to get medical care whenever I need it.')),
                ('local_hiv_care', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Would you be willing to come to the clinic within your community to receive HIV care and treatment, if available locally?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Access to Care',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalAppointment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('best_appt_datetime', models.DateTimeField(editable=False, null=True)),
                ('appt_close_datetime', models.DateTimeField(editable=False, null=True)),
                ('visit_instance', models.CharField(blank=True, db_index=True, default='0', help_text='A decimal to represent an additional report to be included with the original visit report. (NNNN.0)', max_length=1, null=True, validators=[django.core.validators.RegexValidator('[0-9]', 'Must be a number from 0-9')], verbose_name='Instance')),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('telephone', 'By telephone'), ('home', 'At home')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(blank=True, help_text='Reason for appointment', max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical appointment',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCancer',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_cancer', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of the diagnosis of cancer:')),
                ('dx_cancer', models.CharField(choices=[("Kaposi's sarcoma (KS)", "Kaposi's sarcoma (KS)"), ('Cervical cancer', 'Cervical cancer'), ('Breast cancer', 'Breast cancer'), ("Non-Hodgkin's lymphoma (NHL)", "Non-Hodgkin's lymphoma (NHL)"), ('Colorectal cancer', 'Colorectal cancer'), ('Prostate cancer', 'Prostate cancer'), ('Cancer of mouth, throat, voice box (larynx)', 'Cancer of mouth, throat, voice box (larynx)'), ('Cancer of oesophagus', 'Cancer of oesophagus'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=45, verbose_name='[Interviewer:] What is the cancer diagnosis as recorded?')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Cancer',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCd4History',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('record_available', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is record of last CD4 count available?')),
                ('last_cd4_count', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name="What is the value of the last 'CD4' test recorded?")),
                ('last_cd4_drawn_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name="Date last 'CD4' test was run")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical CD4 History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCeaEnrollmentChecklist',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date/Time')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='[Interviewer] Is the prospective participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text=" if 'NO,' STOP participant cannot be enrolled", max_length=3, null=True, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text=" if 'NO,' STOP participant cannot be enrolled", max_length=3, null=True, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('community_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], help_text="if 'NO (or don't want to answer)' STOP participant cannot be enrolled.", max_length=17, validators=[edc_base.model.validators.eligibility.eligible_if_yes], verbose_name='[Participant] In the past 12 months, have you typically spent 3 or more nights per month in [name of study community]? [If moved into the community in the past 12 months, then since moving in have you typically spent more than 3 nights per month in this community] ')),
                ('enrollment_reason', models.CharField(choices=[('CD4 < 50', 'Most recent (within past 3 months) CD4 < 50'), ('CD4 50-100', 'Most recent (within past 3 months) CD4 50-100'), ('AIDS opportunistic infection/condition', 'Current AIDS opportunistic infection/condition')], max_length=45, verbose_name='[Interviewer] What is the reason for enrollment of this participant? ')),
                ('cd4_date', models.DateField(max_length=25, verbose_name='[Interviewer] Date of the most recent CD4 measurement? ')),
                ('cd4_count', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='[Interviewer] Most recent (within past 3 months) CD4 measurement?')),
                ('opportunistic_illness', models.CharField(choices=[('Tuberculosis', 'Tuberculosis'), ('Wasting', 'Wasting'), ('Cryptococcosis', 'Cryptococcosis'), ('severe bacterial pneumonia', 'Recurrent severe bacterial pneumonia'), ('Esophageal candidiasis', 'Esophageal candidiasis'), ('Pneumocystis pneumonia', 'Pneumocystis pneumonia'), ("Kaposi's sarcoma", "Kaposi's sarcoma"), ('Cervical cancer', 'Cervical cancer'), ("Non-Hodgkin's lymphoma", "Non-Hodgkin's lymphoma"), ('Other, record', 'Other, record'), ('No current AIDS opportunistic illness', 'No current AIDS opportunistic illness')], max_length=50, verbose_name='[Interviewer] Does the patient currently have AIDS opportunistic illness (refer to SOP for list of eligible conditions)? ')),
                ('diagnosis_date', models.DateField(max_length=3, verbose_name='[Interviewer] Date of diagnosis of the AIDS opportunistic illness? ')),
                ('date_signed', models.DateTimeField(help_text=" if 'NO,' STOP participant cannot be enrolled", max_length=25, verbose_name='[Interviewer] Date/ Time study CONSENT signed:')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical CEA Enrollment Checklist',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCircumcised',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('circumcised', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=15, null=True, verbose_name='Do you believe that male circumcision has any health benefits for you?')),
                ('circ_date', models.DateField(blank=True, null=True, verbose_name='When were you circumcised?')),
                ('when_circ', models.IntegerField(blank=True, help_text='Note: Leave blank if participant does not want to respond.', null=True, verbose_name='At what age were you circumcised?')),
                ('age_unit_circ', models.CharField(blank=True, choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='The unit of age of circumcision is?')),
                ('where_circ', models.CharField(choices=[('Government clinic or hospital', 'Government clinic or hospital'), ('Traditional location (Bogerwa)', 'Traditional location (Bogerwa)'), ('Outreach site (mobile or temporary center)', 'Outreach site (mobile or temporary center)'), ('Private practitioner', 'Private practitioner'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=45, null=True, verbose_name='Where were you circumcised?')),
                ('where_circ_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('why_circ', models.CharField(choices=[('Prevent HIV/AIDS', 'Prevent HIV/AIDS'), ('Other medical reason', 'Other medical reason'), ('Personal preference', 'Personal preference'), ('Improved hygiene', 'Improved hygiene'), ('Cultural tradition and/or religion', 'Cultural tradition and/or religion'), ('Acceptance by sexual partner(s)', 'Acceptance by sexual partner(s)'), ('Acceptance by family, friends, and/or community', 'Acceptance by family, friends, and/or community'), ('not_sure', 'I am not sure'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=55, null=True, verbose_name='What was the main reason why you were circumcised?')),
                ('why_circ_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Circumcised',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCircumcision',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('circumcised', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=15, verbose_name='Are you circumcised?')),
                ('last_seen_circumcised', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True, verbose_name='Since we last spoke with you on last_seen_circumcised, have you been circumcised?')),
                ('circumcised_datetime', models.DateField(blank=True, default=None, null=True, verbose_name='If Yes, date?')),
                ('circumcised_location', models.CharField(blank=True, choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, null=True, verbose_name='IF YES, Location?')),
                ('circumcised_location_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Circumcision',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalClinicQuestionnaire',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('know_hiv_status', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Do you know your current HIV status?')),
                ('current_hiv_status', models.CharField(blank=True, choices=[('POS', 'HIV Positive'), ('NEG', 'HIV Negative'), ('IND', 'Indeterminate'), ('UNK', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Please tell me your current HIV status?')),
                ('on_arv', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Are you currently taking antiretroviral therapy (ARVs)?')),
                ('arv_evidence', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is there evidence [OPD card, tablets, masa number] that the participant is on therapy?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Clinic Questionnaire',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCommunityEngagement',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('community_engagement', models.CharField(choices=[('Very active', 'Very active'), ('Somewhat active', 'Somewhat active'), ('Not active at all', 'Not active at all'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='How active are you in community activities such as burial society, Motshelo, Syndicate, PTA, VDC(Village Developement Committee), Mophato and development of the community that surrounds you??')),
                ('vote_engagement', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', "Not applicable (no election, can't vote)"), ('DWTA', "Don't want to answer")], max_length=50, null=True, verbose_name='Did you vote in the last local government election?')),
                ('problems_engagement_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('solve_engagement', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('dont_know', "Don't know"), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='If there is a problem in this neighbourhood, do the adults work together in solving it?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Community Engagement',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalCorrectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Correction report date ad time')),
                ('old_first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('new_first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('old_last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('new_last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('old_initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('new_initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('old_dob', models.DateField(blank=True, help_text='Format is YYYY-MM-DD', null=True, validators=[edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='Old Date of birth')),
                ('new_dob', models.DateField(blank=True, help_text='Format is YYYY-MM-DD', null=True, validators=[edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='New Date of birth')),
                ('old_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True)),
                ('new_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True)),
                ('old_guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")])),
                ('new_guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")])),
                ('old_may_store_samples', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Old Sample storage')),
                ('new_may_store_samples', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='New Sample storage')),
                ('old_is_literate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='(Old) Is the participant LITERATE?')),
                ('new_is_literate', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='(New) Is the participant LITERATE?')),
                ('old_witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma (Encryption: RSA local)", max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")], verbose_name="Witness's Last and first name (illiterates only)")),
                ('new_witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma (Encryption: RSA local)", max_length=71, null=True, validators=[django.core.validators.RegexValidator('^[A-Z]{1,50}\\, [A-Z]{1,50}$', "Invalid format. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma")], verbose_name="Witness's Last and first name (illiterates only)")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical correct consent',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalDemographics',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('religion_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('ethnic_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('marital_status', models.CharField(choices=[('Single/never married', 'Single/never married'), ('Married', 'Married (common law/civil or customary/traditional)'), ('Divorced/separated', 'Divorced or formally separated'), ('Widowed', 'Widowed'), ('DWTA', "Don't want to answer")], max_length=55, verbose_name='What is your current marital status?')),
                ('num_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (women only)', null=True, verbose_name='WOMEN: How many wives does your husband have (including traditional marriage), including yourself?')),
                ('husband_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (men only)', null=True, verbose_name='MEN: How many wives do you have, including traditional marriage?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Demographics',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalEducation',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('education', models.CharField(choices=[('Non formal', 'Non formal'), ('Primary', 'Primary'), ('Junior Secondary', 'Junior Secondary'), ('Senior Secondary', 'Senior Secondary'), ('Higher than senior secondary (university, diploma, etc.)', 'Higher than senior secondary (university, diploma, etc.)'), ('DWTA', "Don't want to answer")], max_length=65, verbose_name='What is your highest level of education attainment?')),
                ('working', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you currently working?')),
                ('job_type', models.CharField(blank=True, choices=[('piece job', 'Occassional or Casual employment (piece job)'), ('seasonal', 'Seasonal employment'), ('full-time', 'Formal wage employment (full-time)'), ('part-time', 'Formal wage employment (part-time)'), ('agric', 'Self-employed in agriculture'), ('self full-time', 'Self-employed making money, full time'), ('self part-time', 'Self-employed making money, part time'), ('OTHER', 'Other')], max_length=45, null=True, verbose_name='In your main job what type of work do you do?')),
                ('reason_unemployed', models.CharField(blank=True, choices=[('waiting', 'Waiting to continue agricultural work'), ('unemployed- looking', 'Unemployed (looking for work)'), ('unemployed- waiting', 'Unemployed (waiting to start new work)'), ('unable to work', 'Unable to work (permanently sick or injured)'), ('student', 'Student/ Apprentice/ Volunteer'), ('housewife', 'Housewife/ Homemaker (not looking for work)'), ('retired', 'Retired'), ('OTHER', 'Other'), ('not looking', 'Not looking for work')], max_length=65, null=True, verbose_name='What is the reason why you are not working?')),
                ('job_description', models.CharField(blank=True, choices=[('farmer', 'Farmer (own land)'), ('farm work', 'Farm work on employers land'), ('domestic', 'Domestic worker'), ('bar/hotel', 'Work in bar/ hotel/ guest house'), ('fishing', 'Fishing'), ('mining', 'Mining'), ('shop', 'Working in shop'), ('selling', 'Informal selling'), ('sexworker', 'Commercial sex work'), ('transport', 'Transport (trucker/ taxi driver)'), ('factory', 'Factory worker'), ('guard', 'Guard (security company)'), ('police', 'Police/ Soldier'), ('office', 'Clerical and office work'), ('govt worker', 'Government worker'), ('teacher', 'Teacher'), ('hcw', 'Health care worker'), ('Other', 'Other professional'), ('OTHER', 'Other')], max_length=65, null=True, verbose_name='Describe the work that you do or did in your most recent job. If you have more than one profession, choose the one you spend the most time doing.')),
                ('monthly_income', models.CharField(blank=True, choices=[('None', 'No income'), ('1-199 pula', '1-199 pula'), ('200-499 pula', '200-499 pula'), ('500-999 pula', '500-999 pula'), ('1000-4999 pula', '1000-4999 pula'), ('5000-10,000 pula', '5000-10,000 pula'), ('More than 10,000 pula', 'More than 10,000 pula'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='In the past month, how much money did you earn from work you did or received in payment [retirement benefits, child maintenance, food basket, etc]?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Education',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalElisaHivResult',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_result', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate')], max_length=50, verbose_name='HIV test result from the Elisa')),
                ('hiv_result_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='HIV test result from the Elisa date and time')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': "historical Elisa's HIV Result",
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalEnrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('community', models.CharField(max_length=25)),
                ('visit_code', models.CharField(max_length=25)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Enrollment',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalGrant',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name="Today's date")),
                ('grant_number', models.IntegerField(blank=True, null=True, verbose_name='How many of each type of grant do you receive?')),
                ('grant_type', models.CharField(blank=True, choices=[('Child support ', 'Child support '), ('Old age pension', 'Old age pension'), ('Foster care', 'Foster care'), ('Disability', 'Disability (disability dependency)'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, null=True, verbose_name='Grant name')),
                ('other_grant', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Grant',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHeartAttack',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_heart_attack', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of the heart disease or stroke diagnosis:')),
                ('dx_heart_attack_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Heart Attack or Stroke',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHicEnrollment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hic_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No', subject is not eligible.", max_length=25, verbose_name='Is it okay for the project to visit you every year for the next three years for further questions and testing?')),
                ('permanent_resident', models.NullBooleanField(default=None, help_text='From Residency and Mobility. Eligible if Yes.')),
                ('intend_residency', models.NullBooleanField(default=None, help_text='From Residency and Mobility. Eligible if No.')),
                ('hiv_status_today', models.CharField(help_text="From Today's HIV Result. Eligible if Negative.", max_length=50)),
                ('dob', models.DateField(default=None, help_text='Format is YYYY-MM-DD. From Subject Consent.', validators=[edc_consent.validators.AgeTodayValidator(16, 64)], verbose_name='Date of birth')),
                ('household_residency', models.NullBooleanField(default=None, help_text='Is Participant a Household Member. Eligible if Yes.')),
                ('citizen_or_spouse', models.NullBooleanField(default=None, help_text='From Subject Consent. Is participant a citizen, or married to citizen with a valid marriage certificate?')),
                ('locator_information', models.NullBooleanField(default=None, help_text='From Subject Locator. Is the locator form filled and all necessary contact information collected?')),
                ('consent_datetime', models.DateTimeField(help_text='From Subject Consent.', validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Hic Enrollment',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivCareAdherence',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('first_positive', models.DateField(blank=True, help_text='Note: If participant does not want to answer, leave blank. If participant is unable to estimate date, leave blank.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When was your first positive HIV test result?')),
                ('medical_care', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text="if 'YES', answer HIV medical care section", max_length=25, null=True, verbose_name='Have you ever received HIV-related medical or clinical care, for such things as a CD4 count (masole), IDCC/ PMTCT registration, additional clinic-based counseling?')),
                ('no_medical_care', models.CharField(blank=True, choices=[('Did not feel sick', 'Did not feel sick'), ('Did not know I should get HIV care', 'Did not know I should get HIV care'), ('Did not have time due to work responsibilities', 'Did not have time due to work responsibilities'), ('Did not have time due to family/childcare responsibilities', 'Did not have time due to family/childcare responsibilities'), ('Transportation costs', 'Transportation costs'), ('Was afraid of someone (friends/family) seeing me at the HIV clinic', 'Was afraid of someone (friends/family) seeing me at the HIV clinic'), ('Traditional healer advised against going', 'Traditional healer advised against going'), ('Religious beliefs', 'Religious beliefs'), ('Cultural beliefs', 'Cultural beliefs'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=70, null=True, verbose_name='What is the main reason you have not received HIV-related medical or clinical care?')),
                ('no_medical_care_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('ever_recommended_arv', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Have you ever been recommended by a doctor/nurse or other healthcare worker to start antiretroviral therapy (ARVs), a combination of medicines to treat your HIV infection? [common medicines include: combivir, truvada, atripla, nevirapine]')),
                ('ever_taken_arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Have you ever taken any antiretroviral therapy (ARVs) for your HIV infection? [For women: Do not include treatment that you took during pregnancy to protect your baby from HIV]')),
                ('why_no_arv', models.CharField(blank=True, choices=[('Did not feel sick', 'Did not feel sick'), ('Was afraid treatment would make me feel bad/sick', 'Was afraid treatment  would make me feel bad/sick'), ('Difficulty finding someone to go with me for counseling (mopati)', 'Difficulty finding someone to go with me for counseling (mopati)'), ('Hard due to work responsibilities', 'Hard due to work responsibilities'), ('Hard due to family/childcare responsibilities', 'Hard due to family/childcare responsibilities'), ('Transportation costs', 'Transportation costs'), ('Was afraid of someone (friends/family) seeing me at the HIV clinic', 'Was afraid of someone (friends/family) seeing me at the HIV clinic'), ('Sexual partner advised against taking', 'Sexual partner advised against taking'), ('Family or friends advised against taking', 'Family or friends advised against taking'), ('Traditional healer advised against taking', 'Traditional healer advised against taking'), ('Religious beliefs', 'Religious beliefs'), ('Cultural beliefs', 'Cultural beliefs'), ('High CD4', 'High CD4'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=75, null=True, verbose_name='What was the main reason why you have not started ARVs?')),
                ('why_no_arv_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('first_arv', models.DateField(blank=True, help_text='Note: If participant does not want to answer,leave blank.  If participant is unable to estimate date, leave blank.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When did you first start taking antiretroviral therapy (ARVs)?')),
                ('on_arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='If yes, need to answer next two questions.', max_length=25, null=True, verbose_name='Are you currently taking antiretroviral therapy (ARVs)?')),
                ('clinic_receiving_from', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Which clinic facility are you already receiving therapy from?')),
                ('next_appointment_date', models.DateField(blank=True, default=None, null=True, verbose_name='When is your next appointment at this facility?')),
                ('arv_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name="When did you stop taking ARV's?")),
                ('arv_stop', models.CharField(blank=True, choices=[('Did not feel they were helping', 'Did not feel they were helping'), ('ARVs made me feel bad or sick', 'ARVs made me feel bad or sick'), ('Difficulty finding someone to go with me for counseling (mopati)', 'Difficulty finding someone to go with me for counseling (mopati)'), ('Hard due to work responsibilities', 'Hard due to work responsibilities'), ('Hard due to family/childcare responsibilities', 'Hard due to family/childcare responsibilities'), ('Doctor or nurse at clinic told me to stop', 'Doctor or nurse at clinic told me to stop'), ('Transportation costs', 'Transportation costs'), ('Was afraid of someone (friends/family) seeing me at the HIV clinic', 'Was afraid of someone (friends/family) seeing me at the HIV clinic'), ('Sexual partner advised against taking', 'Sexual partner advised against taking'), ('Family or friends advised against taking', 'Family or friends advised against taking'), ('Traditional healer advised against taking', 'Traditional healer advised against taking'), ('Religious beliefs', 'Religious beliefs'), ('Cultural beliefs', 'Cultural beliefs'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=80, null=True, verbose_name='What was the main reason why you stopped taking ARVs?')),
                ('arv_stop_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('adherence_4_day', models.CharField(blank=True, choices=[('Zero', 'Zero days'), ('One day', 'One day'), ('Two days', 'Two days'), ('Three days', 'Three days'), ('Four days', 'Four days'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During the past 4 days, on how many days have you missed taking all your doses of antiretroviral therapy (ART)?')),
                ('adherence_4_wk', models.CharField(blank=True, choices=[('Very poor', 'Very poor'), ('Poor', 'Poor'), ('Fair', 'Fair'), ('Good', 'Good'), ('Very good', 'Very good'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Thinking about the past 4 weeks, on average, how would you rate your ability to take all your medications as prescribed?')),
                ('arv_evidence', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is there evidence [OPD card, tablets, masa number] that the participant is on therapy?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV care & Adherence',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivHealthCareCosts',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_medical_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='Have you ever received HIV related medical/clinical care? ')),
                ('reason_no_care', models.CharField(blank=True, choices=[('not thinking about HIV care', 'I am not thinking about HIV related medical/clinical care at this time'), ('I am not ready to start', 'HIV related medical/clinical care for my HIV infection is important to me but I am not ready to start it yet'), ('not yet tried to find a doctor', 'I have thought about starting HIV related medical/clinical care but have not yet tried to find a doctor or clinic'), ('not yet tried to make an appointment', 'I have found a doctor or clinic for HIV related medical/clinical care but have not yet tried to make an appointment'), ('no been successful yet', 'I have tried to obtain HIV related medical/clinical care from a doctor or clinic but have not been successful yet'), ('I have an appointment for HIV care', 'I have an appointment for HIV related medical/clinical care for my HIV infection but have not been for it yet'), ("don't know where to go", "I don't know where to go for HIV related medical/clinical care"), ('I do not have the money', 'I do not have the money for HIV related medical/clinical care'), ('DWTA', "Don't want to answer")], max_length=115, null=True, verbose_name='If you have never received HIV related medical/clinical care, why not? ')),
                ('place_care_received', models.CharField(choices=[('None', 'None'), ('Government dispensary', 'Government dispensary'), ('Government health center', 'Government health center'), ('Government hospital', 'Government hospital'), ('Christian/mission health center', 'Christian/mission health center'), ('Islamic health center', 'Islamic health center'), ('Private health center for all illnesses', 'Private health center for all illnesses'), ('Private health center for HIV/AIDS', 'Private health center for HIV/AIDS'), ('Mobile services', 'Mobile services'), ('Plantation health center', 'Plantation health center'), ('NGO clinic', 'NGO clinic'), ('DWTA', "Don't want to answer")], default='None', max_length=40, null=True, verbose_name='Where do you receive most of your HIV related health care? ')),
                ('care_regularity', models.CharField(choices=[('0 times', '0 times'), ('1 time', '1 time'), ('2 times', '2 times'), ('3 times', '3 times'), ('4 times', '4 times'), ('5 times', '5 times'), ('6-10 times', '6-10 times'), ('More than 10 times', 'More than 10 times'), ('DWTA', "Don't want to answer")], default='0 times', help_text='Do not include medicine re-fill visits.', max_length=20, null=True, verbose_name='In the past 3 months, how many times did you have clinic visits to see a health care worker, a nurse, or doctor? ')),
                ('doctor_visits', models.CharField(choices=[('always', 'All of the time (always)'), ('almost always', 'Most of the time (almost always)'), ('sometimes', 'Some of the time (sometimes)'), ('rarely', 'Almost none of the time (rarely)'), ('never', 'None of the time (never)'), ('DWTA', "Don't want to answer")], default='never', max_length=32, null=True, verbose_name='In the last 3 months, how often did someone take you to the doctor? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV health care costs',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivLinkageToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('kept_appt', models.CharField(choices=[('Yes', 'Yes, kept appointment'), ('No_refered_other_clinic', 'No but attended a visit at the HIV care clinic to which they were referred on another date'), ('No_other_clinic', 'No but attended a visit at a different HIV clinic'), ('diff_clininc', 'I went to a different clinic'), ('No', 'No but tried to attend an HIV care clinic and left before I saw a healthcare provider'), ('No', 'I have not been to any HIV care clinic [skip to #3]')], max_length=50, null=True, verbose_name='We last spoke with you on last_visit_date and scheduled an appointment for you in an HIV care clinic on last_appt_date. Did you keep that appointment?')),
                ('diff_clininc', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='If went to a different clinic, specify clinic:')),
                ('left_clininc_datetime', models.DateField(blank=True, default=None, null=True, verbose_name='If you tried to attend an HIV care clinic and left before You saw a healthcare provider specify the date?')),
                ('clinic_first_datetime', models.DateField(blank=True, default=None, null=True, verbose_name='What was the date when you first went to the community_name clinic?')),
                ('evidence_type_clinic', models.CharField(choices=[('self_report_only', 'Self-Report Only'), ('opr_card', 'OPD Card'), ('clinic_paperwork', 'Clinic paperwork'), ('other', 'Other ')], max_length=50, null=True, verbose_name='Type of Evidence:')),
                ('evidence_type_clinic_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('recommended_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No [SKIP TO #10]', max_length=50, null=True, verbose_name='[IF PERSON WAS ART NAIVE OR A DEFAULTER AT LAST INTERVIEW] Since the last time we spoke with you on last_visit_date, has a doctor/nurse or other healthcare worker recommended that you start antiretroviral therapy (ARVs), a combination of medicines to treat your HIV infection?')),
                ('reason_recommended', models.CharField(blank=True, choices=[('low_cd4', 'Low CD4'), ('high_viral_load', 'High viral load'), ('pregnancy_breastfeeding', 'Pregnancy or breastfeeding'), ('tuberculosis', 'Tuberculosis'), ('cancer', 'Cancer'), ('dnt_knw', 'Do not know')], max_length=50, null=True, verbose_name='If yes, do you know why ARVs were recommended?')),
                ('reason_recommended_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('startered_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If NO [SKIP TO #9]', max_length=50, null=True, verbose_name='[IF PERSON WAS ART NAIVE OR A DEFAULTER AT LAST INTERVIEW] Did you [start/restart] ART since we spoke with you on last_visit_date?')),
                ('startered_therapy_date', models.DateField(blank=True, default=None, null=True, verbose_name='When did you [start/restart] ART?')),
                ('start_therapy_clininc', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='Which clinic facility did you [start/restart] ART at?')),
                ('start_therapy_clininc_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('not_refered_clininc', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='[If Clinic is not the referred clinic] In which community is this clinic located')),
                ('evidence_not_refered', models.CharField(choices=[('self_report_only', 'Self-Report Only'), ('opr_card', 'OPD Card'), ('clinic_paperwork', 'Clinic paperwork'), ('other', 'Other ')], max_length=50, null=True, verbose_name='Type of Evidence:')),
                ('evidence_not_refered_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Hiv Linkage To Care',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivMedicalCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('first_hiv_care_pos', models.DateField(blank=True, help_text='Note: If participant does not want to answer, leave blank.  If participant is unable to estimate date, leave blank.', max_length=25, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When did you first receive HIV-related medical care for such things as a CD4 count (masole), IDCC/ PMTCT registration, additional clinic-based counseling?')),
                ('last_hiv_care_pos', models.DateField(blank=True, help_text='Note: If participant does not want to answer,leave blank. If participant is unable to estimate date, leave blank.', max_length=25, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When did you last (most recently) receive HIV-related medical care for such things as a CD4 count (masole), IDCC/ PMTCT registration, additional clinic-based counseling?')),
                ('lowest_cd4', models.CharField(choices=[('0-49', '0-49'), ('50-99', '50-99'), ('100-199', '100-199'), ('200-349', '200-349'), ('350-499', '350-499'), ('500 or more', '500 or more'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='Assist the participant by helping review their outpatient cards if they are available.', max_length=25, verbose_name='What was your lowest CD4 (masole) count that was ever measured?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV Medical care',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivResult',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_result', models.CharField(choices=[('POS', 'HIV Positive (Reactive)'), ('NEG', 'HIV Negative (Non-reactive)'), ('IND', 'Indeterminate'), ('Declined', 'Participant declined testing'), ('Not performed', 'Test could not be performed (e.g. supply outage, technical problem)')], help_text='If participant declined HIV testing, please select a reason below.', max_length=50, verbose_name="Today's HIV test result")),
                ('hiv_result_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name="Today's HIV test result date and time")),
                ('blood_draw_type', models.CharField(choices=[('capillary', 'Capillary'), ('venous', 'Venous'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='What type of blood was used for the test')),
                ('insufficient_vol', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Note: if capillary blood and less than 350uL, an additional venous blood draw is required', max_length=15, verbose_name='If capillary, is the volume less than 350uL?')),
                ('why_not_tested', models.CharField(blank=True, choices=[('I already knew I am HIV positive', 'I already knew I am HIV positive'), ('I recently tested', 'I recently tested (I know my status)'), ("I didn't believe I was at risk of getting HIV", "I didn't believe I was at risk of getting HIV"), ('I am afraid to find out the result', 'I am afraid to find out the result'), ('I am afraid of what others would think of me', 'I am afraid of what others would think of me'), ('Family/friends did not want me to get an HIV test', 'Family/friends did not want me to get an HIV test'), ("I didn't have time due to work", "I didn't have time due to work"), ("I didn't have time due to family obligations", "I didn't have time due to family obligations"), ('My sexual partner did not want me to get an HIV test', 'My sexual partner did not want me to get an HIV test'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='Note: Only asked of individuals declining HIV testing during this visit.', max_length=65, null=True, verbose_name="What was the main reason why you did not want HIV testing as part of today's visit?")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': "historical Today's HIV Result",
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivResultDocumentation',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('result_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='What is the recorded date of this previous HIV test (or of the document that provides supporting evidence of HIV infection)?')),
                ('result_recorded', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown')], default='POS', editable=False, help_text='value should always be POS as the rule group only shows this form if verbal_hiv_result is POS and have indirect documentation.', max_length=30, verbose_name='What is the recorded HIV status indicated by this additional document?')),
                ('result_doc_type', models.CharField(choices=[('Tebelopele', 'Tebelopele'), ('Lab result form', 'Lab result form'), ('ART Prescription', 'ART Prescription'), ('PMTCT Prescription', 'PMTCT Prescription'), ('Record of CD4 count', 'Record of CD4 count'), ('OTHER', 'Other OPD card or ANC card documentation')], max_length=35, verbose_name='What is the type of document used?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV result documentation',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivTested',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_pills', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Have you ever heard about treatment for HIV with pills called antiretroviral therapy or ARVs [or HAART]?')),
                ('arvs_hiv_test', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Do you believe that treatment for HIV with antiretroviral therapy (or ARVs) can help HIV-positive people to live longer?')),
                ('num_hiv_tests', models.IntegerField(null=True, verbose_name='How many times before today have you had an HIV test?')),
                ('where_hiv_test', models.CharField(choices=[('Tebelopele VCT center', 'Tebelopele VCT center'), ('Antenatal care at healthcare facility', 'Antenatal care at healthcare facility (including private clinics)'), ('Other (not antenatal care) at healthcare facility', 'Other (not antenatal care) at healthcare facility (including private clinics)'), ('In my house as part of door-to-door services', 'In my house as part of door-to-door services'), ('In a mobile tent or vehicle in my neighborhood', 'In a mobile tent or vehicle in my neighborhood'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=85, verbose_name='Where were you tested for HIV, the last [most recent] time you were tested?')),
                ('where_hiv_test_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('why_hiv_test', models.CharField(choices=[('I was worried I might have HIV and wanted to know my status', 'I was worried I might have HIV and wanted to know my status'), ('I heard from someone I trust that it is important for me to get tested for HIV ', 'I heard from someone I trust that it is important for me to get tested for HIV '), ('I was at a health facility where the doctor/nurse recommended I get tested for HIV during the same visit', 'I was at a health facility where the doctor/nurse recommended I get tested for HIV during the same visit'), ('I read information on a brochure/flier that it is important for me to get tested for HIV', 'I read information on a brochure/flier that it is important for me to get tested for HIV'), ('OTHER', 'Other'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=105, null=True, verbose_name="Not including today's HIV test, which of the following statements best describes the reason you were tested the last [most recent] time you were tested before today?")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV Tested',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivTestingHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('has_tested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you ever been tested for HIV before?')),
                ('when_hiv_test', models.CharField(blank=True, choices=[('In the last month', 'In the last month'), ('1 to 5 months ago', '1 to 5 months ago'), ('6 to 12 months ago', '6 to 12 months ago'), ('more than 12 months ago', 'more than 12 months ago'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='(verbal response)', max_length=25, null=True, verbose_name='When was the last [most recent] time you were tested for HIV?')),
                ('has_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer"), ('record refusal', 'Participant does not want to provide record')], help_text='if no card available for viewing, proceed to next question', max_length=45, null=True, verbose_name='Is a record of last [most recent] HIV test [OPD card, Tebelopele, other] available to review?')),
                ('verbal_hiv_result', models.CharField(blank=True, choices=[('POS', 'HIV Positive'), ('NEG', 'HIV Negative'), ('IND', 'Indeterminate'), ('UNK', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='(verbal response)', max_length=30, null=True, verbose_name='Please tell me the results of your last [most recent] HIV test?')),
                ('other_record', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='This documentation refers to: PMTCT prescription, ART, CD4 count record, lab result for.. etc', max_length=3, null=True, verbose_name='Do you have any other available documentation of positive HIV status?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV Testing History',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivTestReview',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_test_date', models.DateField(help_text='Obtain this information from the card the participant presents to you.', validators=[edc_base.model.validators.date.date_not_future], verbose_name='What was the recorded date of the last HIV test?')),
                ('recorded_hiv_result', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('unknown', 'Unknown')], help_text='If the participant and written record differ, the result from the written record should be recorded.', max_length=30, verbose_name='What was the recorded HIV test result?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV Test Review',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHivUntested',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_pills', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Have you ever heard about treatment for HIV with pills called antiretroviral therapy or ARVs [or HAART]?')),
                ('arvs_hiv_test', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Do you believe that treatment for HIV with antiretroviral therapy (or ARVs) can help HIV-positive people to live longer?')),
                ('why_no_hiv_test', models.CharField(choices=[('I already knew I am HIV positive', 'I already knew I am HIV positive'), ('I recently tested', 'I recently tested (I know my status)'), ("I didn't believe I was at risk of getting HIV", "I didn't believe I was at risk of getting HIV"), ('I am afraid to find out the result', 'I am afraid to find out the result'), ('I am afraid of what others would think of me', 'I am afraid of what others would think of me'), ('Family/friends did not want me to get an HIV test', 'Family/friends did not want me to get an HIV test'), ("I didn't have time due to work", "I didn't have time due to work"), ("I didn't have time due to family obligations", "I didn't have time due to family obligations"), ('My sexual partner did not want me to get an HIV test', 'My sexual partner did not want me to get an HIV test'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=55, null=True, verbose_name='If you were not tested for HIV in the 12 months prior to today, what is the main reason why not?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical HIV Untested',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalHospitalAdmission',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('admission_nights', models.IntegerField(blank=True, help_text='Note:If participant does not want to answer, leave blank', null=True, verbose_name='How many total nights did you spend in the hospital in the past 3 months? ')),
                ('reason_hospitalized', models.CharField(choices=[('HIV-related care', 'HIV-related care, including TB and other opportunistic infections'), ('Pregnancy', 'Pregnancy-related care, including delivery'), ('Injuries', 'Injuries or accidents'), ('Chronic disease', 'Chronic disease related care, including high blood pressure, diabetes, cancer, mental illness'), ('Other', 'Other'), ('DWTA', "Don't want to answer"), ('None', 'None')], default='None', help_text=' ', max_length=95, null=True, verbose_name='What was the primary reason for the most recent hospitalization in the past 3 months?')),
                ('facility_hospitalized', models.CharField(blank=True, help_text=' ', max_length=30, null=True, verbose_name='For this most recent hospitalization, where were you hospitalized? ')),
                ('nights_hospitalized', models.IntegerField(blank=True, help_text=' ', null=True, verbose_name='For this most recent hospitization, how many nights total did you spend in the hospital? ')),
                ('healthcare_expense', models.DecimalField(blank=True, decimal_places=2, help_text='Pula', max_digits=10, null=True, verbose_name='How much did you have to pay to the healthcare provider for the entire stay, including any medicines? ')),
                ('travel_hours', models.CharField(choices=[('None', 'None'), ('Under 0.5 hour', 'Under 0.5 hour'), ('0.5 to under 1 hour', '0.5 to under 1 hour'), ('1 to under 2 hours', '1 to under 2 hours'), ('2 to under 3 hours', '2 to under 3 hours'), ('More than 3 hours', 'More than 3 hours'), ('DWTA', "Don't want to answer")], default='None', help_text=' ', max_length=20, null=True, verbose_name='For this most recent hospitalization, how long did it take you to get to the hospital? ')),
                ('total_expenses', models.DecimalField(blank=True, decimal_places=2, help_text='Note:If participant does not want to answer, leave blank. Currency is Pula', max_digits=10, null=True, verbose_name='For this most recent hospitalization, how much did you have to pay for transport, food and accommodation, including fuel if you used your own car? ')),
                ('hospitalization_costs', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], help_text=' ', max_length=17, null=True, verbose_name='For this most recent hospitalization, were any of these costs by covered by anyone else, such as your medical aid or employer? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Hospital Admission',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalLabourMarketWages',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('employed', models.CharField(choices=[('government sector', 'Yes, In the government sector'), ('private sector', 'Yes, in the private sector'), ('self-employed working on my own', 'Yes, self-employed working on my own'), ('self-employed with own employees', 'Yes, self-employed with own employees'), ('not working', 'No, not working'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='Are you currently employed? ')),
                ('occupation', models.CharField(blank=True, choices=[('Farmer', 'Farmer (own land)'), ('Farm worker', 'Farm worker (work on employers land)'), ('Domestic Worker', 'Domestic Worker'), ('Tavern/Bar/Entertainment', 'Work at Tavern/Bar/Entertainment Venue'), ('Mining', 'Mining'), ('Tourism', 'Tourism/game parks'), ('Informal vendors', 'Informal vendors'), ('Commercial sex work', 'Commercial sex work'), ('Transport (e.g., trucker)', 'Transport (e.g., trucker)'), ('Factory worker', 'Factory worker'), ('Informal vendors', 'Informal vendors'), ('Clerical and office work', 'Clerical and office work'), ('Small business/shop work', 'Small business/shop work'), ('Professional', 'Professional'), ('Fishing', 'Fishing'), ('Uniformed services', 'Uniformed services'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], help_text='main source of income.', max_length=40, null=True, verbose_name='What is your primary occupation?')),
                ('occupation_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('job_description_change', models.IntegerField(blank=True, help_text='Note: Enter number of times. If participant does not want to answer, leave blank', null=True, verbose_name='In the past 3 months, how many times have you changed your job? For example, changed your type of work or your employer. ')),
                ('days_worked', models.IntegerField(blank=True, help_text='Note: Enter number of times. If participant does not want to answer, leave blank', null=True, verbose_name='In the past month, how many days did you work?. ')),
                ('monthly_income', models.CharField(blank=True, choices=[('None', 'No income'), ('1-199 pula', '1-199 pula'), ('200-499 pula', '200-499 pula'), ('500-999 pula', '500-999 pula'), ('1000-4999 pula', '1000-4999 pula'), ('5000-10,000 pula', '5000-10,000 pula'), ('More than 10,000 pula', 'More than 10,000 pula'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='In the past month, what was your income? ')),
                ('salary_payment', models.CharField(blank=True, choices=[('Fixed salary', 'Fixed salary'), ('Paid daily', 'Paid daily'), ('Paid hourly', 'Paid hourly'), ('DWTA', "Don't want to answer")], max_length=20, null=True, verbose_name='How were you paid for your work? ')),
                ('household_income', models.CharField(choices=[('None', 'None'), ('1-200 pula', '1-200 pula'), ('200-499 pula', '200-499 pula'), ('500-999 pula', '500-999 pula'), ('1000-4999 pula', '1000-4999 pula'), ('5000-10,000 pula', '5000-10,000 pula'), ('10,0000-20,000 pula', '10,0000-20,000 pula'), ('More than 20,000 pula', 'More than 20,000 pula'), ('I am not sure', 'I am not sure'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='In the past month, what was the income of your household? ')),
                ('other_occupation', models.CharField(choices=[('None', 'None'), ('Studying', 'Studying'), ('Doing housework', 'Doing housework'), ('Looking for work', 'Looking for work'), ('Doing nothing (not looking for paid work)', 'Doing nothing (not looking for paid work)'), ('Retired/old age', 'Retired/old age'), ('Pregnant or recently pregnant', 'Pregnant or recently pregnant'), ('Sick or injured', 'Sick or injured'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], default='None', max_length=45, null=True, verbose_name='If you are not currently doing anything to earn money, then are you: ')),
                ('other_occupation_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('govt_grant', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='Do you receive any government grant for yourself or on behalf of someone else? ')),
                ('nights_out', models.IntegerField(blank=True, help_text='Note: Enter number of nights. If participant does not want to answer, leave blank', null=True, verbose_name='In the past month, how many nights did you spend away from home?. ')),
                ('weeks_out', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 12 months, have you spent more than 2 weeks away? ')),
                ('days_not_worked', models.IntegerField(blank=True, help_text='Note: Enter number of days including zero. If participant does not want to answer,leave blank', null=True, verbose_name='How many days have you been prevented from working because of sickness or visits to seek healthcare in the last 3 months. ')),
                ('days_inactivite', models.IntegerField(blank=True, help_text='Note: Enter number of days including zero. If participant does not want to answer, leave blank', null=True, verbose_name='How many days have you been prevented by illness from doing the things you normally do (studying, housework etc.) because of sickness or visits to seek healthcare in the last 3 months? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Labour Market & Lost Wages',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalMedicalDiagnoses',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('heart_attack_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='Please review the available OPD card or other medical records, for all participants', max_length=25, null=True, verbose_name='Is a record (OPD card, discharge summary) of a heart disease or stroke diagnosis available to review?')),
                ('cancer_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='Please review the available OPD card or other medical records, for all participants', max_length=25, null=True, verbose_name='Is a record (OPD card, discharge summary) of a cancer diagnosis available to review?')),
                ('tb_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='Please review the available OPD card or other medical records, for all participants', max_length=25, null=True, verbose_name='Is a record (OPD card, discharge summary, TB card) of a tuberculosis infection available to review?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Medical Diagnoses',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalNonPregnancy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('last_birth', models.DateField(blank=True, null=True, verbose_name='When did you last (most recently) give birth?')),
                ('anc_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) did you go for antenatal care?')),
                ('hiv_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], help_text='If respondent was aware that she was HIV-positive prior to last pregnancy', max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) were you tested for HIV?')),
                ('preg_arv', models.CharField(blank=True, choices=[('Yes, AZT (single drug, twice a day)', 'Yes, AZT (single drug, twice a day)'), ('Yes, HAART ', 'Yes, HAART [multiple drugs like Atripla, Truvada, or Combivir taken once or twice a day]'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer"), ('No', "No ARV's")], max_length=95, null=True, verbose_name='Were you given antiretroviral medications to protect the baby?')),
                ('more_children', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, verbose_name='Do you wish to have a child now or in the future?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Non Pregnancy',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalOutpatientCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('govt_health_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care at a Government Primary Health Clinic/Post? Not including any visits for which you were hospitalized. ')),
                ('dept_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care at a Hospital Outpatient Department, including Govt, private and church/mission hospitals? Not including any visits for which you were hospitalized. ')),
                ('prvt_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care from a Private Doctor? ')),
                ('trad_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care from a Traditional or Faith Healer? ')),
                ('care_visits', models.IntegerField(blank=True, help_text='Note:If participant does not want to answer, leave blank.', null=True, verbose_name='In the last 3 months, how many total outpatient visits have you to all of the above places? ')),
                ('facility_visited', models.CharField(choices=[('Government Clinic/Post', 'Government Primary Health Clinic/Post'), ('Chemist/Pharmacy', 'Chemist/Pharmacy'), ('Hospital Outpatient Department', 'Hospital Outpatient Department (including government and private)'), ('Private Doctor', 'Private Doctor'), ('Traditional or Faith Healer', 'Traditional or Faith Healer'), ('No visit in past 3 months', 'No visit in past 3 months'), ('DWTA', "Don't want to answer")], default='No visit in past 3 months', help_text="if 'NOT Government Primary Health Clinic/Post' go to question Q9. ", max_length=65, verbose_name='For the most recent outpatient medical care visit in the past 3 months, which type of facility did you visit? ')),
                ('specific_clinic', models.CharField(blank=True, help_text='Note:If participant does not want to answer, leave blank', max_length=50, null=True, verbose_name='For this most recent visit to a Government Primary Health Clinic/Post, which clinic did you visit? ')),
                ('care_reason', models.CharField(choices=[('HIV-related care', 'HIV-related care, including TB and other opportunistic infections'), ('Pregnancy', 'Pregnancy-related care, including delivery'), ('Injuries', 'Injuries or accidents'), ('Chronic disease', 'Chronic disease related care, including high blood pressure, diabetes, cancer, mental illness'), ('Other', 'Other'), ('DWTA', "Don't want to answer"), ('None', 'None')], default='None', max_length=95, null=True, verbose_name='For this most recent medical care visit, what was the primary reason you sought care? ')),
                ('care_reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('outpatient_expense', models.DecimalField(blank=True, decimal_places=2, help_text='If participant has not paid anything for outpatient medical care, please enter 0.00', max_digits=10, null=True, verbose_name='For this most recent outpatient medical care visit, how much did you have to pay to the health care provider, including any medicines?')),
                ('travel_time', models.CharField(choices=[('None', 'None'), ('Under 0.5 hour', 'Under 0.5 hour'), ('0.5 to under 1 hour', '0.5 to under 1 hour'), ('1 to under 2 hours', '1 to under 2 hours'), ('2 to under 3 hours', '2 to under 3 hours'), ('More than 3 hours', 'More than 3 hours'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='For this most recent outpatient medical care visit, how long did it take you to get to the clinic? ')),
                ('transport_expense', models.DecimalField(blank=True, decimal_places=2, help_text='If participant has not paid anything for outpatient medical care, please enter 0.00', max_digits=10, null=True, verbose_name='For this most recent outpatient medical care visit, how much did you have to pay for transport, food and accommodation? [include cost for fuel if using a private car] ')),
                ('cost_cover', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, null=True, verbose_name='For this most recent outpatient medical care visit, were any of these costs by covered by anyone else, such as your medical aid or employer? ')),
                ('waiting_hours', models.CharField(choices=[('None', 'None'), ('Under 0.5 hour', 'Under 0.5 hour'), ('0.5 to under 1 hour', '0.5 to under 1 hour'), ('1 to under 2 hours', '1 to under 2 hours'), ('2 to under 3 hours', '2 to under 3 hours'), ('More than 3 hours', 'More than 3 hours'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='For this most recent outpatient medical care visit, how long did you have to wait before you were seen, from when you arrived at the facility? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Outpatient care',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalParticipation',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('full', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=15, verbose_name='Has the participant agreed to fully participate in BHS')),
                ('participation_type', models.CharField(choices=[('Not Applicable', 'Not Applicable'), ('Changed mind midway', 'Participant changed mind')], max_length=30, verbose_name='What type of partial participation did the client choose?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Participation',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPima',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('pima_today', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was a PIMA CD4 done today?')),
                ('pima_today_other', models.CharField(blank=True, choices=[('Participant Declined', 'Participant Declined'), ('Multiple PIMA malfunction', 'Multiple PIMA malfunction'), ('Failed Blood Collection', 'Failed Blood Collection'), ('OTHER', 'Other, specify:')], max_length=50, null=True, verbose_name='If no PIMA CD4 today, please explain why')),
                ('pima_today_other_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('pima_id', models.CharField(blank=True, help_text='type this id directly from the machine as labeled', max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='PIMA ID must be a two digit number.', regex='\\d+')], verbose_name='PIMA CD4 machine ID?')),
                ('cd4_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='PIMA CD4 Date and time')),
                ('cd4_value', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='PIMA CD4 count')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical PIMA CD4 count',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPimaVl',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('quota_pk', models.CharField(blank=True, max_length=36, null=True)),
                ('request_code', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=datetime.datetime.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('poc_vl_type', models.CharField(choices=[('mobile setting', 'Mobile Setting'), ('household setting', 'Household Setting')], default='mobile setting', max_length=150, verbose_name='Type mobile or household setting')),
                ('poc_vl_today', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was a POC viral load done today?')),
                ('poc_vl_today_other', models.CharField(blank=True, choices=[('Participant Declined', 'Participant Declined'), ('Multiple PIMA malfunction', 'Multiple PIMA malfunction'), ('Failed Blood Collection', 'Failed Blood Collection'), ('OTHER', 'Other, specify:')], max_length=50, null=True, verbose_name='If no POC viral load today, please explain why')),
                ('poc_today_vl_other_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('pima_id', models.CharField(blank=True, help_text='type this id directly from the machine as labeled', max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='POC viral load ID must be a two digit number.', regex='\\d+')], verbose_name='POC viral load machine ID?')),
                ('vl_value_quatifier', models.CharField(choices=[('greater_than', 'Greater Than'), ('equal_to', 'Equal To'), ('less_than', 'Less Than'), ('OTHER', 'Other, specify:')], max_length=20, verbose_name='Select a quantifier for the value of the result')),
                ('poc_vl_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='POC viral load count')),
                ('time_of_test', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Test Date and time')),
                ('time_of_result', models.DateTimeField(blank=True, help_text='Time it takes to obtain viral load result.', null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Result Date and time')),
                ('easy_of_use', models.CharField(choices=[('easy', 'Easy'), ('Very easy', 'Very Easy'), ('Fairly easy', 'Fairly easy'), ('Difficult', 'Difficult'), ('Very difficult', 'Very difficult')], max_length=200, verbose_name='Ease of use by field operator?')),
                ('stability', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='Comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Stability')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical POC VL',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPositiveParticipant',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('internalize_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I think less of myself.')),
                ('internalized_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I have felt ashamed because of having HIV.')),
                ('friend_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I fear that if I disclosed my HIV status to my friends, they would lose respect for me.')),
                ('family_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I fear that if I disclosed my HIV status to my family, they would exclude me from usual family activities.')),
                ('enacted_talk_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People have talked badly about me.')),
                ('enacted_respect_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I have lost respect or standing in the community.')),
                ('enacted_jobs_tigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I have lost a job because of having HIV.')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Positive Participant',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalPregnancy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('last_birth', models.DateField(blank=True, null=True, verbose_name='When did you last (most recently) give birth?')),
                ('anc_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) did you go for antenatal care?')),
                ('hiv_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], help_text='If respondent was aware that she was HIV-positive prior to last pregnancy', max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) were you tested for HIV?')),
                ('preg_arv', models.CharField(blank=True, choices=[('Yes, AZT (single drug, twice a day)', 'Yes, AZT (single drug, twice a day)'), ('Yes, HAART ', 'Yes, HAART [multiple drugs like Atripla, Truvada, or Combivir taken once or twice a day]'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer"), ('No', "No ARV's")], max_length=95, null=True, verbose_name='Were you given antiretroviral medications to protect the baby?')),
                ('anc_reg', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No, but I will go for antenatal care', 'No, but I will go for antenatal care'), ('No and I am not planning on going for antenatal care', 'No and I am not planning on going for antenatal care'), ('DWTA', "Don't want to answer")], max_length=55, null=True, verbose_name='Have you registered for antenatal care?')),
                ('lnmp', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='When was the first day of your last normal menstrual period?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Pregnancy',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalQualityOfLife',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('mobility', models.CharField(choices=[('no problems', 'I have no problems in walking about'), ('slight problems', 'I have slight problems in walking about'), ('moderate problems', 'I have moderate problems in walking about'), ('severe problems', 'I have severe problems in walking about'), ('unable to walk', 'I am unable to walk about'), ('DWTA', "Don't want to answer")], max_length=45, verbose_name='Mobility')),
                ('self_care', models.CharField(choices=[('no problems', 'I have no problems washing or dressing myself'), ('slight problems', 'I have slight problems washing or dressing myself'), ('moderate problems', 'I have moderate problems washing or dressing myself'), ('severe problems', 'I have severe problems washing or dressing myself'), ('unable to wash', 'I am unable to wash or dress myself'), ('DWTA', "Don't want to answer")], max_length=65, verbose_name='Self-Care')),
                ('activities', models.CharField(choices=[('no problems', 'I have no problems doing my usual activities'), ('slight problems', 'I have slight problems doing my usual activities'), ('moderate problems', 'I have moderate problems doing my usual activities'), ('severe problems', 'I have severe problems doing my usual activities'), ('unable to', 'I am unable to do my usual activities'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='Usual Activities (e.g. work, study, housework, family or leisure activities)')),
                ('pain', models.CharField(choices=[('no pain', 'I have no pain or discomfort'), ('slight pain', 'I have slight pain or discomfort'), ('moderate pain', 'I have moderate pain or discomfort'), ('severe pain', 'I have severe pain or discomfort'), ('extreme pain', 'I have extreme pain or discomfort'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='Pain / Discomfort ')),
                ('anxiety', models.CharField(choices=[('not anxious', 'I am not anxious or depressed'), ('slightly anxious', 'I am slightly anxious or depressed'), ('moderately anxious', 'I am moderately anxious or depressed'), ('severely anxious', 'I am severely anxious or depressed'), ('extremely anxious', 'I am extremely anxious or depressed'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='Anxiety / Depression ')),
                ('health_today', models.IntegerField(blank=True, help_text='Note:Interviewer, please record corresponding number in the boxes. If participant does not want to answer, leave blank', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="We would like to know how good or bad your health is TODAY. This scale is numbered from 0 to 100. 100 means the 'best' health you can imagine. 0 means the 'worst' health you can imagine. Indicate on the scale how your health is TODAY.  ")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Quality of Life',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalRbdDemographics',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('religion_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('ethnic_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('marital_status', models.CharField(choices=[('Single/never married', 'Single/never married'), ('Married', 'Married (common law/civil or customary/traditional)'), ('Divorced/separated', 'Divorced or formally separated'), ('Widowed', 'Widowed'), ('DWTA', "Don't want to answer")], max_length=55, verbose_name='What is your current marital status?')),
                ('num_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (women only)', null=True, verbose_name='WOMEN: How many wives does your husband have (including traditional marriage), including yourself?')),
                ('husband_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (men only)', null=True, verbose_name='MEN: How many wives do you have, including traditional marriage?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical RBD Demographics',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalRecentPartner',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sex_partner_community', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='If outside community or farm outside this community or cattle post outside this community ask: Does this sexual partner live in any of the following communities?')),
                ('past_year_sex_freq', models.CharField(choices=[('Less than once a month', 'Less than once a month'), ('About once a month', 'About once a month'), ('2-3 times a month', '2-3 times a month'), ('About once a week', 'About once a week'), ('2 or more times a week', '2 or more times a week')], max_length=25, verbose_name='Approximately how often did you have sex with this partner during the past 12 months?')),
                ('third_last_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the last [most recent] time you had sex with this person (how long ago)?')),
                ('third_last_sex_calc', models.IntegerField(blank=True, help_text='e.g. if last sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months since last had sex with this person.')),
                ('first_first_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the first time you had sex with this person [how long ago]?')),
                ('first_first_sex_calc', models.IntegerField(blank=True, help_text='e.g. if first sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months/years since first had sex with this person.')),
                ('first_sex_current', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you expect to have sex with this person again?')),
                ('first_relationship', models.CharField(choices=[('Long-term partner', 'Long-term partner (>2 years) or spouse'), ('Boyfriend/Girlfriend', 'Boyfriend/Girlfriend'), ('Casual (known) partner', 'Casual (known) partner'), ('One time partner (previously unknown)', 'One time partner (previously unknown)'), ('Commercial sex worker', 'Commercial sex worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='What type of relationship do you have with this person?')),
                ('first_exchange', models.CharField(choices=[('less or equal to 18 years old', 'less or equal to 18 years old'), ('19-29', '19-29 years old'), ('30-39', '30-39 years old'), ('40-49', '40-49 years old'), ('50-59', '50-59 years old'), ('50-59', '50-59 years old'), ('60 or older', '60 year or older'), ('Not sure', 'Not sure')], help_text='Note: If participant does not want to answer, leave blank.', max_length=40, verbose_name='To the best of your knowledge, how old is this person?')),
                ('concurrent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Over the past 12 months, during the time you were having a sexual relationship with this person, did YOU have sex with other people (including husband/wife)?')),
                ('goods_exchange', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you received money, transport, food/drink, or other goods in exchange for sex from this partner?')),
                ('first_sex_freq', models.IntegerField(blank=True, null=True, verbose_name='During the last 3 months [of your relationship, if it has ended] how many times did you have sex with this partner?')),
                ('first_partner_hiv', models.CharField(choices=[('POS', 'HIV-positive'), ('NEG', 'HIV-negative'), ('not_sure', 'I am not sure HIV status'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="What is this partner's HIV status?")),
                ('partner_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Has your partner been tested for HIV in last 12 months')),
                ('first_haart', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Is this partner taking antiretroviral treatment?')),
                ('first_disclose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Did not know my HIV status', 'Did not know my HIV status'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Have you told this partner your HIV status?')),
                ('first_condom_freq', models.CharField(choices=[('All of the time', 'All of the time'), ('Sometimes', 'Sometimes'), ('Never', 'Never'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='When you have [had] sex with this partner, how often do you or your partner use a condom?')),
                ('first_partner_cp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='To the best of your knowledge, did he/she ever have other sex partners while you two were having a sexual relationship?')),
                ('first_partner_arm', models.CharField(blank=True, max_length=20, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Recent Partner - 12 Months',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalReproductiveHealth',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('number_children', models.IntegerField(default=0, verbose_name='How many children have you given birth to? Please include any children that may have died at (stillbirth) or after birth. Do not include any current pregnancies or miscarriages that occur early in pregnancy (prior to 20 weeks).')),
                ('menopause', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='this also refers to pre-menopause', max_length=3, verbose_name='Have you reached menopause (more than 12 months without a period)?')),
                ('family_planning_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('currently_pregnant', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Are you currently pregnant?')),
                ('when_pregnant', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did you become pregnant since the last interview we had with you?')),
                ('gestational_weeks', models.IntegerField(blank=True, help_text='gestational age in WEEKS. Among HIV-infected women who took/started ARVs during their last (or current pregnancy).', null=True, verbose_name="At about what gestational age (in weeks) did you start arv's during this (or your last) pregnancy?")),
                ('pregnancy_hiv_tested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Among women who were not known to be HIV-infected prior to the last (or current pregnancy).', max_length=3, verbose_name='Were you tested for HIV during your most recent (or this current) pregnancy?')),
                ('pregnancy_hiv_retested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='if the respondent has reached that point by the time of the current interview.', max_length=3, verbose_name='If you tested HIV-negative during the most recent (or this current) pregnancy, were you re-tested for HIV in the last 3 months of your pregnancy or at delivery? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Reproductive Health',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalResidencyMobility',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('length_residence', models.CharField(choices=[('Less than 6 months', 'Less than 6 months'), ('6 months to 12 months', '6 months to 12 months'), ('1 to 5 years', '1 to 5 years'), ('More than 5 years', 'More than 5 years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='How long have you lived in this community?')),
                ('permanent_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If participant has moved into the community in the past 12 months, then since moving in has the participant typically spent more than 14 nights per month in this community. If 'NO (or don't want to answer)' STOP. Participant cannot be enrolled.", max_length=10, verbose_name='In the past 12 months, have you typically spent 14 or more nights per month in this community? ')),
                ('intend_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Do you intend to move out of the community in the next 12 months?')),
                ('nights_away', models.CharField(choices=[('zero', 'Zero nights'), ('1-6 nights', '1-6 nights'), ('1-2 weeks', '1-2 weeks'), ('3 weeks to less than 1 month', '3 weeks to less than 1 month'), ('1-3 months', '1-3 months'), ('4-6 months', '4-6 months'), ('more than 6 months', 'more than 6 months'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name="In the past 12 months, in total how many nights did you spend away from this community, including visits to cattle post and lands?[If you don't know exactly, give your best guess]")),
                ('cattle_postlands', models.CharField(choices=[('N/A', 'Not Applicable'), ('Farm/lands', 'Farm/lands'), ('Cattle post', 'Cattle post'), ('Other community', 'Other community, specify:'), ('DWTA', "Don't want to answer")], default='N/A', max_length=25, verbose_name='In the past 12 months, during the times you were away from this community, where were you primarily staying?')),
                ('cattle_postlands_other', models.CharField(blank=True, max_length=65, null=True, verbose_name='Give the name of the community')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Residency & Mobility',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalResourceUtilization',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('out_patient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, have you sought outpatient medical care for yourself? Not including any visits for which you were hospitalized. ')),
                ('hospitalized', models.IntegerField(null=True, verbose_name='In the last 3 months, how many times were you admitted to hospital or other types of inpatient care and stayed one or more nights? This could be a government, private, or church/mission hospital. ')),
                ('money_spent', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000)], verbose_name='In the last 3 months, how much money in total have you spent on medicines for yourself?')),
                ('medical_cover', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, null=True, verbose_name='Were any of these costs for medicines or special foods covered by anyone else, such as your medical aid or employer? ')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Resource Utilization Costs',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSecondPartner',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sex_partner_community', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='If outside community or farm outside this community or cattle post outside this community ask: Does this sexual partner live in any of the following communities?')),
                ('past_year_sex_freq', models.CharField(choices=[('Less than once a month', 'Less than once a month'), ('About once a month', 'About once a month'), ('2-3 times a month', '2-3 times a month'), ('About once a week', 'About once a week'), ('2 or more times a week', '2 or more times a week')], max_length=25, verbose_name='Approximately how often did you have sex with this partner during the past 12 months?')),
                ('third_last_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the last [most recent] time you had sex with this person (how long ago)?')),
                ('third_last_sex_calc', models.IntegerField(blank=True, help_text='e.g. if last sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months since last had sex with this person.')),
                ('first_first_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the first time you had sex with this person [how long ago]?')),
                ('first_first_sex_calc', models.IntegerField(blank=True, help_text='e.g. if first sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months/years since first had sex with this person.')),
                ('first_sex_current', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you expect to have sex with this person again?')),
                ('first_relationship', models.CharField(choices=[('Long-term partner', 'Long-term partner (>2 years) or spouse'), ('Boyfriend/Girlfriend', 'Boyfriend/Girlfriend'), ('Casual (known) partner', 'Casual (known) partner'), ('One time partner (previously unknown)', 'One time partner (previously unknown)'), ('Commercial sex worker', 'Commercial sex worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='What type of relationship do you have with this person?')),
                ('first_exchange', models.CharField(choices=[('less or equal to 18 years old', 'less or equal to 18 years old'), ('19-29', '19-29 years old'), ('30-39', '30-39 years old'), ('40-49', '40-49 years old'), ('50-59', '50-59 years old'), ('50-59', '50-59 years old'), ('60 or older', '60 year or older'), ('Not sure', 'Not sure')], help_text='Note: If participant does not want to answer, leave blank.', max_length=40, verbose_name='To the best of your knowledge, how old is this person?')),
                ('concurrent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Over the past 12 months, during the time you were having a sexual relationship with this person, did YOU have sex with other people (including husband/wife)?')),
                ('goods_exchange', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you received money, transport, food/drink, or other goods in exchange for sex from this partner?')),
                ('first_sex_freq', models.IntegerField(blank=True, null=True, verbose_name='During the last 3 months [of your relationship, if it has ended] how many times did you have sex with this partner?')),
                ('first_partner_hiv', models.CharField(choices=[('POS', 'HIV-positive'), ('NEG', 'HIV-negative'), ('not_sure', 'I am not sure HIV status'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="What is this partner's HIV status?")),
                ('partner_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Has your partner been tested for HIV in last 12 months')),
                ('first_haart', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Is this partner taking antiretroviral treatment?')),
                ('first_disclose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Did not know my HIV status', 'Did not know my HIV status'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Have you told this partner your HIV status?')),
                ('first_condom_freq', models.CharField(choices=[('All of the time', 'All of the time'), ('Sometimes', 'Sometimes'), ('Never', 'Never'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='When you have [had] sex with this partner, how often do you or your partner use a condom?')),
                ('first_partner_cp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='To the best of your knowledge, did he/she ever have other sex partners while you two were having a sexual relationship?')),
                ('second_partner_arm', models.CharField(blank=True, max_length=20, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Second Partner - 12 Months',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSexualBehaviour',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('ever_sex', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='In your lifetime, have you ever had sex with anyone (including your spouse, friends, or someone you have just met)?')),
                ('lifetime_sex_partners', models.IntegerField(blank=True, null=True, verbose_name="In your lifetime, how many different people have you had sex with?  Please remember to include casual and once-off partners (prostitutes and truck drivers) as well as long-term partners (spouses, boyfriends/girlfriends)[If you can't recall the exact number, please give a best guess]")),
                ('last_year_partners', models.IntegerField(blank=True, help_text='Note:Leave blank if participant does not want to respond. ', null=True, verbose_name="In the past 12 months, how many different people have you had sex with?  Please remember to include casual and once-off partners (prostitutes and truck drivers) as well as long-term partners (spouses, boyfriends/girlfriends)[If you can't recall the exact number, please give a best guess]")),
                ('more_sex', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='In the past 12 months, did you have sex with somebody living outside of the community?')),
                ('first_sex', models.IntegerField(blank=True, help_text='Note:leave blank if participant does not want to respond.', null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(64)], verbose_name="How old were you when you had sex for the first time? [If you can't recall the exact age, please give a best guess]")),
                ('condom', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During the last [most recent] time you had sex, did you or your partner use a condom?')),
                ('alcohol_sex', models.CharField(blank=True, choices=[('Neither of us', 'Neither of us'), ('My partner', 'My partner'), ('Myself', 'Myself'), ('Both of us', 'Both of us'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During the last [most recent] time you had sex, were you or your partner drinking alcohol?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Sexual Behaviour',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSti',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sti_dx_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('wasting_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='wasting diagnosis date')),
                ('diarrhoea_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Diarrhoea diagnosis date')),
                ('yeast_infection_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Yeast Infection diagnosis date')),
                ('pneumonia_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Pneumonia diagnosis date')),
                ('pcp_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date diagnosed with PCP')),
                ('herpes_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date diagnosed with herpes')),
                ('comments', models.CharField(blank=True, max_length=250, null=True, verbose_name='Comments')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Potentially HIV-related illnesses',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalStigma',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('anticipate_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="Would you be, or have you ever been, hesitant to take an HIV test due to fear of people's reaction if you tested positive for HIV.")),
                ('enacted_shame_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I would be ashamed if someone in my family had HIV.')),
                ('saliva_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I fear that I could contract HIV if I come into contact with the saliva of a person living with HIV.')),
                ('teacher_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I think that if a teacher is living with HIV but is not sick, he/she should be allowed to continue teaching in the school.')),
                ('children_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Children living with HIV should be able to attend school with children who are HIV negative.')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Stigma',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalStigmaOpinion',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('test_community_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="People are hesitant to take an HIV test due to fear of people's reaction if the test result is positive for HIV.")),
                ('gossip_community_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People talk badly about people living with or thought to be living with HIV to others.')),
                ('respect_community_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV lose respect or standing.')),
                ('enacted_verbal_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV are verbally insulted, harassed and/or threatened.')),
                ('enacted_phyical_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV are sometimes physically assaulted.')),
                ('enacted_family_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV are now more accepted by others as there is now an effective treatment available.')),
                ('fear_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with HIV are less able to financially support themselves and their families.')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Stigma Opinion',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the client')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the client had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the client questions about this study and they have demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='The client has signed the consent form?')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy to the clinic with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the client with a copy of their signed informed consent')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='-', help_text="( if 'Yes' STOP patient cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default=None, help_text="( if 'No' provide witness's name on this form and signature on the paper document.)", max_length=3, verbose_name='Is the participant LITERATE?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's Last and first name (illiterates only)")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='not specified', help_text='The language used for the edc_consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=None, editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('identity_type', edc_base.model.fields.custom_fields.IdentityTypeField(choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number from the identity card (Encryption: RSA local)', max_length=71, null=True)),
                ('is_minor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='-', editable=False, help_text='Subject is a minor if aged 16-17. A guardian must be present for consent. HIV status may NOT be revealed in the household.', max_length=10, null=True, verbose_name='Is subject a minor?')),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('household_member', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember')),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical subject consent',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', models.UUIDField(editable=False, help_text='system field for export tracking.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_signed', models.DateField(default=datetime.date.today, verbose_name='Date Locator Form signed ')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Mailing address ')),
                ('home_visit_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to make home visits for follow-up purposes during the study?')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Physical address with detailed description')),
                ('may_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to call her for follow-up purposes during the study?')),
                ('may_sms_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given his/her permission for study staff to SMS her for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', 'Doesnt Work')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact her at work for follow up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Work contact number ')),
                ('may_contact_someone', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact anyone else for follow-up purposes during the study?')),
                ('contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Full physical address ')),
                ('contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.CellNumber], verbose_name='Cell number')),
                ('contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWTelephoneNumber], verbose_name='Telephone number')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Locator',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectOffstudy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, editable=False, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('offstudy_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Off-study Date')),
                ('reason', models.CharField(max_length=115, verbose_name='Please code the primary reason participant taken off-study')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Off Study',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectReferral',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', models.UUIDField(editable=False, help_text='system field for export tracking.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('subject_referred', models.CharField(choices=[('Yes', 'Yes, subject has been handed a referral letter'), ('No', 'No, subject has not been handed a referral letter'), ('refused', 'Subject refused referral the referral letter')], max_length=10)),
                ('referral_appt_date', models.DateTimeField(editable=False, help_text="The calculated referral appointment date communicated to the participant. See also attribute 'referral_appt_comment' for when the participant is unsure about attending on this date.", null=True, validators=[edc_base.model.validators.date.datetime_is_future], verbose_name='Referral Appointment Date')),
                ('referral_clinic', models.CharField(editable=False, help_text='The full name of the current community, e.g lentsweletau.', max_length=50)),
                ('referral_clinic_other', models.CharField(editable=False, help_text='(not used)', max_length=50, null=True)),
                ('gender', models.CharField(editable=False, help_text='M=Male, F=Female', max_length=10, null=True)),
                ('citizen', models.NullBooleanField(default=None, editable=False, help_text='True if citizen, False if not, None if unknown or N/A')),
                ('citizen_spouse', models.NullBooleanField(default=None, editable=False, help_text='True if citizen_spouse, False if not, None if unknown or N/A')),
                ('hiv_result', models.CharField(editable=False, help_text='HIV status (POS, NEG, IND) as determined by the field RA either by testing or using a combination of verbal response and documentation. None if no result available. See also new_pos. (derived)', max_length=50, null=True)),
                ('hiv_result_datetime', models.DateTimeField(editable=False, help_text="HIV result datetime either from today's test or documentation provided by the subject or None. See also new_pos. (derived)", max_length=50, null=True)),
                ('todays_hiv_result', models.CharField(editable=False, help_text='from HIV result of test performed by the field RA (POS, NEG, IND) or None if not performed. The datetime of the result is hiv_result_datetime.', max_length=50, null=True)),
                ('new_pos', models.NullBooleanField(default=None, editable=False, help_text='True if subject is newly diagnosed POS, false if known positive otherwise None (derived)')),
                ('last_hiv_result', models.CharField(editable=False, help_text="Documented result from a participant's past record of HIV testing or valid documentation of positive status (derived)", max_length=50, null=True)),
                ('verbal_hiv_result', models.CharField(editable=False, help_text='from HivTestingHistory.verbal_result. HIV status as verbally provided by subject or None. See also  if a positive result is supported by direct and indirect documentation.', max_length=50, null=True)),
                ('direct_hiv_documentation', models.NullBooleanField(editable=False, help_text="from HivTestingHistory.has_record. True if a document was seen that confirms the subject's verbally provided result, False if not, None if unknown. See also last_hiv_result.")),
                ('indirect_hiv_documentation', models.NullBooleanField(editable=False, help_text='from HivTestingHistory.other_record and from HivCareAdherence.arv_evidence. True if a document was seen that suggests the subject is HIV positive, False if not, None if unknown.')),
                ('last_hiv_result_date', models.DateTimeField(editable=False, help_text='Recorded date of previous HIV test or of the document that provides supporting evidence of HIV infection (derived)', null=True)),
                ('on_art', models.NullBooleanField(default=None, editable=False, help_text='from HivCareAdherence.on_art() method. True if subject claims to be on ARV, False if not, None if unknown. See also art_documentation. (derived)')),
                ('arv_documentation', models.NullBooleanField(editable=False, help_text="from HivCareAdherence.arv_evidence. True if Field RA has seen documents that shows subject is on ARV's, False if not, None if unknown. If True, overrides HivCareAdherence.on_arv=False")),
                ('arv_clinic', models.CharField(default=None, editable=False, help_text='from HivCareAdherence.clinic_receiving_from. The ARV clinic where subject currently receives care', max_length=50, null=True)),
                ('next_arv_clinic_appointment_date', models.DateField(default=None, editable=False, help_text="from HivCareAdherence.next_appointment_date. Next appointment date at the subject's ARV clinic.", null=True)),
                ('cd4_result', models.DecimalField(decimal_places=2, editable=False, help_text="from Pima. Result of today's CD4 test performed in the household", max_digits=6, null=True)),
                ('cd4_result_datetime', models.DateTimeField(editable=False, help_text='from Pima. datetime CD4 drawn.', null=True)),
                ('vl_sample_drawn', models.NullBooleanField(default=None, editable=False, help_text='from SubjectRequisition. True if a viral load sample was drawn in the household')),
                ('vl_sample_drawn_datetime', models.DateTimeField(editable=False, help_text='from SubjectRequisition. Datetime of viral load drawn.', null=True)),
                ('pregnant', models.NullBooleanField(default=None, editable=False, help_text='from ReproductiveHealth.currently_pregnant. True if currently pregnant, False if not, None if unknown.')),
                ('circumcised', models.NullBooleanField(default=None, editable=False, help_text='from Circumcison.circumcised. True if circumcised, False if not, None if unknown')),
                ('part_time_resident', models.NullBooleanField(default=None, editable=False, help_text='from eligibility checklist.part_time_resident. True if at least a part_time resident, False if not, None if unknown')),
                ('permanent_resident', models.NullBooleanField(default=None, editable=False, help_text='from residence and mobility.permanent_resident. True if permanent resident, False if not, None if unknown')),
                ('tb_symptoms', models.CharField(editable=False, help_text='list of symptoms from tb_symptoms. Any combination of Fever, cough, cough_blood, fever, night_sweat, lymph_nodes, weight_loss OR None', max_length=100, null=True)),
                ('urgent_referral', models.NullBooleanField(default=None, editable=False, help_text='True if one of MASA-DF, POS!-LO, POS#-LO, POS#-PR, POS!-PR, otherwise None (derived)')),
                ('referral_code', models.CharField(choices=[('pending', '<data collection in progress>'), ('TST-CD4', 'POS any, need CD4 testing'), ('TST-HIV', 'HIV test'), ('MASA-CC', 'Known POS, MASA continued care'), ('MASA-DF', 'Known POS, MASA defaulter (was on ART)'), ('SMC-NEG', 'SMC (uncircumcised, hiv neg)'), ('SMC?NEG', 'SMC (Unknown circumcision status, hiv neg'), ('SMC-UNK', 'SMC (uncircumcised, hiv result not known)'), ('SMC?UNK', 'SMC (Unknown circumcision status, hiv result not known)'), ('NEG!-PR', 'NEG today, Pregnant'), ('POS!-PR', 'POS today, Pregnant'), ('UNK?-PR', 'HIV UNKNOWN, Pregnant'), ('POS#-AN', 'Known POS, Pregnant, on ART (ANC)'), ('POS#-PR', 'Known POS, Pregnant, not on ART'), ('POS!-HI', 'POS today, not on ART, high CD4)'), ('POS!-LO', 'POS today, not on ART, low CD4)'), ('POS#-HI', 'Known POS, not on ART, high CD4)'), ('POS#-LO', 'Known POS, not on ART, low CD4)')], default='pending', editable=False, help_text='list of referral codes confirmed by the edc, comma delimited if more than one (derived).', max_length=50, verbose_name='Referral Code')),
                ('in_clinic_flag', models.BooleanField(default=False, editable=False, help_text='system field. flag indicating participant was seen in clinic (from implementer data.) Updated by export_transaction.')),
                ('subject_identifier', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment', max_length=250, verbose_name='Comment')),
                ('scheduled_appt_date', models.DateField(blank=True, help_text='Use the IDCC date. If subject is pregnant, use the ANC date instead of the IDCC date.  If the subject does not have a scheduled appointment, leave blank', null=True, validators=[edc_base.model.validators.date.date_is_future], verbose_name='Previously scheduled clinic appointment date in this BHS community')),
                ('referral_appt_comment', models.CharField(choices=[('N/A', 'not applicable'), ('conflict', 'have another commitment'), ('prefer_other_facility', 'prefer another health facility than the local clinic'), ('prefer_other_date', 'prefer to come on my own convenient time'), ('undecided_thinking', 'have to think about it'), ('undecided_accepting_status', 'need time to accept my HIV status'), ('have_other_anc_appt', 'have already registered with ANC and have another appointment'), ('personal_reasons', 'personal reasons')], default='N/A', help_text='If subject is unsure about attending the suggested appointment date, indicate the reason.', max_length=50, verbose_name='Reason for not attending suggested appointment date')),
                ('referral_clinic_type', models.CharField(choices=[('ANC', 'ANC'), ('IDCC', 'IDCC'), ('SMC', 'SMC'), ('VCT', 'VCT')], editable=False, help_text='The clinic type of clinic the participant is referred to for services, (IDCC, VCT, ANC or SMC)', max_length=25, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Referral',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('report_date', models.DateField(editable=False, verbose_name='Visit Date')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('reason_unscheduled', models.CharField(blank=True, choices=[('Routine oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('Ill oncology', 'Ill oncology clinic visit'), ('Patient called', 'Patient called to come for visit'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.Appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('household_member', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_household_member.HouseholdMember')),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Subject Visit',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalSubstanceUse',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('alcohol', models.CharField(choices=[('Never', 'Never'), ('Less then once a week', 'Less then once a week'), ('Once a week', 'Once a week'), ('2 to 3 times a week', '2 to 3 times a week'), ('more than 3 times a week', 'more than 3 times a week'), ('DWTA', "Don't want to answer")], help_text='If participant does not know exactly, ask to give a best guess.', max_length=25, verbose_name='In the past month, how often did you consume alcohol?')),
                ('smoke', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you currently smoke any tobacco products, such as cigarettes, cigars, or pipes?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Substance Use',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalTbSymptoms',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('cough', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Does the participant currently have a COUGH that has lasted for more than 2 weeks?')),
                ('fever', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last two weeks has the participant had FEVER?')),
                ('lymph_nodes', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Does the participant currently have ENLARGED LYMPH NODES?')),
                ('cough_blood', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last two weeks has the participant COUGHED UP BLOOD?')),
                ('night_sweat', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last two weeks has the participant had NIGHT SWEATS?')),
                ('weight_loss', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last month has the participant had unexplained WEIGHT LOSS?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical TB Symptoms',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalThirdPartner',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sex_partner_community', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='If outside community or farm outside this community or cattle post outside this community ask: Does this sexual partner live in any of the following communities?')),
                ('past_year_sex_freq', models.CharField(choices=[('Less than once a month', 'Less than once a month'), ('About once a month', 'About once a month'), ('2-3 times a month', '2-3 times a month'), ('About once a week', 'About once a week'), ('2 or more times a week', '2 or more times a week')], max_length=25, verbose_name='Approximately how often did you have sex with this partner during the past 12 months?')),
                ('third_last_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the last [most recent] time you had sex with this person (how long ago)?')),
                ('third_last_sex_calc', models.IntegerField(blank=True, help_text='e.g. if last sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months since last had sex with this person.')),
                ('first_first_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the first time you had sex with this person [how long ago]?')),
                ('first_first_sex_calc', models.IntegerField(blank=True, help_text='e.g. if first sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months/years since first had sex with this person.')),
                ('first_sex_current', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you expect to have sex with this person again?')),
                ('first_relationship', models.CharField(choices=[('Long-term partner', 'Long-term partner (>2 years) or spouse'), ('Boyfriend/Girlfriend', 'Boyfriend/Girlfriend'), ('Casual (known) partner', 'Casual (known) partner'), ('One time partner (previously unknown)', 'One time partner (previously unknown)'), ('Commercial sex worker', 'Commercial sex worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='What type of relationship do you have with this person?')),
                ('first_exchange', models.CharField(choices=[('less or equal to 18 years old', 'less or equal to 18 years old'), ('19-29', '19-29 years old'), ('30-39', '30-39 years old'), ('40-49', '40-49 years old'), ('50-59', '50-59 years old'), ('50-59', '50-59 years old'), ('60 or older', '60 year or older'), ('Not sure', 'Not sure')], help_text='Note: If participant does not want to answer, leave blank.', max_length=40, verbose_name='To the best of your knowledge, how old is this person?')),
                ('concurrent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Over the past 12 months, during the time you were having a sexual relationship with this person, did YOU have sex with other people (including husband/wife)?')),
                ('goods_exchange', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you received money, transport, food/drink, or other goods in exchange for sex from this partner?')),
                ('first_sex_freq', models.IntegerField(blank=True, null=True, verbose_name='During the last 3 months [of your relationship, if it has ended] how many times did you have sex with this partner?')),
                ('first_partner_hiv', models.CharField(choices=[('POS', 'HIV-positive'), ('NEG', 'HIV-negative'), ('not_sure', 'I am not sure HIV status'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="What is this partner's HIV status?")),
                ('partner_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Has your partner been tested for HIV in last 12 months')),
                ('first_haart', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Is this partner taking antiretroviral treatment?')),
                ('first_disclose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Did not know my HIV status', 'Did not know my HIV status'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Have you told this partner your HIV status?')),
                ('first_condom_freq', models.CharField(choices=[('All of the time', 'All of the time'), ('Sometimes', 'Sometimes'), ('Never', 'Never'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='When you have [had] sex with this partner, how often do you or your partner use a condom?')),
                ('first_partner_cp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='To the best of your knowledge, did he/she ever have other sex partners while you two were having a sexual relationship?')),
                ('third_partner_arm', models.CharField(blank=True, max_length=20, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Third Partner - 12 Months',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalTubercolosis',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_tb', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of the diagnosis of tuberculosis:')),
                ('dx_tb', models.CharField(choices=[('Pulmonary tuberculosis', 'Pulmonary tuberculosis'), ('Extrapulmonary (outside the lungs) tuberculosis', 'Extrapulmonary (outside the lungs) tuberculosis'), ('Other', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='[Interviewer:]What is the tuberculosis diagnosis as recorded?')),
                ('dx_tb_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Tubercolosis',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalUncircumcised',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('circumcised', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=15, null=True, verbose_name='Do you believe that male circumcision has any health benefits for you?')),
                ('reason_circ', models.CharField(choices=[('Circumcision never offered to me', 'Circumcision never offered to me'), ('Procedure might be painful', 'Procedure might be painful'), ('Did not know where to go for circumcision', 'Did not know where to go for circumcision'), ('Did not have the time or money for circumcision', 'Did not have the time or money for circumcision'), ('I might not be able to work or be active', 'I might not be able to work or be active'), ('My partner might not approve', 'My partner might not approve'), ('My family/friends might not approve', 'My family/friends might not approve'), ('There might be a medical complication', 'There might be a medical complication'), ('The healing time is very long', 'The healing time is very long'), ('It will be hard to not have sex or masturbate for 6 weeks', 'It will be hard to not have sex or masturbate for 6 weeks'), ('Sex might not feel the same', 'Sex might not feel the same'), ('I may not like the way my penis looks', 'I may not like the way my penis looks'), ('I may not like the way my penis feels', 'I may not like the way my penis feels'), ('I could die from the procedure', 'I could die from the procedure'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=65, null=True, verbose_name='What is the main reason that you have not yet been circumcised?')),
                ('reason_circ_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('future_circ', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, verbose_name='Would you ever consider being circumcised in the future?')),
                ('future_reasons_smc', models.CharField(choices=[('More information about benefits', 'More information about benefits'), ('More information about risks', 'More information about risks'), ('If there was no or minimal pain with circumcision', 'If there was no or minimal pain with circumcision'), ('If circumcision could be done close to my home', 'If circumcision could be done close to my home'), ('If the kgosi recommended circumcision for all men', 'If the kgosi recommended circumcision for all men'), ('If I received time off work to recover from circumcision', 'If I received time off work to recover from circumcision'), ('If my sexual partner encouraged me', 'If my sexual partner encouraged me'), ('If one or both of my parents encouraged me', 'If one or both of my parents encouraged me'), ('If my friends encouraged me', 'If my friends encouraged me'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=75, null=True, verbose_name='Which of the following might increase your willingness to be circumcised the most?')),
                ('service_facilities', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=35, null=True, verbose_name='Were you aware that circumcision services are provided free of charge at most health facilities?')),
                ('aware_free', models.CharField(blank=True, choices=[('Radio', 'Radio'), ('Television', 'Television'), ('Friend told me', 'Friend told me'), ('Family told me', 'Family told me'), ('Health worker told me', 'Health worker told me'), ('Kgosi told us', 'Kgosi told us'), ('I heard it at the kgotla', 'I heard it at the kgotla'), ('I read a brochure delivered to my home', 'I read a brochure delivered to my home'), ('I read it in the newspaper', 'I read it in the newspaper'), ('Heard it at a community event', 'Heard it at a community event'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=85, null=True, verbose_name='Where did you learn that circumcision services were available free at most health facilities?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Uncircumcised',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HistoricalViralLoadResult',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sample_id', models.CharField(db_index=True, editable=False, help_text='Aliquot identifier', max_length=25, verbose_name='Aliquot Identifier')),
                ('study_site', models.CharField(max_length=10)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(default='--', help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, verbose_name='Clinician initial')),
                ('collection_datetime', models.DateTimeField(verbose_name='The datetime sample was drawn')),
                ('received_datetime', models.DateTimeField(verbose_name='The datetime sample was received')),
                ('test_datetime', models.DateTimeField(verbose_name='Test datetime')),
                ('assay_date', models.DateField(verbose_name='Assay date')),
                ('result_value', models.IntegerField(help_text='copies/ml', verbose_name='Result Value')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('validation_datetime', models.DateTimeField(verbose_name='Datetime result was reported')),
                ('assay_performed_by', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Assay performed by')),
                ('validated_by', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Validated by')),
                ('validation_reference', models.CharField(db_index=True, help_text='Validation reference', max_length=25, verbose_name='Validation reference')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Viral Load Result',
                'ordering': ('-history_date', '-history_id'),
            },
        ),
        migrations.CreateModel(
            name='HivCareAdherence',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('first_positive', models.DateField(blank=True, help_text='Note: If participant does not want to answer, leave blank. If participant is unable to estimate date, leave blank.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When was your first positive HIV test result?')),
                ('medical_care', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text="if 'YES', answer HIV medical care section", max_length=25, null=True, verbose_name='Have you ever received HIV-related medical or clinical care, for such things as a CD4 count (masole), IDCC/ PMTCT registration, additional clinic-based counseling?')),
                ('no_medical_care', models.CharField(blank=True, choices=[('Did not feel sick', 'Did not feel sick'), ('Did not know I should get HIV care', 'Did not know I should get HIV care'), ('Did not have time due to work responsibilities', 'Did not have time due to work responsibilities'), ('Did not have time due to family/childcare responsibilities', 'Did not have time due to family/childcare responsibilities'), ('Transportation costs', 'Transportation costs'), ('Was afraid of someone (friends/family) seeing me at the HIV clinic', 'Was afraid of someone (friends/family) seeing me at the HIV clinic'), ('Traditional healer advised against going', 'Traditional healer advised against going'), ('Religious beliefs', 'Religious beliefs'), ('Cultural beliefs', 'Cultural beliefs'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=70, null=True, verbose_name='What is the main reason you have not received HIV-related medical or clinical care?')),
                ('no_medical_care_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('ever_recommended_arv', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Have you ever been recommended by a doctor/nurse or other healthcare worker to start antiretroviral therapy (ARVs), a combination of medicines to treat your HIV infection? [common medicines include: combivir, truvada, atripla, nevirapine]')),
                ('ever_taken_arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Have you ever taken any antiretroviral therapy (ARVs) for your HIV infection? [For women: Do not include treatment that you took during pregnancy to protect your baby from HIV]')),
                ('why_no_arv', models.CharField(blank=True, choices=[('Did not feel sick', 'Did not feel sick'), ('Was afraid treatment would make me feel bad/sick', 'Was afraid treatment  would make me feel bad/sick'), ('Difficulty finding someone to go with me for counseling (mopati)', 'Difficulty finding someone to go with me for counseling (mopati)'), ('Hard due to work responsibilities', 'Hard due to work responsibilities'), ('Hard due to family/childcare responsibilities', 'Hard due to family/childcare responsibilities'), ('Transportation costs', 'Transportation costs'), ('Was afraid of someone (friends/family) seeing me at the HIV clinic', 'Was afraid of someone (friends/family) seeing me at the HIV clinic'), ('Sexual partner advised against taking', 'Sexual partner advised against taking'), ('Family or friends advised against taking', 'Family or friends advised against taking'), ('Traditional healer advised against taking', 'Traditional healer advised against taking'), ('Religious beliefs', 'Religious beliefs'), ('Cultural beliefs', 'Cultural beliefs'), ('High CD4', 'High CD4'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=75, null=True, verbose_name='What was the main reason why you have not started ARVs?')),
                ('why_no_arv_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('first_arv', models.DateField(blank=True, help_text='Note: If participant does not want to answer,leave blank.  If participant is unable to estimate date, leave blank.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When did you first start taking antiretroviral therapy (ARVs)?')),
                ('on_arv', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='If yes, need to answer next two questions.', max_length=25, null=True, verbose_name='Are you currently taking antiretroviral therapy (ARVs)?')),
                ('clinic_receiving_from', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='Which clinic facility are you already receiving therapy from?')),
                ('next_appointment_date', models.DateField(blank=True, default=None, null=True, verbose_name='When is your next appointment at this facility?')),
                ('arv_stop_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name="When did you stop taking ARV's?")),
                ('arv_stop', models.CharField(blank=True, choices=[('Did not feel they were helping', 'Did not feel they were helping'), ('ARVs made me feel bad or sick', 'ARVs made me feel bad or sick'), ('Difficulty finding someone to go with me for counseling (mopati)', 'Difficulty finding someone to go with me for counseling (mopati)'), ('Hard due to work responsibilities', 'Hard due to work responsibilities'), ('Hard due to family/childcare responsibilities', 'Hard due to family/childcare responsibilities'), ('Doctor or nurse at clinic told me to stop', 'Doctor or nurse at clinic told me to stop'), ('Transportation costs', 'Transportation costs'), ('Was afraid of someone (friends/family) seeing me at the HIV clinic', 'Was afraid of someone (friends/family) seeing me at the HIV clinic'), ('Sexual partner advised against taking', 'Sexual partner advised against taking'), ('Family or friends advised against taking', 'Family or friends advised against taking'), ('Traditional healer advised against taking', 'Traditional healer advised against taking'), ('Religious beliefs', 'Religious beliefs'), ('Cultural beliefs', 'Cultural beliefs'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=80, null=True, verbose_name='What was the main reason why you stopped taking ARVs?')),
                ('arv_stop_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('adherence_4_day', models.CharField(blank=True, choices=[('Zero', 'Zero days'), ('One day', 'One day'), ('Two days', 'Two days'), ('Three days', 'Three days'), ('Four days', 'Four days'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During the past 4 days, on how many days have you missed taking all your doses of antiretroviral therapy (ART)?')),
                ('adherence_4_wk', models.CharField(blank=True, choices=[('Very poor', 'Very poor'), ('Poor', 'Poor'), ('Fair', 'Fair'), ('Good', 'Good'), ('Very good', 'Very good'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Thinking about the past 4 weeks, on average, how would you rate your ability to take all your medications as prescribed?')),
                ('arv_evidence', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, null=True, verbose_name='Is there evidence [OPD card, tablets, masa number] that the participant is on therapy?')),
            ],
            options={
                'verbose_name': 'HIV care & Adherence',
                'verbose_name_plural': 'HIV care & Adherence',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivHealthCareCosts',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_medical_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='Have you ever received HIV related medical/clinical care? ')),
                ('reason_no_care', models.CharField(blank=True, choices=[('not thinking about HIV care', 'I am not thinking about HIV related medical/clinical care at this time'), ('I am not ready to start', 'HIV related medical/clinical care for my HIV infection is important to me but I am not ready to start it yet'), ('not yet tried to find a doctor', 'I have thought about starting HIV related medical/clinical care but have not yet tried to find a doctor or clinic'), ('not yet tried to make an appointment', 'I have found a doctor or clinic for HIV related medical/clinical care but have not yet tried to make an appointment'), ('no been successful yet', 'I have tried to obtain HIV related medical/clinical care from a doctor or clinic but have not been successful yet'), ('I have an appointment for HIV care', 'I have an appointment for HIV related medical/clinical care for my HIV infection but have not been for it yet'), ("don't know where to go", "I don't know where to go for HIV related medical/clinical care"), ('I do not have the money', 'I do not have the money for HIV related medical/clinical care'), ('DWTA', "Don't want to answer")], max_length=115, null=True, verbose_name='If you have never received HIV related medical/clinical care, why not? ')),
                ('place_care_received', models.CharField(choices=[('None', 'None'), ('Government dispensary', 'Government dispensary'), ('Government health center', 'Government health center'), ('Government hospital', 'Government hospital'), ('Christian/mission health center', 'Christian/mission health center'), ('Islamic health center', 'Islamic health center'), ('Private health center for all illnesses', 'Private health center for all illnesses'), ('Private health center for HIV/AIDS', 'Private health center for HIV/AIDS'), ('Mobile services', 'Mobile services'), ('Plantation health center', 'Plantation health center'), ('NGO clinic', 'NGO clinic'), ('DWTA', "Don't want to answer")], default='None', max_length=40, null=True, verbose_name='Where do you receive most of your HIV related health care? ')),
                ('care_regularity', models.CharField(choices=[('0 times', '0 times'), ('1 time', '1 time'), ('2 times', '2 times'), ('3 times', '3 times'), ('4 times', '4 times'), ('5 times', '5 times'), ('6-10 times', '6-10 times'), ('More than 10 times', 'More than 10 times'), ('DWTA', "Don't want to answer")], default='0 times', help_text='Do not include medicine re-fill visits.', max_length=20, null=True, verbose_name='In the past 3 months, how many times did you have clinic visits to see a health care worker, a nurse, or doctor? ')),
                ('doctor_visits', models.CharField(choices=[('always', 'All of the time (always)'), ('almost always', 'Most of the time (almost always)'), ('sometimes', 'Some of the time (sometimes)'), ('rarely', 'Almost none of the time (rarely)'), ('never', 'None of the time (never)'), ('DWTA', "Don't want to answer")], default='never', max_length=32, null=True, verbose_name='In the last 3 months, how often did someone take you to the doctor? ')),
            ],
            options={
                'verbose_name': 'HIV health care costs',
                'verbose_name_plural': 'HIV health care costs',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivLinkageToCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('kept_appt', models.CharField(choices=[('Yes', 'Yes, kept appointment'), ('No_refered_other_clinic', 'No but attended a visit at the HIV care clinic to which they were referred on another date'), ('No_other_clinic', 'No but attended a visit at a different HIV clinic'), ('diff_clininc', 'I went to a different clinic'), ('No', 'No but tried to attend an HIV care clinic and left before I saw a healthcare provider'), ('No', 'I have not been to any HIV care clinic [skip to #3]')], max_length=50, null=True, verbose_name='We last spoke with you on last_visit_date and scheduled an appointment for you in an HIV care clinic on last_appt_date. Did you keep that appointment?')),
                ('diff_clininc', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='If went to a different clinic, specify clinic:')),
                ('left_clininc_datetime', models.DateField(blank=True, default=None, null=True, verbose_name='If you tried to attend an HIV care clinic and left before You saw a healthcare provider specify the date?')),
                ('clinic_first_datetime', models.DateField(blank=True, default=None, null=True, verbose_name='What was the date when you first went to the community_name clinic?')),
                ('evidence_type_clinic', models.CharField(choices=[('self_report_only', 'Self-Report Only'), ('opr_card', 'OPD Card'), ('clinic_paperwork', 'Clinic paperwork'), ('other', 'Other ')], max_length=50, null=True, verbose_name='Type of Evidence:')),
                ('evidence_type_clinic_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('recommended_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No [SKIP TO #10]', max_length=50, null=True, verbose_name='[IF PERSON WAS ART NAIVE OR A DEFAULTER AT LAST INTERVIEW] Since the last time we spoke with you on last_visit_date, has a doctor/nurse or other healthcare worker recommended that you start antiretroviral therapy (ARVs), a combination of medicines to treat your HIV infection?')),
                ('reason_recommended', models.CharField(blank=True, choices=[('low_cd4', 'Low CD4'), ('high_viral_load', 'High viral load'), ('pregnancy_breastfeeding', 'Pregnancy or breastfeeding'), ('tuberculosis', 'Tuberculosis'), ('cancer', 'Cancer'), ('dnt_knw', 'Do not know')], max_length=50, null=True, verbose_name='If yes, do you know why ARVs were recommended?')),
                ('reason_recommended_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('startered_therapy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If NO [SKIP TO #9]', max_length=50, null=True, verbose_name='[IF PERSON WAS ART NAIVE OR A DEFAULTER AT LAST INTERVIEW] Did you [start/restart] ART since we spoke with you on last_visit_date?')),
                ('startered_therapy_date', models.DateField(blank=True, default=None, null=True, verbose_name='When did you [start/restart] ART?')),
                ('start_therapy_clininc', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='Which clinic facility did you [start/restart] ART at?')),
                ('start_therapy_clininc_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('not_refered_clininc', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='[If Clinic is not the referred clinic] In which community is this clinic located')),
                ('evidence_not_refered', models.CharField(choices=[('self_report_only', 'Self-Report Only'), ('opr_card', 'OPD Card'), ('clinic_paperwork', 'Clinic paperwork'), ('other', 'Other ')], max_length=50, null=True, verbose_name='Type of Evidence:')),
                ('evidence_not_refered_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
            ],
            options={
                'verbose_name': 'Hiv Linkage To Care',
                'verbose_name_plural': 'Hiv Linkage To Care',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivMedicalCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('first_hiv_care_pos', models.DateField(blank=True, help_text='Note: If participant does not want to answer, leave blank.  If participant is unable to estimate date, leave blank.', max_length=25, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When did you first receive HIV-related medical care for such things as a CD4 count (masole), IDCC/ PMTCT registration, additional clinic-based counseling?')),
                ('last_hiv_care_pos', models.DateField(blank=True, help_text='Note: If participant does not want to answer,leave blank. If participant is unable to estimate date, leave blank.', max_length=25, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='When did you last (most recently) receive HIV-related medical care for such things as a CD4 count (masole), IDCC/ PMTCT registration, additional clinic-based counseling?')),
                ('lowest_cd4', models.CharField(choices=[('0-49', '0-49'), ('50-99', '50-99'), ('100-199', '100-199'), ('200-349', '200-349'), ('350-499', '350-499'), ('500 or more', '500 or more'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='Assist the participant by helping review their outpatient cards if they are available.', max_length=25, verbose_name='What was your lowest CD4 (masole) count that was ever measured?')),
            ],
            options={
                'verbose_name': 'HIV Medical care',
                'verbose_name_plural': 'HIV Medical care',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivResult',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_result', models.CharField(choices=[('POS', 'HIV Positive (Reactive)'), ('NEG', 'HIV Negative (Non-reactive)'), ('IND', 'Indeterminate'), ('Declined', 'Participant declined testing'), ('Not performed', 'Test could not be performed (e.g. supply outage, technical problem)')], help_text='If participant declined HIV testing, please select a reason below.', max_length=50, verbose_name="Today's HIV test result")),
                ('hiv_result_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name="Today's HIV test result date and time")),
                ('blood_draw_type', models.CharField(choices=[('capillary', 'Capillary'), ('venous', 'Venous'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='What type of blood was used for the test')),
                ('insufficient_vol', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Note: if capillary blood and less than 350uL, an additional venous blood draw is required', max_length=15, verbose_name='If capillary, is the volume less than 350uL?')),
                ('why_not_tested', models.CharField(blank=True, choices=[('I already knew I am HIV positive', 'I already knew I am HIV positive'), ('I recently tested', 'I recently tested (I know my status)'), ("I didn't believe I was at risk of getting HIV", "I didn't believe I was at risk of getting HIV"), ('I am afraid to find out the result', 'I am afraid to find out the result'), ('I am afraid of what others would think of me', 'I am afraid of what others would think of me'), ('Family/friends did not want me to get an HIV test', 'Family/friends did not want me to get an HIV test'), ("I didn't have time due to work", "I didn't have time due to work"), ("I didn't have time due to family obligations", "I didn't have time due to family obligations"), ('My sexual partner did not want me to get an HIV test', 'My sexual partner did not want me to get an HIV test'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='Note: Only asked of individuals declining HIV testing during this visit.', max_length=65, null=True, verbose_name="What was the main reason why you did not want HIV testing as part of today's visit?")),
            ],
            options={
                'verbose_name': "Today's HIV Result",
                'verbose_name_plural': "Today's HIV Result",
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivResultDocumentation',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('result_date', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='What is the recorded date of this previous HIV test (or of the document that provides supporting evidence of HIV infection)?')),
                ('result_recorded', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('unknown', 'Unknown')], default='POS', editable=False, help_text='value should always be POS as the rule group only shows this form if verbal_hiv_result is POS and have indirect documentation.', max_length=30, verbose_name='What is the recorded HIV status indicated by this additional document?')),
                ('result_doc_type', models.CharField(choices=[('Tebelopele', 'Tebelopele'), ('Lab result form', 'Lab result form'), ('ART Prescription', 'ART Prescription'), ('PMTCT Prescription', 'PMTCT Prescription'), ('Record of CD4 count', 'Record of CD4 count'), ('OTHER', 'Other OPD card or ANC card documentation')], max_length=35, verbose_name='What is the type of document used?')),
            ],
            options={
                'verbose_name': 'HIV result documentation',
                'verbose_name_plural': 'HIV result documentation',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivTested',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_pills', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Have you ever heard about treatment for HIV with pills called antiretroviral therapy or ARVs [or HAART]?')),
                ('arvs_hiv_test', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Do you believe that treatment for HIV with antiretroviral therapy (or ARVs) can help HIV-positive people to live longer?')),
                ('num_hiv_tests', models.IntegerField(null=True, verbose_name='How many times before today have you had an HIV test?')),
                ('where_hiv_test', models.CharField(choices=[('Tebelopele VCT center', 'Tebelopele VCT center'), ('Antenatal care at healthcare facility', 'Antenatal care at healthcare facility (including private clinics)'), ('Other (not antenatal care) at healthcare facility', 'Other (not antenatal care) at healthcare facility (including private clinics)'), ('In my house as part of door-to-door services', 'In my house as part of door-to-door services'), ('In a mobile tent or vehicle in my neighborhood', 'In a mobile tent or vehicle in my neighborhood'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=85, verbose_name='Where were you tested for HIV, the last [most recent] time you were tested?')),
                ('where_hiv_test_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('why_hiv_test', models.CharField(choices=[('I was worried I might have HIV and wanted to know my status', 'I was worried I might have HIV and wanted to know my status'), ('I heard from someone I trust that it is important for me to get tested for HIV ', 'I heard from someone I trust that it is important for me to get tested for HIV '), ('I was at a health facility where the doctor/nurse recommended I get tested for HIV during the same visit', 'I was at a health facility where the doctor/nurse recommended I get tested for HIV during the same visit'), ('I read information on a brochure/flier that it is important for me to get tested for HIV', 'I read information on a brochure/flier that it is important for me to get tested for HIV'), ('OTHER', 'Other'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=105, null=True, verbose_name="Not including today's HIV test, which of the following statements best describes the reason you were tested the last [most recent] time you were tested before today?")),
            ],
            options={
                'verbose_name': 'HIV Tested',
                'verbose_name_plural': 'HIV Tested',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivTestingHistory',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('has_tested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you ever been tested for HIV before?')),
                ('when_hiv_test', models.CharField(blank=True, choices=[('In the last month', 'In the last month'), ('1 to 5 months ago', '1 to 5 months ago'), ('6 to 12 months ago', '6 to 12 months ago'), ('more than 12 months ago', 'more than 12 months ago'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='(verbal response)', max_length=25, null=True, verbose_name='When was the last [most recent] time you were tested for HIV?')),
                ('has_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer"), ('record refusal', 'Participant does not want to provide record')], help_text='if no card available for viewing, proceed to next question', max_length=45, null=True, verbose_name='Is a record of last [most recent] HIV test [OPD card, Tebelopele, other] available to review?')),
                ('verbal_hiv_result', models.CharField(blank=True, choices=[('POS', 'HIV Positive'), ('NEG', 'HIV Negative'), ('IND', 'Indeterminate'), ('UNK', 'I am not sure'), ('DWTA', "Don't want to answer")], help_text='(verbal response)', max_length=30, null=True, verbose_name='Please tell me the results of your last [most recent] HIV test?')),
                ('other_record', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='This documentation refers to: PMTCT prescription, ART, CD4 count record, lab result for.. etc', max_length=3, null=True, verbose_name='Do you have any other available documentation of positive HIV status?')),
            ],
            options={
                'verbose_name': 'HIV Testing History',
                'verbose_name_plural': 'HIV Testing History',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivTestReview',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_test_date', models.DateField(help_text='Obtain this information from the card the participant presents to you.', validators=[edc_base.model.validators.date.date_not_future], verbose_name='What was the recorded date of the last HIV test?')),
                ('recorded_hiv_result', models.CharField(choices=[('POS', 'Positive'), ('NEG', 'Negative'), ('IND', 'Indeterminate'), ('unknown', 'Unknown')], help_text='If the participant and written record differ, the result from the written record should be recorded.', max_length=30, verbose_name='What was the recorded HIV test result?')),
            ],
            options={
                'verbose_name': 'HIV Test Review',
                'verbose_name_plural': 'HIV Test Review',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HivUntested',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('hiv_pills', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Have you ever heard about treatment for HIV with pills called antiretroviral therapy or ARVs [or HAART]?')),
                ('arvs_hiv_test', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Do you believe that treatment for HIV with antiretroviral therapy (or ARVs) can help HIV-positive people to live longer?')),
                ('why_no_hiv_test', models.CharField(choices=[('I already knew I am HIV positive', 'I already knew I am HIV positive'), ('I recently tested', 'I recently tested (I know my status)'), ("I didn't believe I was at risk of getting HIV", "I didn't believe I was at risk of getting HIV"), ('I am afraid to find out the result', 'I am afraid to find out the result'), ('I am afraid of what others would think of me', 'I am afraid of what others would think of me'), ('Family/friends did not want me to get an HIV test', 'Family/friends did not want me to get an HIV test'), ("I didn't have time due to work", "I didn't have time due to work"), ("I didn't have time due to family obligations", "I didn't have time due to family obligations"), ('My sexual partner did not want me to get an HIV test', 'My sexual partner did not want me to get an HIV test'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=55, null=True, verbose_name='If you were not tested for HIV in the 12 months prior to today, what is the main reason why not?')),
            ],
            options={
                'verbose_name': 'HIV Untested',
                'verbose_name_plural': 'HIV Untested',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HospitalAdmission',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('admission_nights', models.IntegerField(blank=True, help_text='Note:If participant does not want to answer, leave blank', null=True, verbose_name='How many total nights did you spend in the hospital in the past 3 months? ')),
                ('reason_hospitalized', models.CharField(choices=[('HIV-related care', 'HIV-related care, including TB and other opportunistic infections'), ('Pregnancy', 'Pregnancy-related care, including delivery'), ('Injuries', 'Injuries or accidents'), ('Chronic disease', 'Chronic disease related care, including high blood pressure, diabetes, cancer, mental illness'), ('Other', 'Other'), ('DWTA', "Don't want to answer"), ('None', 'None')], default='None', help_text=' ', max_length=95, null=True, verbose_name='What was the primary reason for the most recent hospitalization in the past 3 months?')),
                ('facility_hospitalized', models.CharField(blank=True, help_text=' ', max_length=30, null=True, verbose_name='For this most recent hospitalization, where were you hospitalized? ')),
                ('nights_hospitalized', models.IntegerField(blank=True, help_text=' ', null=True, verbose_name='For this most recent hospitization, how many nights total did you spend in the hospital? ')),
                ('healthcare_expense', models.DecimalField(blank=True, decimal_places=2, help_text='Pula', max_digits=10, null=True, verbose_name='How much did you have to pay to the healthcare provider for the entire stay, including any medicines? ')),
                ('travel_hours', models.CharField(choices=[('None', 'None'), ('Under 0.5 hour', 'Under 0.5 hour'), ('0.5 to under 1 hour', '0.5 to under 1 hour'), ('1 to under 2 hours', '1 to under 2 hours'), ('2 to under 3 hours', '2 to under 3 hours'), ('More than 3 hours', 'More than 3 hours'), ('DWTA', "Don't want to answer")], default='None', help_text=' ', max_length=20, null=True, verbose_name='For this most recent hospitalization, how long did it take you to get to the hospital? ')),
                ('total_expenses', models.DecimalField(blank=True, decimal_places=2, help_text='Note:If participant does not want to answer, leave blank. Currency is Pula', max_digits=10, null=True, verbose_name='For this most recent hospitalization, how much did you have to pay for transport, food and accommodation, including fuel if you used your own car? ')),
                ('hospitalization_costs', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], help_text=' ', max_length=17, null=True, verbose_name='For this most recent hospitalization, were any of these costs by covered by anyone else, such as your medical aid or employer? ')),
            ],
            options={
                'verbose_name': 'Hospital Admission',
                'verbose_name_plural': 'Hospital Admission',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='LabourMarketWages',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('employed', models.CharField(choices=[('government sector', 'Yes, In the government sector'), ('private sector', 'Yes, in the private sector'), ('self-employed working on my own', 'Yes, self-employed working on my own'), ('self-employed with own employees', 'Yes, self-employed with own employees'), ('not working', 'No, not working'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='Are you currently employed? ')),
                ('occupation', models.CharField(blank=True, choices=[('Farmer', 'Farmer (own land)'), ('Farm worker', 'Farm worker (work on employers land)'), ('Domestic Worker', 'Domestic Worker'), ('Tavern/Bar/Entertainment', 'Work at Tavern/Bar/Entertainment Venue'), ('Mining', 'Mining'), ('Tourism', 'Tourism/game parks'), ('Informal vendors', 'Informal vendors'), ('Commercial sex work', 'Commercial sex work'), ('Transport (e.g., trucker)', 'Transport (e.g., trucker)'), ('Factory worker', 'Factory worker'), ('Informal vendors', 'Informal vendors'), ('Clerical and office work', 'Clerical and office work'), ('Small business/shop work', 'Small business/shop work'), ('Professional', 'Professional'), ('Fishing', 'Fishing'), ('Uniformed services', 'Uniformed services'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], help_text='main source of income.', max_length=40, null=True, verbose_name='What is your primary occupation?')),
                ('occupation_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('job_description_change', models.IntegerField(blank=True, help_text='Note: Enter number of times. If participant does not want to answer, leave blank', null=True, verbose_name='In the past 3 months, how many times have you changed your job? For example, changed your type of work or your employer. ')),
                ('days_worked', models.IntegerField(blank=True, help_text='Note: Enter number of times. If participant does not want to answer, leave blank', null=True, verbose_name='In the past month, how many days did you work?. ')),
                ('monthly_income', models.CharField(blank=True, choices=[('None', 'No income'), ('1-199 pula', '1-199 pula'), ('200-499 pula', '200-499 pula'), ('500-999 pula', '500-999 pula'), ('1000-4999 pula', '1000-4999 pula'), ('5000-10,000 pula', '5000-10,000 pula'), ('More than 10,000 pula', 'More than 10,000 pula'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='In the past month, what was your income? ')),
                ('salary_payment', models.CharField(blank=True, choices=[('Fixed salary', 'Fixed salary'), ('Paid daily', 'Paid daily'), ('Paid hourly', 'Paid hourly'), ('DWTA', "Don't want to answer")], max_length=20, null=True, verbose_name='How were you paid for your work? ')),
                ('household_income', models.CharField(choices=[('None', 'None'), ('1-200 pula', '1-200 pula'), ('200-499 pula', '200-499 pula'), ('500-999 pula', '500-999 pula'), ('1000-4999 pula', '1000-4999 pula'), ('5000-10,000 pula', '5000-10,000 pula'), ('10,0000-20,000 pula', '10,0000-20,000 pula'), ('More than 20,000 pula', 'More than 20,000 pula'), ('I am not sure', 'I am not sure'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='In the past month, what was the income of your household? ')),
                ('other_occupation', models.CharField(choices=[('None', 'None'), ('Studying', 'Studying'), ('Doing housework', 'Doing housework'), ('Looking for work', 'Looking for work'), ('Doing nothing (not looking for paid work)', 'Doing nothing (not looking for paid work)'), ('Retired/old age', 'Retired/old age'), ('Pregnant or recently pregnant', 'Pregnant or recently pregnant'), ('Sick or injured', 'Sick or injured'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], default='None', max_length=45, null=True, verbose_name='If you are not currently doing anything to earn money, then are you: ')),
                ('other_occupation_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('govt_grant', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='Do you receive any government grant for yourself or on behalf of someone else? ')),
                ('nights_out', models.IntegerField(blank=True, help_text='Note: Enter number of nights. If participant does not want to answer, leave blank', null=True, verbose_name='In the past month, how many nights did you spend away from home?. ')),
                ('weeks_out', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 12 months, have you spent more than 2 weeks away? ')),
                ('days_not_worked', models.IntegerField(blank=True, help_text='Note: Enter number of days including zero. If participant does not want to answer,leave blank', null=True, verbose_name='How many days have you been prevented from working because of sickness or visits to seek healthcare in the last 3 months. ')),
                ('days_inactivite', models.IntegerField(blank=True, help_text='Note: Enter number of days including zero. If participant does not want to answer, leave blank', null=True, verbose_name='How many days have you been prevented by illness from doing the things you normally do (studying, housework etc.) because of sickness or visits to seek healthcare in the last 3 months? ')),
            ],
            options={
                'verbose_name': 'Labour Market & Lost Wages',
                'verbose_name_plural': 'Labour Market & Lost Wages',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MedicalDiagnoses',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('heart_attack_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='Please review the available OPD card or other medical records, for all participants', max_length=25, null=True, verbose_name='Is a record (OPD card, discharge summary) of a heart disease or stroke diagnosis available to review?')),
                ('cancer_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='Please review the available OPD card or other medical records, for all participants', max_length=25, null=True, verbose_name='Is a record (OPD card, discharge summary) of a cancer diagnosis available to review?')),
                ('tb_record', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], help_text='Please review the available OPD card or other medical records, for all participants', max_length=25, null=True, verbose_name='Is a record (OPD card, discharge summary, TB card) of a tuberculosis infection available to review?')),
                ('diagnoses', models.ManyToManyField(help_text='tick all that apply', to='bcpp_list.Diagnoses', verbose_name='Do you recall or is there a record of having any of the following serious illnesses?')),
            ],
            options={
                'verbose_name': 'Medical Diagnoses',
                'verbose_name_plural': 'Medical Diagnoses',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='NonPregnancy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('last_birth', models.DateField(blank=True, null=True, verbose_name='When did you last (most recently) give birth?')),
                ('anc_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) did you go for antenatal care?')),
                ('hiv_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], help_text='If respondent was aware that she was HIV-positive prior to last pregnancy', max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) were you tested for HIV?')),
                ('preg_arv', models.CharField(blank=True, choices=[('Yes, AZT (single drug, twice a day)', 'Yes, AZT (single drug, twice a day)'), ('Yes, HAART ', 'Yes, HAART [multiple drugs like Atripla, Truvada, or Combivir taken once or twice a day]'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer"), ('No', "No ARV's")], max_length=95, null=True, verbose_name='Were you given antiretroviral medications to protect the baby?')),
                ('more_children', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, verbose_name='Do you wish to have a child now or in the future?')),
            ],
            options={
                'verbose_name': 'Non Pregnancy',
                'verbose_name_plural': 'Non Pregnancy',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OutpatientCare',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('govt_health_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care at a Government Primary Health Clinic/Post? Not including any visits for which you were hospitalized. ')),
                ('dept_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care at a Hospital Outpatient Department, including Govt, private and church/mission hospitals? Not including any visits for which you were hospitalized. ')),
                ('prvt_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care from a Private Doctor? ')),
                ('trad_care', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, did you seek care from a Traditional or Faith Healer? ')),
                ('care_visits', models.IntegerField(blank=True, help_text='Note:If participant does not want to answer, leave blank.', null=True, verbose_name='In the last 3 months, how many total outpatient visits have you to all of the above places? ')),
                ('facility_visited', models.CharField(choices=[('Government Clinic/Post', 'Government Primary Health Clinic/Post'), ('Chemist/Pharmacy', 'Chemist/Pharmacy'), ('Hospital Outpatient Department', 'Hospital Outpatient Department (including government and private)'), ('Private Doctor', 'Private Doctor'), ('Traditional or Faith Healer', 'Traditional or Faith Healer'), ('No visit in past 3 months', 'No visit in past 3 months'), ('DWTA', "Don't want to answer")], default='No visit in past 3 months', help_text="if 'NOT Government Primary Health Clinic/Post' go to question Q9. ", max_length=65, verbose_name='For the most recent outpatient medical care visit in the past 3 months, which type of facility did you visit? ')),
                ('specific_clinic', models.CharField(blank=True, help_text='Note:If participant does not want to answer, leave blank', max_length=50, null=True, verbose_name='For this most recent visit to a Government Primary Health Clinic/Post, which clinic did you visit? ')),
                ('care_reason', models.CharField(choices=[('HIV-related care', 'HIV-related care, including TB and other opportunistic infections'), ('Pregnancy', 'Pregnancy-related care, including delivery'), ('Injuries', 'Injuries or accidents'), ('Chronic disease', 'Chronic disease related care, including high blood pressure, diabetes, cancer, mental illness'), ('Other', 'Other'), ('DWTA', "Don't want to answer"), ('None', 'None')], default='None', max_length=95, null=True, verbose_name='For this most recent medical care visit, what was the primary reason you sought care? ')),
                ('care_reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('outpatient_expense', models.DecimalField(blank=True, decimal_places=2, help_text='If participant has not paid anything for outpatient medical care, please enter 0.00', max_digits=10, null=True, verbose_name='For this most recent outpatient medical care visit, how much did you have to pay to the health care provider, including any medicines?')),
                ('travel_time', models.CharField(choices=[('None', 'None'), ('Under 0.5 hour', 'Under 0.5 hour'), ('0.5 to under 1 hour', '0.5 to under 1 hour'), ('1 to under 2 hours', '1 to under 2 hours'), ('2 to under 3 hours', '2 to under 3 hours'), ('More than 3 hours', 'More than 3 hours'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='For this most recent outpatient medical care visit, how long did it take you to get to the clinic? ')),
                ('transport_expense', models.DecimalField(blank=True, decimal_places=2, help_text='If participant has not paid anything for outpatient medical care, please enter 0.00', max_digits=10, null=True, verbose_name='For this most recent outpatient medical care visit, how much did you have to pay for transport, food and accommodation? [include cost for fuel if using a private car] ')),
                ('cost_cover', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, null=True, verbose_name='For this most recent outpatient medical care visit, were any of these costs by covered by anyone else, such as your medical aid or employer? ')),
                ('waiting_hours', models.CharField(choices=[('None', 'None'), ('Under 0.5 hour', 'Under 0.5 hour'), ('0.5 to under 1 hour', '0.5 to under 1 hour'), ('1 to under 2 hours', '1 to under 2 hours'), ('2 to under 3 hours', '2 to under 3 hours'), ('More than 3 hours', 'More than 3 hours'), ('DWTA', "Don't want to answer")], default='None', max_length=25, null=True, verbose_name='For this most recent outpatient medical care visit, how long did you have to wait before you were seen, from when you arrived at the facility? ')),
            ],
            options={
                'verbose_name': 'Outpatient care',
                'verbose_name_plural': 'Outpatient care',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Participation',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('full', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=15, verbose_name='Has the participant agreed to fully participate in BHS')),
                ('participation_type', models.CharField(choices=[('Not Applicable', 'Not Applicable'), ('Changed mind midway', 'Participant changed mind')], max_length=30, verbose_name='What type of partial participation did the client choose?')),
            ],
            options={
                'verbose_name': 'Participation',
                'verbose_name_plural': 'Participation',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Pima',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('pima_today', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was a PIMA CD4 done today?')),
                ('pima_today_other', models.CharField(blank=True, choices=[('Participant Declined', 'Participant Declined'), ('Multiple PIMA malfunction', 'Multiple PIMA malfunction'), ('Failed Blood Collection', 'Failed Blood Collection'), ('OTHER', 'Other, specify:')], max_length=50, null=True, verbose_name='If no PIMA CD4 today, please explain why')),
                ('pima_today_other_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('pima_id', models.CharField(blank=True, help_text='type this id directly from the machine as labeled', max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='PIMA ID must be a two digit number.', regex='\\d+')], verbose_name='PIMA CD4 machine ID?')),
                ('cd4_datetime', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='PIMA CD4 Date and time')),
                ('cd4_value', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3000)], verbose_name='PIMA CD4 count')),
            ],
            options={
                'verbose_name': 'PIMA CD4 count',
                'verbose_name_plural': 'PIMA CD4 count',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PimaVl',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('quota_pk', models.CharField(blank=True, max_length=36, null=True)),
                ('request_code', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=datetime.datetime.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('poc_vl_type', models.CharField(choices=[('mobile setting', 'Mobile Setting'), ('household setting', 'Household Setting')], default='mobile setting', max_length=150, verbose_name='Type mobile or household setting')),
                ('poc_vl_today', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was a POC viral load done today?')),
                ('poc_vl_today_other', models.CharField(blank=True, choices=[('Participant Declined', 'Participant Declined'), ('Multiple PIMA malfunction', 'Multiple PIMA malfunction'), ('Failed Blood Collection', 'Failed Blood Collection'), ('OTHER', 'Other, specify:')], max_length=50, null=True, verbose_name='If no POC viral load today, please explain why')),
                ('poc_today_vl_other_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('pima_id', models.CharField(blank=True, help_text='type this id directly from the machine as labeled', max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='POC viral load ID must be a two digit number.', regex='\\d+')], verbose_name='POC viral load machine ID?')),
                ('vl_value_quatifier', models.CharField(choices=[('greater_than', 'Greater Than'), ('equal_to', 'Equal To'), ('less_than', 'Less Than'), ('OTHER', 'Other, specify:')], max_length=20, verbose_name='Select a quantifier for the value of the result')),
                ('poc_vl_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='POC viral load count')),
                ('time_of_test', models.DateTimeField(blank=True, null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Test Date and time')),
                ('time_of_result', models.DateTimeField(blank=True, help_text='Time it takes to obtain viral load result.', null=True, validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Result Date and time')),
                ('easy_of_use', models.CharField(choices=[('easy', 'Easy'), ('Very easy', 'Very Easy'), ('Fairly easy', 'Fairly easy'), ('Difficult', 'Difficult'), ('Very difficult', 'Very difficult')], max_length=200, verbose_name='Ease of use by field operator?')),
                ('stability', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text='Comment (Encryption: AES local)', max_length=250, null=True, verbose_name='Stability')),
            ],
            options={
                'verbose_name': 'POC VL',
                'verbose_name_plural': 'POC VL',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PositiveParticipant',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('internalize_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I think less of myself.')),
                ('internalized_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I have felt ashamed because of having HIV.')),
                ('friend_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I fear that if I disclosed my HIV status to my friends, they would lose respect for me.')),
                ('family_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I fear that if I disclosed my HIV status to my family, they would exclude me from usual family activities.')),
                ('enacted_talk_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People have talked badly about me.')),
                ('enacted_respect_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I have lost respect or standing in the community.')),
                ('enacted_jobs_tigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I have lost a job because of having HIV.')),
            ],
            options={
                'verbose_name': 'Positive Participant',
                'verbose_name_plural': 'Positive Participant',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Pregnancy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('last_birth', models.DateField(blank=True, null=True, verbose_name='When did you last (most recently) give birth?')),
                ('anc_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) did you go for antenatal care?')),
                ('hiv_last_pregnancy', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], help_text='If respondent was aware that she was HIV-positive prior to last pregnancy', max_length=25, null=True, verbose_name='During your last pregnancy (not current pregnancy) were you tested for HIV?')),
                ('preg_arv', models.CharField(blank=True, choices=[('Yes, AZT (single drug, twice a day)', 'Yes, AZT (single drug, twice a day)'), ('Yes, HAART ', 'Yes, HAART [multiple drugs like Atripla, Truvada, or Combivir taken once or twice a day]'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer"), ('No', "No ARV's")], max_length=95, null=True, verbose_name='Were you given antiretroviral medications to protect the baby?')),
                ('anc_reg', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No, but I will go for antenatal care', 'No, but I will go for antenatal care'), ('No and I am not planning on going for antenatal care', 'No and I am not planning on going for antenatal care'), ('DWTA', "Don't want to answer")], max_length=55, null=True, verbose_name='Have you registered for antenatal care?')),
                ('lnmp', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='When was the first day of your last normal menstrual period?')),
            ],
            options={
                'verbose_name': 'Pregnancy',
                'verbose_name_plural': 'Pregnancy',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='QualityOfLife',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('mobility', models.CharField(choices=[('no problems', 'I have no problems in walking about'), ('slight problems', 'I have slight problems in walking about'), ('moderate problems', 'I have moderate problems in walking about'), ('severe problems', 'I have severe problems in walking about'), ('unable to walk', 'I am unable to walk about'), ('DWTA', "Don't want to answer")], max_length=45, verbose_name='Mobility')),
                ('self_care', models.CharField(choices=[('no problems', 'I have no problems washing or dressing myself'), ('slight problems', 'I have slight problems washing or dressing myself'), ('moderate problems', 'I have moderate problems washing or dressing myself'), ('severe problems', 'I have severe problems washing or dressing myself'), ('unable to wash', 'I am unable to wash or dress myself'), ('DWTA', "Don't want to answer")], max_length=65, verbose_name='Self-Care')),
                ('activities', models.CharField(choices=[('no problems', 'I have no problems doing my usual activities'), ('slight problems', 'I have slight problems doing my usual activities'), ('moderate problems', 'I have moderate problems doing my usual activities'), ('severe problems', 'I have severe problems doing my usual activities'), ('unable to', 'I am unable to do my usual activities'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='Usual Activities (e.g. work, study, housework, family or leisure activities)')),
                ('pain', models.CharField(choices=[('no pain', 'I have no pain or discomfort'), ('slight pain', 'I have slight pain or discomfort'), ('moderate pain', 'I have moderate pain or discomfort'), ('severe pain', 'I have severe pain or discomfort'), ('extreme pain', 'I have extreme pain or discomfort'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name='Pain / Discomfort ')),
                ('anxiety', models.CharField(choices=[('not anxious', 'I am not anxious or depressed'), ('slightly anxious', 'I am slightly anxious or depressed'), ('moderately anxious', 'I am moderately anxious or depressed'), ('severely anxious', 'I am severely anxious or depressed'), ('extremely anxious', 'I am extremely anxious or depressed'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='Anxiety / Depression ')),
                ('health_today', models.IntegerField(blank=True, help_text='Note:Interviewer, please record corresponding number in the boxes. If participant does not want to answer, leave blank', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name="We would like to know how good or bad your health is TODAY. This scale is numbered from 0 to 100. 100 means the 'best' health you can imagine. 0 means the 'worst' health you can imagine. Indicate on the scale how your health is TODAY.  ")),
            ],
            options={
                'verbose_name': 'Quality of Life',
                'verbose_name_plural': 'Quality of Life',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RbdDemographics',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('religion_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('ethnic_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('marital_status', models.CharField(choices=[('Single/never married', 'Single/never married'), ('Married', 'Married (common law/civil or customary/traditional)'), ('Divorced/separated', 'Divorced or formally separated'), ('Widowed', 'Widowed'), ('DWTA', "Don't want to answer")], max_length=55, verbose_name='What is your current marital status?')),
                ('num_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (women only)', null=True, verbose_name='WOMEN: How many wives does your husband have (including traditional marriage), including yourself?')),
                ('husband_wives', models.IntegerField(blank=True, help_text='Leave blank if participant does not want to respond. (men only)', null=True, verbose_name='MEN: How many wives do you have, including traditional marriage?')),
                ('ethnic', models.ManyToManyField(help_text='Ask for the original ethnic group', to='bcpp_list.EthnicGroups', verbose_name='What is your ethnic group?')),
                ('live_with', models.ManyToManyField(help_text='[indicate all that apply]', to='bcpp_list.LiveWith', verbose_name='Who do you currently live with ?')),
                ('religion', models.ManyToManyField(to='bcpp_list.Religion', verbose_name='What is your religion affiliation?')),
            ],
            options={
                'verbose_name': 'RBD Demographics',
                'verbose_name_plural': 'RBD Demographics',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RecentPartner',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sex_partner_community', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='If outside community or farm outside this community or cattle post outside this community ask: Does this sexual partner live in any of the following communities?')),
                ('past_year_sex_freq', models.CharField(choices=[('Less than once a month', 'Less than once a month'), ('About once a month', 'About once a month'), ('2-3 times a month', '2-3 times a month'), ('About once a week', 'About once a week'), ('2 or more times a week', '2 or more times a week')], max_length=25, verbose_name='Approximately how often did you have sex with this partner during the past 12 months?')),
                ('third_last_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the last [most recent] time you had sex with this person (how long ago)?')),
                ('third_last_sex_calc', models.IntegerField(blank=True, help_text='e.g. if last sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months since last had sex with this person.')),
                ('first_first_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the first time you had sex with this person [how long ago]?')),
                ('first_first_sex_calc', models.IntegerField(blank=True, help_text='e.g. if first sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months/years since first had sex with this person.')),
                ('first_sex_current', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you expect to have sex with this person again?')),
                ('first_relationship', models.CharField(choices=[('Long-term partner', 'Long-term partner (>2 years) or spouse'), ('Boyfriend/Girlfriend', 'Boyfriend/Girlfriend'), ('Casual (known) partner', 'Casual (known) partner'), ('One time partner (previously unknown)', 'One time partner (previously unknown)'), ('Commercial sex worker', 'Commercial sex worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='What type of relationship do you have with this person?')),
                ('first_exchange', models.CharField(choices=[('less or equal to 18 years old', 'less or equal to 18 years old'), ('19-29', '19-29 years old'), ('30-39', '30-39 years old'), ('40-49', '40-49 years old'), ('50-59', '50-59 years old'), ('50-59', '50-59 years old'), ('60 or older', '60 year or older'), ('Not sure', 'Not sure')], help_text='Note: If participant does not want to answer, leave blank.', max_length=40, verbose_name='To the best of your knowledge, how old is this person?')),
                ('concurrent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Over the past 12 months, during the time you were having a sexual relationship with this person, did YOU have sex with other people (including husband/wife)?')),
                ('goods_exchange', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you received money, transport, food/drink, or other goods in exchange for sex from this partner?')),
                ('first_sex_freq', models.IntegerField(blank=True, null=True, verbose_name='During the last 3 months [of your relationship, if it has ended] how many times did you have sex with this partner?')),
                ('first_partner_hiv', models.CharField(choices=[('POS', 'HIV-positive'), ('NEG', 'HIV-negative'), ('not_sure', 'I am not sure HIV status'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="What is this partner's HIV status?")),
                ('partner_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Has your partner been tested for HIV in last 12 months')),
                ('first_haart', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Is this partner taking antiretroviral treatment?')),
                ('first_disclose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Did not know my HIV status', 'Did not know my HIV status'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Have you told this partner your HIV status?')),
                ('first_condom_freq', models.CharField(choices=[('All of the time', 'All of the time'), ('Sometimes', 'Sometimes'), ('Never', 'Never'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='When you have [had] sex with this partner, how often do you or your partner use a condom?')),
                ('first_partner_cp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='To the best of your knowledge, did he/she ever have other sex partners while you two were having a sexual relationship?')),
                ('first_partner_arm', models.CharField(blank=True, max_length=20, null=True)),
                ('first_partner_live', models.ManyToManyField(to='bcpp_list.PartnerResidency', verbose_name='Over the past 12 months, where has this sexual partner lived to the best of your knowledge?')),
            ],
            options={
                'verbose_name': 'Recent Partner - 12 Months',
                'verbose_name_plural': 'Recent Partner - 12 Months',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ReproductiveHealth',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('number_children', models.IntegerField(default=0, verbose_name='How many children have you given birth to? Please include any children that may have died at (stillbirth) or after birth. Do not include any current pregnancies or miscarriages that occur early in pregnancy (prior to 20 weeks).')),
                ('menopause', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='this also refers to pre-menopause', max_length=3, verbose_name='Have you reached menopause (more than 12 months without a period)?')),
                ('family_planning_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('currently_pregnant', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Are you currently pregnant?')),
                ('when_pregnant', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Did you become pregnant since the last interview we had with you?')),
                ('gestational_weeks', models.IntegerField(blank=True, help_text='gestational age in WEEKS. Among HIV-infected women who took/started ARVs during their last (or current pregnancy).', null=True, verbose_name="At about what gestational age (in weeks) did you start arv's during this (or your last) pregnancy?")),
                ('pregnancy_hiv_tested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='Among women who were not known to be HIV-infected prior to the last (or current pregnancy).', max_length=3, verbose_name='Were you tested for HIV during your most recent (or this current) pregnancy?')),
                ('pregnancy_hiv_retested', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text='if the respondent has reached that point by the time of the current interview.', max_length=3, verbose_name='If you tested HIV-negative during the most recent (or this current) pregnancy, were you re-tested for HIV in the last 3 months of your pregnancy or at delivery? ')),
                ('family_planning', models.ManyToManyField(blank=True, help_text='check all that apply', to='bcpp_list.FamilyPlanning', verbose_name='In the past 12 months, have you used any methods to prevent pregnancy ?')),
            ],
            options={
                'verbose_name': 'Reproductive Health',
                'verbose_name_plural': 'Reproductive Health',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ResidencyMobility',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('length_residence', models.CharField(choices=[('Less than 6 months', 'Less than 6 months'), ('6 months to 12 months', '6 months to 12 months'), ('1 to 5 years', '1 to 5 years'), ('More than 5 years', 'More than 5 years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='How long have you lived in this community?')),
                ('permanent_resident', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If participant has moved into the community in the past 12 months, then since moving in has the participant typically spent more than 14 nights per month in this community. If 'NO (or don't want to answer)' STOP. Participant cannot be enrolled.", max_length=10, verbose_name='In the past 12 months, have you typically spent 14 or more nights per month in this community? ')),
                ('intend_residency', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Do you intend to move out of the community in the next 12 months?')),
                ('nights_away', models.CharField(choices=[('zero', 'Zero nights'), ('1-6 nights', '1-6 nights'), ('1-2 weeks', '1-2 weeks'), ('3 weeks to less than 1 month', '3 weeks to less than 1 month'), ('1-3 months', '1-3 months'), ('4-6 months', '4-6 months'), ('more than 6 months', 'more than 6 months'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=35, verbose_name="In the past 12 months, in total how many nights did you spend away from this community, including visits to cattle post and lands?[If you don't know exactly, give your best guess]")),
                ('cattle_postlands', models.CharField(choices=[('N/A', 'Not Applicable'), ('Farm/lands', 'Farm/lands'), ('Cattle post', 'Cattle post'), ('Other community', 'Other community, specify:'), ('DWTA', "Don't want to answer")], default='N/A', max_length=25, verbose_name='In the past 12 months, during the times you were away from this community, where were you primarily staying?')),
                ('cattle_postlands_other', models.CharField(blank=True, max_length=65, null=True, verbose_name='Give the name of the community')),
            ],
            options={
                'verbose_name': 'Residency & Mobility',
                'verbose_name_plural': 'Residency & Mobility',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ResourceUtilization',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('out_patient', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, verbose_name='In the last 3 months, have you sought outpatient medical care for yourself? Not including any visits for which you were hospitalized. ')),
                ('hospitalized', models.IntegerField(null=True, verbose_name='In the last 3 months, how many times were you admitted to hospital or other types of inpatient care and stayed one or more nights? This could be a government, private, or church/mission hospital. ')),
                ('money_spent', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000000000)], verbose_name='In the last 3 months, how much money in total have you spent on medicines for yourself?')),
                ('medical_cover', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('REF', 'Refused to answer')], max_length=17, null=True, verbose_name='Were any of these costs for medicines or special foods covered by anyone else, such as your medical aid or employer? ')),
            ],
            options={
                'verbose_name': 'Resource Utilization Costs',
                'verbose_name_plural': 'Resource Utilization Costs',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SecondPartner',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sex_partner_community', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='If outside community or farm outside this community or cattle post outside this community ask: Does this sexual partner live in any of the following communities?')),
                ('past_year_sex_freq', models.CharField(choices=[('Less than once a month', 'Less than once a month'), ('About once a month', 'About once a month'), ('2-3 times a month', '2-3 times a month'), ('About once a week', 'About once a week'), ('2 or more times a week', '2 or more times a week')], max_length=25, verbose_name='Approximately how often did you have sex with this partner during the past 12 months?')),
                ('third_last_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the last [most recent] time you had sex with this person (how long ago)?')),
                ('third_last_sex_calc', models.IntegerField(blank=True, help_text='e.g. if last sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months since last had sex with this person.')),
                ('first_first_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the first time you had sex with this person [how long ago]?')),
                ('first_first_sex_calc', models.IntegerField(blank=True, help_text='e.g. if first sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months/years since first had sex with this person.')),
                ('first_sex_current', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you expect to have sex with this person again?')),
                ('first_relationship', models.CharField(choices=[('Long-term partner', 'Long-term partner (>2 years) or spouse'), ('Boyfriend/Girlfriend', 'Boyfriend/Girlfriend'), ('Casual (known) partner', 'Casual (known) partner'), ('One time partner (previously unknown)', 'One time partner (previously unknown)'), ('Commercial sex worker', 'Commercial sex worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='What type of relationship do you have with this person?')),
                ('first_exchange', models.CharField(choices=[('less or equal to 18 years old', 'less or equal to 18 years old'), ('19-29', '19-29 years old'), ('30-39', '30-39 years old'), ('40-49', '40-49 years old'), ('50-59', '50-59 years old'), ('50-59', '50-59 years old'), ('60 or older', '60 year or older'), ('Not sure', 'Not sure')], help_text='Note: If participant does not want to answer, leave blank.', max_length=40, verbose_name='To the best of your knowledge, how old is this person?')),
                ('concurrent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Over the past 12 months, during the time you were having a sexual relationship with this person, did YOU have sex with other people (including husband/wife)?')),
                ('goods_exchange', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you received money, transport, food/drink, or other goods in exchange for sex from this partner?')),
                ('first_sex_freq', models.IntegerField(blank=True, null=True, verbose_name='During the last 3 months [of your relationship, if it has ended] how many times did you have sex with this partner?')),
                ('first_partner_hiv', models.CharField(choices=[('POS', 'HIV-positive'), ('NEG', 'HIV-negative'), ('not_sure', 'I am not sure HIV status'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="What is this partner's HIV status?")),
                ('partner_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Has your partner been tested for HIV in last 12 months')),
                ('first_haart', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Is this partner taking antiretroviral treatment?')),
                ('first_disclose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Did not know my HIV status', 'Did not know my HIV status'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Have you told this partner your HIV status?')),
                ('first_condom_freq', models.CharField(choices=[('All of the time', 'All of the time'), ('Sometimes', 'Sometimes'), ('Never', 'Never'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='When you have [had] sex with this partner, how often do you or your partner use a condom?')),
                ('first_partner_cp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='To the best of your knowledge, did he/she ever have other sex partners while you two were having a sexual relationship?')),
                ('second_partner_arm', models.CharField(blank=True, max_length=20, null=True)),
                ('first_partner_live', models.ManyToManyField(to='bcpp_list.PartnerResidency', verbose_name='Over the past 12 months, where has this sexual partner lived to the best of your knowledge?')),
            ],
            options={
                'verbose_name': 'Second Partner - 12 Months',
                'verbose_name_plural': 'Second Partner - 12 Months',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SexualBehaviour',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('ever_sex', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='In your lifetime, have you ever had sex with anyone (including your spouse, friends, or someone you have just met)?')),
                ('lifetime_sex_partners', models.IntegerField(blank=True, null=True, verbose_name="In your lifetime, how many different people have you had sex with?  Please remember to include casual and once-off partners (prostitutes and truck drivers) as well as long-term partners (spouses, boyfriends/girlfriends)[If you can't recall the exact number, please give a best guess]")),
                ('last_year_partners', models.IntegerField(blank=True, help_text='Note:Leave blank if participant does not want to respond. ', null=True, verbose_name="In the past 12 months, how many different people have you had sex with?  Please remember to include casual and once-off partners (prostitutes and truck drivers) as well as long-term partners (spouses, boyfriends/girlfriends)[If you can't recall the exact number, please give a best guess]")),
                ('more_sex', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='In the past 12 months, did you have sex with somebody living outside of the community?')),
                ('first_sex', models.IntegerField(blank=True, help_text='Note:leave blank if participant does not want to respond.', null=True, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(64)], verbose_name="How old were you when you had sex for the first time? [If you can't recall the exact age, please give a best guess]")),
                ('condom', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During the last [most recent] time you had sex, did you or your partner use a condom?')),
                ('alcohol_sex', models.CharField(blank=True, choices=[('Neither of us', 'Neither of us'), ('My partner', 'My partner'), ('Myself', 'Myself'), ('Both of us', 'Both of us'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='During the last [most recent] time you had sex, were you or your partner drinking alcohol?')),
            ],
            options={
                'verbose_name': 'Sexual Behaviour',
                'verbose_name_plural': 'Sexual Behaviour',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Sti',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sti_dx_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('wasting_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='wasting diagnosis date')),
                ('diarrhoea_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Diarrhoea diagnosis date')),
                ('yeast_infection_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Yeast Infection diagnosis date')),
                ('pneumonia_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Pneumonia diagnosis date')),
                ('pcp_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date diagnosed with PCP')),
                ('herpes_date', models.DateField(blank=True, help_text='If participant has a record, provide the details on the card. If no card, provide verbal response.', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date diagnosed with herpes')),
                ('comments', models.CharField(blank=True, max_length=250, null=True, verbose_name='Comments')),
                ('sti_dx', models.ManyToManyField(help_text='(tick all that apply)', to='bcpp_list.StiIllnesses', verbose_name='[Interviewer:] Indicate each potentially HIV-related illness that is reported by the participant and/or recorded in his or her medical records')),
            ],
            options={
                'verbose_name': 'Potentially HIV-related illnesses',
                'verbose_name_plural': 'Potentially HIV-related illnesses',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Stigma',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('anticipate_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="Would you be, or have you ever been, hesitant to take an HIV test due to fear of people's reaction if you tested positive for HIV.")),
                ('enacted_shame_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I would be ashamed if someone in my family had HIV.')),
                ('saliva_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I fear that I could contract HIV if I come into contact with the saliva of a person living with HIV.')),
                ('teacher_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='I think that if a teacher is living with HIV but is not sick, he/she should be allowed to continue teaching in the school.')),
                ('children_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='Children living with HIV should be able to attend school with children who are HIV negative.')),
            ],
            options={
                'verbose_name': 'Stigma',
                'verbose_name_plural': 'Stigma',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StigmaOpinion',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('test_community_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="People are hesitant to take an HIV test due to fear of people's reaction if the test result is positive for HIV.")),
                ('gossip_community_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People talk badly about people living with or thought to be living with HIV to others.')),
                ('respect_community_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV lose respect or standing.')),
                ('enacted_verbal_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV are verbally insulted, harassed and/or threatened.')),
                ('enacted_phyical_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV are sometimes physically assaulted.')),
                ('enacted_family_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with or thought to be living with HIV are now more accepted by others as there is now an effective treatment available.')),
                ('fear_stigma', models.CharField(choices=[('Strongly disagree', 'Strongly disagree'), ('Disagree', 'Disagree'), ('Uncertain', 'Uncertain'), ('Agree', 'Agree'), ('Strongly agree', 'Strongly agree'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='People living with HIV are less able to financially support themselves and their families.')),
            ],
            options={
                'verbose_name': 'Stigma Opinion',
                'verbose_name_plural': 'Stigma Opinion',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are you a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='If not a citizen, are you legally married to a Botswana Citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'NO' participant will not be enrolled.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate, as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(help_text='Format is YYYY-MM-DD', null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model.fields.custom_fields.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is a minor. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma then followe by a space. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's Last and first name (minors only)")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the client')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the client had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the client questions about this study and they have demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, INELIGIBLE', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='The client has signed the consent form?')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy to the clinic with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the client with a copy of their signed informed consent')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the subject agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='-', help_text="( if 'Yes' STOP patient cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default=None, help_text="( if 'No' provide witness's name on this form and signature on the paper document.)", max_length=3, verbose_name='Is the participant LITERATE?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if subject is illiterate. Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's Last and first name (illiterates only)")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], default='not specified', help_text='The language used for the edc_consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('subject_identifier', models.CharField(blank=True, max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(default=None, editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(default='?', editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('study_site', models.CharField(max_length=15, null=True)),
                ('sid', models.CharField(blank=True, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text="Use Omang, Passport number, driver's license number or Omang receipt number (Encryption: RSA local)", max_length=71, verbose_name='Identity number (OMANG, etc)')),
                ('identity_type', edc_base.model.fields.custom_fields.IdentityTypeField(choices=[('OMANG', 'Omang'), ('DRIVERS', "Driver's License"), ('PASSPORT', 'Passport'), ('OMANG_RCPT', 'Omang Receipt'), ('OTHER', 'Other')], max_length=15, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number from the identity card (Encryption: RSA local)', max_length=71, null=True)),
                ('is_minor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='-', editable=False, help_text='Subject is a minor if aged 16-17. A guardian must be present for consent. HIV status may NOT be revealed in the household.', max_length=10, null=True, verbose_name='Is subject a minor?')),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('household_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
            ],
            options={
                'get_latest_by': 'consent_datetime',
                'ordering': ('-created',),
            },
            bases=(django_crypto_fields.mixins.CryptoMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', models.UUIDField(editable=False, help_text='system field for export tracking.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_signed', models.DateField(default=datetime.date.today, verbose_name='Date Locator Form signed ')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Mailing address ')),
                ('home_visit_permission', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to make home visits for follow-up purposes during the study?')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Physical address with detailed description')),
                ('may_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to call her for follow-up purposes during the study?')),
                ('may_sms_follow_up', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given his/her permission for study staff to SMS her for follow-up purposes during the study?')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Doesnt_work', 'Doesnt Work')], max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact her at work for follow up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Work contact number ')),
                ('may_contact_someone', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given his/her permission for study staff to contact anyone else for follow-up purposes during the study?')),
                ('contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=71, null=True, verbose_name='Full physical address ')),
                ('contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.CellNumber], verbose_name='Cell number')),
                ('contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model.validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('alt_contact_cell_number', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include first name and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWCellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.bw.validators.BWTelephoneNumber], verbose_name='Telephone number')),
            ],
            options={
                'verbose_name': 'Subject Locator',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectOffstudy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(editable=False, max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.CharField(editable=False, max_length=50, verbose_name='Subject Identifier as pk')),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('offstudy_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Off-study Date')),
                ('reason', models.CharField(max_length=115, verbose_name='Please code the primary reason participant taken off-study')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Subject Off Study',
                'verbose_name_plural': 'Subject Off Study',
            },
        ),
        migrations.CreateModel(
            name='SubjectReferral',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', models.UUIDField(editable=False, help_text='system field for export tracking.')),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('subject_referred', models.CharField(choices=[('Yes', 'Yes, subject has been handed a referral letter'), ('No', 'No, subject has not been handed a referral letter'), ('refused', 'Subject refused referral the referral letter')], max_length=10)),
                ('referral_appt_date', models.DateTimeField(editable=False, help_text="The calculated referral appointment date communicated to the participant. See also attribute 'referral_appt_comment' for when the participant is unsure about attending on this date.", null=True, validators=[edc_base.model.validators.date.datetime_is_future], verbose_name='Referral Appointment Date')),
                ('referral_clinic', models.CharField(editable=False, help_text='The full name of the current community, e.g lentsweletau.', max_length=50)),
                ('referral_clinic_other', models.CharField(editable=False, help_text='(not used)', max_length=50, null=True)),
                ('gender', models.CharField(editable=False, help_text='M=Male, F=Female', max_length=10, null=True)),
                ('citizen', models.NullBooleanField(default=None, editable=False, help_text='True if citizen, False if not, None if unknown or N/A')),
                ('citizen_spouse', models.NullBooleanField(default=None, editable=False, help_text='True if citizen_spouse, False if not, None if unknown or N/A')),
                ('hiv_result', models.CharField(editable=False, help_text='HIV status (POS, NEG, IND) as determined by the field RA either by testing or using a combination of verbal response and documentation. None if no result available. See also new_pos. (derived)', max_length=50, null=True)),
                ('hiv_result_datetime', models.DateTimeField(editable=False, help_text="HIV result datetime either from today's test or documentation provided by the subject or None. See also new_pos. (derived)", max_length=50, null=True)),
                ('todays_hiv_result', models.CharField(editable=False, help_text='from HIV result of test performed by the field RA (POS, NEG, IND) or None if not performed. The datetime of the result is hiv_result_datetime.', max_length=50, null=True)),
                ('new_pos', models.NullBooleanField(default=None, editable=False, help_text='True if subject is newly diagnosed POS, false if known positive otherwise None (derived)')),
                ('last_hiv_result', models.CharField(editable=False, help_text="Documented result from a participant's past record of HIV testing or valid documentation of positive status (derived)", max_length=50, null=True)),
                ('verbal_hiv_result', models.CharField(editable=False, help_text='from HivTestingHistory.verbal_result. HIV status as verbally provided by subject or None. See also  if a positive result is supported by direct and indirect documentation.', max_length=50, null=True)),
                ('direct_hiv_documentation', models.NullBooleanField(editable=False, help_text="from HivTestingHistory.has_record. True if a document was seen that confirms the subject's verbally provided result, False if not, None if unknown. See also last_hiv_result.")),
                ('indirect_hiv_documentation', models.NullBooleanField(editable=False, help_text='from HivTestingHistory.other_record and from HivCareAdherence.arv_evidence. True if a document was seen that suggests the subject is HIV positive, False if not, None if unknown.')),
                ('last_hiv_result_date', models.DateTimeField(editable=False, help_text='Recorded date of previous HIV test or of the document that provides supporting evidence of HIV infection (derived)', null=True)),
                ('on_art', models.NullBooleanField(default=None, editable=False, help_text='from HivCareAdherence.on_art() method. True if subject claims to be on ARV, False if not, None if unknown. See also art_documentation. (derived)')),
                ('arv_documentation', models.NullBooleanField(editable=False, help_text="from HivCareAdherence.arv_evidence. True if Field RA has seen documents that shows subject is on ARV's, False if not, None if unknown. If True, overrides HivCareAdherence.on_arv=False")),
                ('arv_clinic', models.CharField(default=None, editable=False, help_text='from HivCareAdherence.clinic_receiving_from. The ARV clinic where subject currently receives care', max_length=50, null=True)),
                ('next_arv_clinic_appointment_date', models.DateField(default=None, editable=False, help_text="from HivCareAdherence.next_appointment_date. Next appointment date at the subject's ARV clinic.", null=True)),
                ('cd4_result', models.DecimalField(decimal_places=2, editable=False, help_text="from Pima. Result of today's CD4 test performed in the household", max_digits=6, null=True)),
                ('cd4_result_datetime', models.DateTimeField(editable=False, help_text='from Pima. datetime CD4 drawn.', null=True)),
                ('vl_sample_drawn', models.NullBooleanField(default=None, editable=False, help_text='from SubjectRequisition. True if a viral load sample was drawn in the household')),
                ('vl_sample_drawn_datetime', models.DateTimeField(editable=False, help_text='from SubjectRequisition. Datetime of viral load drawn.', null=True)),
                ('pregnant', models.NullBooleanField(default=None, editable=False, help_text='from ReproductiveHealth.currently_pregnant. True if currently pregnant, False if not, None if unknown.')),
                ('circumcised', models.NullBooleanField(default=None, editable=False, help_text='from Circumcison.circumcised. True if circumcised, False if not, None if unknown')),
                ('part_time_resident', models.NullBooleanField(default=None, editable=False, help_text='from eligibility checklist.part_time_resident. True if at least a part_time resident, False if not, None if unknown')),
                ('permanent_resident', models.NullBooleanField(default=None, editable=False, help_text='from residence and mobility.permanent_resident. True if permanent resident, False if not, None if unknown')),
                ('tb_symptoms', models.CharField(editable=False, help_text='list of symptoms from tb_symptoms. Any combination of Fever, cough, cough_blood, fever, night_sweat, lymph_nodes, weight_loss OR None', max_length=100, null=True)),
                ('urgent_referral', models.NullBooleanField(default=None, editable=False, help_text='True if one of MASA-DF, POS!-LO, POS#-LO, POS#-PR, POS!-PR, otherwise None (derived)')),
                ('referral_code', models.CharField(choices=[('pending', '<data collection in progress>'), ('TST-CD4', 'POS any, need CD4 testing'), ('TST-HIV', 'HIV test'), ('MASA-CC', 'Known POS, MASA continued care'), ('MASA-DF', 'Known POS, MASA defaulter (was on ART)'), ('SMC-NEG', 'SMC (uncircumcised, hiv neg)'), ('SMC?NEG', 'SMC (Unknown circumcision status, hiv neg'), ('SMC-UNK', 'SMC (uncircumcised, hiv result not known)'), ('SMC?UNK', 'SMC (Unknown circumcision status, hiv result not known)'), ('NEG!-PR', 'NEG today, Pregnant'), ('POS!-PR', 'POS today, Pregnant'), ('UNK?-PR', 'HIV UNKNOWN, Pregnant'), ('POS#-AN', 'Known POS, Pregnant, on ART (ANC)'), ('POS#-PR', 'Known POS, Pregnant, not on ART'), ('POS!-HI', 'POS today, not on ART, high CD4)'), ('POS!-LO', 'POS today, not on ART, low CD4)'), ('POS#-HI', 'Known POS, not on ART, high CD4)'), ('POS#-LO', 'Known POS, not on ART, low CD4)')], default='pending', editable=False, help_text='list of referral codes confirmed by the edc, comma delimited if more than one (derived).', max_length=50, verbose_name='Referral Code')),
                ('in_clinic_flag', models.BooleanField(default=False, editable=False, help_text='system field. flag indicating participant was seen in clinic (from implementer data.) Updated by export_transaction.')),
                ('subject_identifier', models.CharField(editable=False, max_length=50, null=True)),
                ('comment', models.CharField(blank=True, help_text='IMPORTANT: Do not include any names or other personally identifying information in this comment', max_length=250, verbose_name='Comment')),
                ('scheduled_appt_date', models.DateField(blank=True, help_text='Use the IDCC date. If subject is pregnant, use the ANC date instead of the IDCC date.  If the subject does not have a scheduled appointment, leave blank', null=True, validators=[edc_base.model.validators.date.date_is_future], verbose_name='Previously scheduled clinic appointment date in this BHS community')),
                ('referral_appt_comment', models.CharField(choices=[('N/A', 'not applicable'), ('conflict', 'have another commitment'), ('prefer_other_facility', 'prefer another health facility than the local clinic'), ('prefer_other_date', 'prefer to come on my own convenient time'), ('undecided_thinking', 'have to think about it'), ('undecided_accepting_status', 'need time to accept my HIV status'), ('have_other_anc_appt', 'have already registered with ANC and have another appointment'), ('personal_reasons', 'personal reasons')], default='N/A', help_text='If subject is unsure about attending the suggested appointment date, indicate the reason.', max_length=50, verbose_name='Reason for not attending suggested appointment date')),
                ('referral_clinic_type', models.CharField(choices=[('ANC', 'ANC'), ('IDCC', 'IDCC'), ('SMC', 'SMC'), ('VCT', 'VCT')], editable=False, help_text='The clinic type of clinic the participant is referred to for services, (IDCC, VCT, ANC or SMC)', max_length=25, null=True)),
            ],
            options={
                'verbose_name': 'Subject Referral',
                'verbose_name_plural': 'Subject Referral',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25, null=True)),
                ('schedule_name', models.CharField(editable=False, help_text='the name of the schedule used to find the list of "visits" to create appointments', max_length=25, null=True)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('report_date', models.DateField(editable=False, verbose_name='Visit Date')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('reason_unscheduled', models.CharField(blank=True, choices=[('Routine oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('Ill oncology', 'Ill oncology clinic visit'), ('Patient called', 'Patient called to come for visit'), ('OTHER', 'Other, specify:')], max_length=25, null=True, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.Appointment')),
                ('household_member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_household_member.HouseholdMember')),
            ],
            options={
                'verbose_name': 'Subject Visit',
            },
        ),
        migrations.CreateModel(
            name='SubstanceUse',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('alcohol', models.CharField(choices=[('Never', 'Never'), ('Less then once a week', 'Less then once a week'), ('Once a week', 'Once a week'), ('2 to 3 times a week', '2 to 3 times a week'), ('more than 3 times a week', 'more than 3 times a week'), ('DWTA', "Don't want to answer")], help_text='If participant does not know exactly, ask to give a best guess.', max_length=25, verbose_name='In the past month, how often did you consume alcohol?')),
                ('smoke', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you currently smoke any tobacco products, such as cigarettes, cigars, or pipes?')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Substance Use',
                'verbose_name_plural': 'Substance Use',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='TbSymptoms',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('cough', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Does the participant currently have a COUGH that has lasted for more than 2 weeks?')),
                ('fever', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last two weeks has the participant had FEVER?')),
                ('lymph_nodes', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='Does the participant currently have ENLARGED LYMPH NODES?')),
                ('cough_blood', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last two weeks has the participant COUGHED UP BLOOD?')),
                ('night_sweat', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last two weeks has the participant had NIGHT SWEATS?')),
                ('weight_loss', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, verbose_name='In the last month has the participant had unexplained WEIGHT LOSS?')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'TB Symptoms',
                'verbose_name_plural': 'TB Symptoms',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ThirdPartner',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sex_partner_community', models.CharField(choices=[('N/A', 'Not Applicable'), ('Bokaa', 'Bokaa'), ('Digawana', 'Digawana'), ('Gumare', 'Gumare'), ('Gweta', 'Gweta'), ('Lentsweletau', 'Lentsweletau'), ('Lerala', 'Lerala'), ('Letlhakeng', 'Letlhakeng'), ('Mmandunyane', 'Mmandunyane'), ('Mmankgodi', 'Mmankgodi'), ('Mmadinare', 'Mmadinare'), ('Mmathethe', 'Mmathethe'), ('Masunga', 'Masunga'), ('Maunatlala', 'Maunatlala'), ('Mathangwane', 'Mathangwane'), ('Metsimotlhabe', 'Metsimotlhabe'), ('Molapowabojang', 'Molapowabojang'), ('Nata', 'Nata'), ('Nkange', 'Nkange'), ('Oodi', 'Oodi'), ('Otse', 'Otse'), ('Rakops', 'Rakops'), ('Ramokgonami', 'Ramokgonami'), ('Ranaka', 'Ranaka'), ('Sebina', 'Sebina'), ('Sefhare', 'Sefhare'), ('Sefophe', 'Sefophe'), ('Shakawe', 'Shakawe'), ('Shoshong', 'Shoshong'), ('Tati_Siding', 'Tati_Siding'), ('Tsetsebjwe', 'Tsetsebjwe'), ('OTHER', 'Other non study community')], max_length=25, verbose_name='If outside community or farm outside this community or cattle post outside this community ask: Does this sexual partner live in any of the following communities?')),
                ('past_year_sex_freq', models.CharField(choices=[('Less than once a month', 'Less than once a month'), ('About once a month', 'About once a month'), ('2-3 times a month', '2-3 times a month'), ('About once a week', 'About once a week'), ('2 or more times a week', '2 or more times a week')], max_length=25, verbose_name='Approximately how often did you have sex with this partner during the past 12 months?')),
                ('third_last_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the last [most recent] time you had sex with this person (how long ago)?')),
                ('third_last_sex_calc', models.IntegerField(blank=True, help_text='e.g. if last sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months since last had sex with this person.')),
                ('first_first_sex', models.CharField(choices=[('Days', 'Days'), ('Months', 'Months'), ('Years', 'Years'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='When was the first time you had sex with this person [how long ago]?')),
                ('first_first_sex_calc', models.IntegerField(blank=True, help_text='e.g. if first sex was last night, then it should be recorded as 1 day', null=True, verbose_name='Give the number of days/months/years since first had sex with this person.')),
                ('first_sex_current', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Do you expect to have sex with this person again?')),
                ('first_relationship', models.CharField(choices=[('Long-term partner', 'Long-term partner (>2 years) or spouse'), ('Boyfriend/Girlfriend', 'Boyfriend/Girlfriend'), ('Casual (known) partner', 'Casual (known) partner'), ('One time partner (previously unknown)', 'One time partner (previously unknown)'), ('Commercial sex worker', 'Commercial sex worker'), ('OTHER', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=40, verbose_name='What type of relationship do you have with this person?')),
                ('first_exchange', models.CharField(choices=[('less or equal to 18 years old', 'less or equal to 18 years old'), ('19-29', '19-29 years old'), ('30-39', '30-39 years old'), ('40-49', '40-49 years old'), ('50-59', '50-59 years old'), ('50-59', '50-59 years old'), ('60 or older', '60 year or older'), ('Not sure', 'Not sure')], help_text='Note: If participant does not want to answer, leave blank.', max_length=40, verbose_name='To the best of your knowledge, how old is this person?')),
                ('concurrent', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Over the past 12 months, during the time you were having a sexual relationship with this person, did YOU have sex with other people (including husband/wife)?')),
                ('goods_exchange', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Have you received money, transport, food/drink, or other goods in exchange for sex from this partner?')),
                ('first_sex_freq', models.IntegerField(blank=True, null=True, verbose_name='During the last 3 months [of your relationship, if it has ended] how many times did you have sex with this partner?')),
                ('first_partner_hiv', models.CharField(choices=[('POS', 'HIV-positive'), ('NEG', 'HIV-negative'), ('not_sure', 'I am not sure HIV status'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name="What is this partner's HIV status?")),
                ('partner_hiv_test', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('DWTA', "Don't want to answer")], max_length=25, verbose_name='Has your partner been tested for HIV in last 12 months')),
                ('first_haart', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='Is this partner taking antiretroviral treatment?')),
                ('first_disclose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Did not know my HIV status', 'Did not know my HIV status'), ('DWTA', "Don't want to answer")], max_length=30, null=True, verbose_name='Have you told this partner your HIV status?')),
                ('first_condom_freq', models.CharField(choices=[('All of the time', 'All of the time'), ('Sometimes', 'Sometimes'), ('Never', 'Never'), ('DWTA', "Don't want to answer")], max_length=25, null=True, verbose_name='When you have [had] sex with this partner, how often do you or your partner use a condom?')),
                ('first_partner_cp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, null=True, verbose_name='To the best of your knowledge, did he/she ever have other sex partners while you two were having a sexual relationship?')),
                ('third_partner_arm', models.CharField(blank=True, max_length=20, null=True)),
                ('first_partner_live', models.ManyToManyField(to='bcpp_list.PartnerResidency', verbose_name='Over the past 12 months, where has this sexual partner lived to the best of your knowledge?')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Third Partner - 12 Months',
                'verbose_name_plural': 'Third Partner - 12 Months',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Tubercolosis',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('date_tb', models.DateField(validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of the diagnosis of tuberculosis:')),
                ('dx_tb', models.CharField(choices=[('Pulmonary tuberculosis', 'Pulmonary tuberculosis'), ('Extrapulmonary (outside the lungs) tuberculosis', 'Extrapulmonary (outside the lungs) tuberculosis'), ('Other', 'Other, specify:'), ('DWTA', "Don't want to answer")], max_length=50, verbose_name='[Interviewer:]What is the tuberculosis diagnosis as recorded?')),
                ('dx_tb_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Tubercolosis',
                'verbose_name_plural': 'Tubercolosis',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Uncircumcised',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('circumcised', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=15, null=True, verbose_name='Do you believe that male circumcision has any health benefits for you?')),
                ('reason_circ', models.CharField(choices=[('Circumcision never offered to me', 'Circumcision never offered to me'), ('Procedure might be painful', 'Procedure might be painful'), ('Did not know where to go for circumcision', 'Did not know where to go for circumcision'), ('Did not have the time or money for circumcision', 'Did not have the time or money for circumcision'), ('I might not be able to work or be active', 'I might not be able to work or be active'), ('My partner might not approve', 'My partner might not approve'), ('My family/friends might not approve', 'My family/friends might not approve'), ('There might be a medical complication', 'There might be a medical complication'), ('The healing time is very long', 'The healing time is very long'), ('It will be hard to not have sex or masturbate for 6 weeks', 'It will be hard to not have sex or masturbate for 6 weeks'), ('Sex might not feel the same', 'Sex might not feel the same'), ('I may not like the way my penis looks', 'I may not like the way my penis looks'), ('I may not like the way my penis feels', 'I may not like the way my penis feels'), ('I could die from the procedure', 'I could die from the procedure'), ('OTHER', 'Other, specify:'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=65, null=True, verbose_name='What is the main reason that you have not yet been circumcised?')),
                ('reason_circ_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('future_circ', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure')], max_length=25, verbose_name='Would you ever consider being circumcised in the future?')),
                ('future_reasons_smc', models.CharField(choices=[('More information about benefits', 'More information about benefits'), ('More information about risks', 'More information about risks'), ('If there was no or minimal pain with circumcision', 'If there was no or minimal pain with circumcision'), ('If circumcision could be done close to my home', 'If circumcision could be done close to my home'), ('If the kgosi recommended circumcision for all men', 'If the kgosi recommended circumcision for all men'), ('If I received time off work to recover from circumcision', 'If I received time off work to recover from circumcision'), ('If my sexual partner encouraged me', 'If my sexual partner encouraged me'), ('If one or both of my parents encouraged me', 'If one or both of my parents encouraged me'), ('If my friends encouraged me', 'If my friends encouraged me'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=75, null=True, verbose_name='Which of the following might increase your willingness to be circumcised the most?')),
                ('service_facilities', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('DWTA', "Don't want to answer")], max_length=35, null=True, verbose_name='Were you aware that circumcision services are provided free of charge at most health facilities?')),
                ('aware_free', models.CharField(blank=True, choices=[('Radio', 'Radio'), ('Television', 'Television'), ('Friend told me', 'Friend told me'), ('Family told me', 'Family told me'), ('Health worker told me', 'Health worker told me'), ('Kgosi told us', 'Kgosi told us'), ('I heard it at the kgotla', 'I heard it at the kgotla'), ('I read a brochure delivered to my home', 'I read a brochure delivered to my home'), ('I read it in the newspaper', 'I read it in the newspaper'), ('Heard it at a community event', 'Heard it at a community event'), ('not_sure', 'I am not sure'), ('DWTA', "Don't want to answer")], max_length=85, null=True, verbose_name='Where did you learn that circumcision services were available free at most health facilities?')),
                ('health_benefits_smc', models.ManyToManyField(blank=True, to='bcpp_list.CircumcisionBenefits', verbose_name='What do you believe are the health benefits of male circumcision? (Indicate all that apply.)')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Uncircumcised',
                'verbose_name_plural': 'Uncircumcised',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ViralLoadResult',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='mac2-2.local', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_version', models.CharField(default='?', editable=False, max_length=10)),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sample_id', models.CharField(editable=False, help_text='Aliquot identifier', max_length=25, unique=True, verbose_name='Aliquot Identifier')),
                ('study_site', models.CharField(max_length=10)),
                ('clinician_initials', edc_base.model.fields.custom_fields.InitialsField(default='--', help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, verbose_name='Clinician initial')),
                ('collection_datetime', models.DateTimeField(verbose_name='The datetime sample was drawn')),
                ('received_datetime', models.DateTimeField(verbose_name='The datetime sample was received')),
                ('test_datetime', models.DateTimeField(verbose_name='Test datetime')),
                ('assay_date', models.DateField(verbose_name='Assay date')),
                ('result_value', models.IntegerField(help_text='copies/ml', verbose_name='Result Value')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('validation_datetime', models.DateTimeField(verbose_name='Datetime result was reported')),
                ('assay_performed_by', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Assay performed by')),
                ('validated_by', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Validated by')),
                ('validation_reference', models.CharField(help_text='Validation reference', max_length=25, unique=True, verbose_name='Validation reference')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit')),
            ],
            options={
                'verbose_name': 'Viral Load Result',
                'verbose_name_plural': 'Viral Load Result',
                'abstract': False,
            },
            bases=(edc_base.model.models.url_mixin.UrlMixin, models.Model),
        ),
        migrations.AddField(
            model_name='subjectreferral',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='stigmaopinion',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='stigma',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='sti',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='sexualbehaviour',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='secondpartner',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='resourceutilization',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='residencymobility',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='reproductivehealth',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='recentpartner',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='rbddemographics',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='qualityoflife',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='pregnancy',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='positiveparticipant',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='pimavl',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='pima',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='participation',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='outpatientcare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='nonpregnancy',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='medicaldiagnoses',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='labourmarketwages',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hospitaladmission',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivuntested',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivtestreview',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivtestinghistory',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivtested',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivresultdocumentation',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivresult',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivmedicalcare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivlinkagetocare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivhealthcarecosts',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hivcareadherence',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalviralloadresult',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaluncircumcised',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaltubercolosis',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalthirdpartner',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaltbsymptoms',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalsubstanceuse',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalsubjectreferral',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalsubjectlocator',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalstigmaopinion',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalstigma',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalsti',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalsexualbehaviour',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalsecondpartner',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalresourceutilization',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalresidencymobility',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalreproductivehealth',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalrecentpartner',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalrbddemographics',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalqualityoflife',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpregnancy',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpositiveparticipant',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpimavl',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalpima',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalparticipation',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaloutpatientcare',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalnonpregnancy',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalmedicaldiagnoses',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicallabourmarketwages',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhospitaladmission',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivuntested',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivtestreview',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivtestinghistory',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivtested',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivresultdocumentation',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivresult',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivmedicalcare',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivlinkagetocare',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivhealthcarecosts',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhivcareadherence',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalhicenrollment',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalheartattack',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalgrant',
            name='labour_market_wages',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.LabourMarketWages'),
        ),
        migrations.AddField(
            model_name='historicalgrant',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalelisahivresult',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaleducation',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicaldemographics',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalcorrectconsent',
            name='subject_consent',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectConsent'),
        ),
        migrations.AddField(
            model_name='historicalcommunityengagement',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalclinicquestionnaire',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalcircumcision',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalcircumcised',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalceaenrollmentchecklist',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalcd4history',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalcancer',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='historicalaccesstocare',
            name='subject_visit',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='hicenrollment',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='heartattack',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='grant',
            name='labour_market_wages',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.LabourMarketWages'),
        ),
        migrations.AddField(
            model_name='grant',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='elisahivresult',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='education',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='demographics',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='correctconsent',
            name='subject_consent',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectConsent'),
        ),
        migrations.AddField(
            model_name='communityengagement',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='clinicquestionnaire',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='circumcision',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='circumcised',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='ceaenrollmentchecklist',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='cd4history',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AddField(
            model_name='cancer',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together=set([('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')]),
        ),
        migrations.AddField(
            model_name='accesstocare',
            name='subject_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='bcpp_subject.SubjectVisit'),
        ),
        migrations.AlterUniqueTogether(
            name='subjectconsent',
            unique_together=set([('first_name', 'dob', 'initials', 'version'), ('subject_identifier', 'version')]),
        ),
    ]
